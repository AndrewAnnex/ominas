;=============================================================================
;+
; NAME:
; station_input
;
;
; PURPOSE:
; Input translator for planet-based stations.
;
;
; CATEGORY:
; NV/CONFIG
;
;
; CALLING SEQUENCE(only to be called by nv_get_value):
; result = station_input(dd, keyword)
;
;
; ARGUMENTS:
;  INPUT:
; dd:  Data descriptor.
;
; keyword: String giving the name of the translator quantity.
;
;  OUTPUT:
; NONE
;
;
; KEYWORDS:
;  INPUT:
; key1:  Planet descriptor -- required
;
; key2:  Camera descriptor
;
;  OUTPUT:
; status:  Zero if valid data is returned
;
; n_obj:  Number of objects returned.
;
; dim:  Dimensions of return objects.
;
;
;  TRANSLATOR KEYWORDS:
; NONE
;
;
; RETURN:
; Data associated with the requested keyword.
;
;
; STATUS:
; Complete
;
;
; MODIFICATION HISTORY:
;  Written by: Spitale; 7/2007
; 
;-
;=============================================================================



;=============================================================================
; si_clone
;
;=============================================================================
function si_clone, _rd

 n = n_elements(_rd)
 rd = ptrarr(n)

 for i=0, n-1 do if(ptr_valid(_rd[i])) then $
                           rd[i] = rng_clone_descriptor(_rd[i])

 return, rd
end
;=============================================================================



;=============================================================================
; si_load
;
;=============================================================================
function si_load, catfile, reload=reload
common si_load_block, _catfile, _dat_p

 ;--------------------------------------------------------------------
 ; if appropriate catalog is loaded, then just return descriptors
 ;--------------------------------------------------------------------
 load = 1

 if(keyword_set(_catfile) AND (NOT keyword_set(reload))) then $
  begin
   w = where(_catfile EQ catfile)
   if(w[0] NE -1) then $
    begin
     load = 0
     dat = *(_dat_p[w[0]])
    end
  end 

 ;--------------------------------------------------------------------
 ; otherwise read and parse the catalog
 ;--------------------------------------------------------------------
 if(load) then $
  begin
   ;- - - - - - - - - - - - - - - - - - - -
   ; read the catalog
   ;- - - - - - - - - - - - - - - - - - - -
   dat = station_read(catfile)

   ;- - - - - - - - - - - - - - - - - - - -
   ; save catalog data
   ;- - - - - - - - - - - - - - - - - - - -
   _catfile = append_array(_catfile, catfile)
   _dat_p = append_array(_dat_p, ptr_new(dat))
  end

 return, dat
end
;=============================================================================



;=============================================================================
; station_input
;
;=============================================================================
function station_input, dd, keyword, prefix, $
                      n_obj=n_obj, dim=dim, values=values, status=status, $
@nv_trs_keywords_include.pro
@nv_trs_keywords1_include.pro
 end_keywords

 ;--------------------------
 ; verify keyword
 ;--------------------------
 if(keyword NE 'STN_DESCRIPTORS') then $
  begin
   status = -1
   return, 0
  end


 ;----------------------------------------------
 ; check station catalog
 ;----------------------------------------------
 catpath = getenv('NV_STATION_DATA')
 if(NOT keyword_set(catpath)) then $
   nv_message, name='station_input', $
     'NV_STATION_DATA environment variable is undefined.'


 status = 0
 n_obj = 0
 dim = [1]


 ;-----------------------------------------------
 ; translator arguments
 ;-----------------------------------------------
 select_all = tr_keyword_value(dd, 'all')
 reload = tr_keyword_value(dd, 'reload')
 sel_names = str_nsplit(tr_keyword_value(dd, 'name'), ';')
 if(NOT keyword_set(sel_names[0])) then sel_names= '' $
 else select_all = 1


 ;-----------------------------------------------
 ; planet descriptor passed as key2
 ;-----------------------------------------------
 if(keyword_set(key2)) then pds = key2 $
 else $
  begin
;   nv_message, /con, name='station_input', 'Planet descriptor required.'
   status = -1
   return, 0
  end

 ;-----------------------------------------------
 ; object names passed as key8
 ;-----------------------------------------------
 if(keyword_set(key8) AND (NOT keyword_set(sel_names))) then sel_names = key8


 ;-----------------------------------------------
 ; set up station descriptors
 ;-----------------------------------------------
 npds = n_elements(pds)
 for i=0, npds-1 do $
  begin
   _stds = 0
   planet = cor_name(pds[i])

   ;- - - - - - - - - - - - - - - - - - - - - - - - -
   ; read relevant station catalog
   ;- - - - - - - - - - - - - - - - - - - - - - - - -
   catfile = catpath + '/stations_' + strlowcase(planet) + '.txt'
   ff = findfile(catfile)   
   if(keyword_set(ff)) then $
    begin
     dat = si_load(catfile, reload=reload)

     ;- - - - - - - - - - - - - - - - - - - - - - - -
     ; if any requested names, select only those
     ;- - - - - - - - - - - - - - - - - - - - - - - -
     continue = 1
     if(keyword_set(sel_names)) then $
      begin
       for j=0, n_elements(sel_names)-1 do $
               ww = append_array(ww, where(strupcase(dat.name) EQ strupcase(sel_names[j])), /def)
       www = where(ww NE -1)
       if(www[0] EQ -1) then continue = 0 $
       else dat = dat[ww[www]]
      end

     ;- - - - - - - - - - - - - - - - - - - - - - - -
     ; construct body descriptors
     ;- - - - - - - - - - - - - - - - - - - - - - - -
     if(continue) then $
      begin
       ndat = n_elements(dat)
       _stds = stn_init_descriptors(ndat)

       pos_surf = transpose([transpose([dat.lat]), transpose([dat.lon]), transpose([dat.alt])])

       pos = bod_body_to_inertial_pos(pds[i], $
               glb_globe_to_body(pds[i], pos_surf))

       pos = reform(transpose(pos), 1, 3, ndat)
       bod_set_pos, _stds, pos
       bod_set_time, _stds, bod_time(pds[i])
       cor_set_name, _stds, dat.name
       cor_set_udata, _stds, 'POS_SURF', transpose([pos_surf])
       stn_set_primary, _stds, cor_name(pds[i])
      end
    end
   stds = append_array(stds, _stds)
  end


 if(NOT keyword_set(stds)) then $
  begin
   status = -1
   return, 0
  end



 n_obj = n_elements(stds)
 return, stds
end
;===========================================================================



