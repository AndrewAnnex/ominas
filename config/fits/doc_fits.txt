									12/05/15
FITS Program Reference
======================

 Summary
 -------
  - CHECK_FITS
	Given a FITS array IM, and a associated FITS or STSDAS header HDR, this
	procedure will check that
		(1) HDR is a string array, and IM is defined and numeric   
		(2) The NAXISi values in HDR are appropiate to the dimensions 
                   of IM
		(3) The BITPIX value in HDR is appropiate to the datatype of IM

  - CONV_UNIX_VAX
	Converts Unix IDL data types to VAX IDL data types.

  - CONV_VAX_UNIX
	Converts VAX IDL data types to UNIX IDL data types.

  - IEEE_TO_HOST
	Translates an IDL variable in IEEE-754 representation (as used, for
	example, in FITS data ), into the host machine architecture.

  - MKHDR
	Make a minimal primary FITS image header or a minimal FITS IMAGE
	extension header.

  - READ_FITS
	Reads a FITS file into IDL data and optionally header variables.

  - STRN
	Convert a number to a string and remove padded blanks.
 EXPLANATION:
	The main and original purpose of this procedure is to convert a number
	to an unpadded string (i.e. with no blanks around it.)  However, it 
	has been expanded to be a multi-purpose formatting tool.  You may 
	specify a length for the output string; the returned string is either 
	set to that length or padded to be that length.  You may specify 
	characters to be used in padding and which side to be padded.  Finally,
	you may also specify a format for the number.  NOTE that the input 
	"number" need not be a number; it may be a string, or anything.  It is
	converted to string.

 CALLING SEQEUNCE:
	tmp = STRN( number, [ LENGTH=, PADTYPE=, PADCHAR=, FORMAT = ] )

 INPUT:
	NUMBER    This is the input variable to be operated on.  Traditionally,
		 it was a number, but it may be any scalar type.

 OPTIONAL INPUT:
	LENGTH    This KEYWORD specifies the length of the returned string.  
		If the output would have been longer, it is truncated.  If 
		the output would have been shorter, it is padded to the right 
		length.
	PADTYPE   This KEYWORD specifies the type of padding to be used, if any.
		0=Padded at End, 1=Padded at front, 2=Centered (pad front/end)
		IF not specified, PADTYPE=1
	PADCHAR   This KEYWORD specifies the character to be used when padding.
		The default is a space (' ').
	FORMAT    This keyword allows the FORTRAN type formatting of the input
		number (e.g. '(f6.2)')

 OUTPUT:
	tmp       The formatted string

 USEFUL EXAMPLES:
	print,'Used ',strn(stars),' stars.'  ==> 'Used 22 stars.'
	print,'Attempted ',strn(ret,leng=6,padt=1,padch='0'),' retries.'
		==> 'Attempted 000043 retries.'
	print,strn('M81 Star List',length=80,padtype=2)
		==> an 80 character line with 'M81 Star List' centered.
	print,'Error: ',strn(err,format='(f15.2)')
		==> 'Error: 3.24'     or ==> 'Error: 323535.22'

 HISTORY:
	03-JUL-90 Version 1 written by Eric W. Deutsch
	10-JUL-90 Trimming and padding options added         (E. Deutsch)
	29-JUL-91 Changed to keywords and header spiffed up     (E. Deutsch)
	Ma7 92 Work correctly for byte values (W. Landsman)
	19-NOV-92 Added Patch to work around IDL 2.4.0 bug which caused an
	error when STRN('(123)') was encountered.            (E. Deutsch)
	Converted to IDL V5.0   W. Landsman   September 1997

  - SXADDPAR
	Adds or modifies a parameter in a FITS header array.

  - SXDELPAR
	Deletes keyword parameters from a FITS header.

  - SXPAR
	Obtains the value of a parameter in a FITS header.

  - WRITE_FITS
	Writes an an IDL array into a disk FITS file.




































CHECK_FITS
----------


 PURPOSE:
	Given a FITS array IM, and a associated FITS or STSDAS header HDR, this
	procedure will check that
		(1) HDR is a string array, and IM is defined and numeric   
		(2) The NAXISi values in HDR are appropiate to the dimensions 
                   of IM
		(3) The BITPIX value in HDR is appropiate to the datatype of IM


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	check_fits, im, hdr, [ dimen, idltype, /UPDATE, /NOTYPE, /SDAS ]


 ARGUMENTS:
  INPUT:
	im:	FITS or  STSDAS array, (e.g. as read by SXREAD or READFITS ).

	hdr:	FITS or  STSDAS header (string array) associated with im.

  OUTPUT:
	dimen:		Vector containing actual array dimensions

	idltype:	Data type of the FITS array as specified in the IDL SIZE
			function (1 for BYTE, 2 for INTEGER*2, 3 for INTEGER*4,
			etc.)


 KEYWORDS:
  INPUT:
	NOTYPE:	If this keyword is set, then only agreement of the array
		dimensions with the FITS header are checked, and not the 
		data type.

	UPDATE:	If this keyword is set then the BITPIX, NAXIS and DATATYPE
		FITS keywords will be updated to agree with the array.

	SDAS:	If this keyword is set then the header is assumed to be from
		an SDAS (.hhh) file.    CHECK_FITS will then ensure that (1)
		a DATATYPE keyword is included in the header and (2) BITPIX
		is always written with positive values.

	FITS:	If this keyword is present then CHECK_FITS assumes that it is
		dealing with a FITS header and not an SDAS header, see notes
		below.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	If there is a fatal problem with the FITS array or header then !ERR is
	set to -1.   ( If the UPDATE keyword was supplied, and the header could
	be fixed then !ERR = 0.)


 NOTES:
	An important distinction between an STSDAS header and a FITS header
	is that the BITPIX value in an STSDAS is always positive, e.g. BITPIX=32
	for REAL*4 data.    Users should use either the /SDAS or the /FITS 
	keyword if it is important whether the STSDAS or FITS convention for 
	REAL*4 data is used.  Otherwise, CHECK_FITS assumes that if a 
	DATATYPE keyword is present then it is dealing with an STSDAS header.


 PROCEDURE:
	Program checks the NAXIS1 and NAXIS2 parameters in the header to
	see if they match the image array dimensions.


 STATUS:
	Complete


 MODIFICATION HISTORY:
	Written, December 1991  W. Landsman Hughes/STX to replace CHKIMHD
	No error returned if NAXIS=0 and IM is a scalar   W. Landsman  Feb 93
	Fixed bug for REAL*8 STSDAS data W. Landsman July 93
	Make sure NAXIS agrees with NAXISi  W. Landsman  October 93
	











































CONV_UNIX_VAX
-------------


 PURPOSE:
	Converts Unix IDL data types to VAX IDL data types.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	conv_unix_vax, variable, [ SOURCE_ARCH = SOURCE_ARCH ]


 ARGUMENTS:
  INPUT:
	variable:	The data variable to be converted.  This may be a scalar
			or an array.  Valid datatypes are integer, longword,
			floating point, and double precision. The result of the 
			conversion is passed back in the original variable.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	SOURCE_ARCH:	name (string) of source architecture
			if using this function on a VAX, otherwise
			!VERSION.ARCH is used to determine the conversion.
			**If run on a VAX, the default is to assume the source
			to be a little-endian machine with IEEE floating point
			(e.g. MIPSEL or Alpha***).

  OUTPUT: NONE


 RETURN: NONE


 RESTRICTIONS:
	Currently assumes the Unix IDL data type is IEEE standard in either
	big-endian or little-endian format.


 EXAMPLE:
	Read a 100 by 100 matrix of floating point numbers from a data
	file created on a Sun.  Then convert the matrix values into
	VAX format.

	IDL> openr,1,'vax_float.dat
	IDL> data = fltarr(100,100)
	IDL> forrd,1,data
	IDL> CONV_UNIX_VAX,data,SOURCE_ARCH='sparc'


 STATUS:
	Complete


 SEE ALSO:
	conv_vax_unix, ieee_to_host, host_to_ieee


 MODIFICATION HISTORY:
	Version 1	By John Hoegy		13-Jun-88
	04-May-90 - WTT:  Created CONV_UNIX_VAX from VAX2SUN,
                         reversing floating point procedure.
       Modified  P. Keegstra             September 1994
           Implemented MIPSEL and ALPHA architecture,
           distinguishing VMS and OSF
       Modified  P. Keegstra             February 1995
           Added 386 PC based architectures
	

























































CONV_VAX_UNIX
-------------


 PURPOSE:
	Converts VAX IDL data types to UNIX IDL data types.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	var_unix = conv_vax_unix(var_vax, [TARGET_ARCH = TARGET_ARCH] )


 ARGUMENTS:
  INPUT:
	var_vax:	The data variable to be converted.  This may be a scalar
			or an array.  All IDL datatypes are valid (including
			structures).  The result of the conversion is returned
			by the function.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	TARGET_ARCH:	name (string) of target architecture
			if using this function on a VAX, otherwise
			!VERSION.ARCH is used to determine the conversion.

  OUTPUT: NONE


 RETURN:
	Converted data.


 RESTRICTIONS:
       The architecture "alpha" is ambiguous, since VMS alpha IDL
       uses VAX D-float while OSF/1 alpha IDL uses little-endian IEEE.
       The program uses !VERSION.OS to do the right thing when
       converting to a representation appropriate for the current
       platform.  To convert to a representation appropriate for
       an OSF/1 alpha on a VAX or VMS alpha, please specify
       the "mipsel" (or "i386") architecture.


 EXAMPLE:
	Read a 100 by 100 matrix of floating point numbers from a data
	file created on a VAX.  Then convert the matrix values into Sun format.

	IDL> openr,1,'vax_float.dat'
	IDL> data = fltarr(100,100)
	IDL> forrd,1,data
	IDL> data = conv_vax_unix( data )


 STATUS:
	Complete


 SEE ALSO:
	conv_unix_vax, ieee_to_host, host_to_ieee


 MODIFICATION HISTORY:
       Written   F. Varosi               August 1990
       Modified  P. Keegstra             April 1992
           Implemented MIPSEL architecture
       Modified  P. Keegstra             July 1994
           Implemented ALPHA architecture, distinguishing VMS and OSF
       Modified  P. Keegstra             February 1995
           Added 386 PC based architectures
       Modified  P. Keegstra             March 1995
           Added note, restored and fixed old specifiers 
           for 386 PC based architectures
	Modified W. Landsman for VAX problems in V4.0        August 1995
	Work for double complex variables                    August 1995
	



















































IEEE_TO_HOST
------------


 PURPOSE:
	Translates an IDL variable in IEEE-754 representation (as used, for
	example, in FITS data ), into the host machine architecture.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	ieee_to_host, data, [ IDLTYPE = IDLTYPE ]


 ARGUMENTS:
  INPUT:
	data:	Any IDL variable, scalar or vector.   It will be modified by
		IEEE_TO_HOST to convert from IEEE to host representation.  Byte 
		and string variables are returned by IEEE_TO_HOST unchanged.

  OUTPUT:
	data:	See above.


 KEYWORDS:
  INPUT:
	IDLTYPE:	Scalar integer (1-7) specifying the IDL datatype
			according to the code given by the SIZE function.   
			This keyword will usually be used when suppying a byte
			array that needs to be interpreted as another data type
			(e.g. FLOAT).

  OUTPUT: NONE


 RETURN: NONE


 RESTRICTIONS:
	Assumes the IDL version is since 2.2.2 when the /XDRTOF keyword 
	became available to BYTEORDER.    There were two bad implementations
	in BYTEORDER for double precision: (1) in IDL V3.* for DecStations
	(!VERSION.ARCH = 'mipsel') and (2) on Dec Alpha OSF machines.
	IEEE_TO_HOST works around these cases by swapping the byte order
	directly.


 PROCEDURE:
	The BYTEORDER procedure is called with the appropriate keywords


 EXAMPLE:
	A 2880 byte array (named FITARR) from a FITS record is to be 
	interpreted as floating and converted to the host representaton:

	IDL> IEEE_TO_HOST, fitarr, IDLTYPE = 4     


 STATUS:
	Complete


 SEE ALSO:
	host_to_ieee, conv_unix_vax, conv_vax_unix


 MODIFICATION HISTORY:
	Written, W. Landsman   Hughes/STX   May, 1992
	Fixed error Case statement for float and double   September 1992
	Workaround to /XDRTOD problem on DecStations January 1993 
	Assume since Version 2.2, correct double precision problems in 
	Alpha/OSF, implement Ultrix corrections from Tom McGlynn November 1994
	Added support for double precision complex   July 1995
	Workaround for BYTEORDER, /FTOXDR bug in VAX VMS V4.0  August 1995 
	






















































MKHDR
-----


 PURPOSE:
	Make a minimal primary FITS image header or a minimal FITS IMAGE
	extension header.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	mkhdr, header
	mkhdr, header, im, [ /IMAGE, /EXTEND ]
	mkhdr, header, type, naxisx, [/IMAGE, /EXTEND ]    	
	

 ARGUMENTS:
  INPUT:
	im:	If im is a vector or array then the header will be made
		appropiate to the size and type of im.  im does not have
		to be the actual data; it can be a dummy array of the same
		type and size as the data.    Set im = '' to create a dummy
		header with NAXIS = 0. 

	type:	If more than 2 parameters are supplied, then the second
		parameter is intepreted as an integer giving the IDL datatype
		e.g. 1 - LOGICAL*1, 2 - INTEGER*2, 4 - REAL*4, 3 - INTEGER*4.

	naxisx:	Vector giving the size of each dimension (naxis1, naxis2, 
		etc.).

  OUTPUT:
	header:	Image header, (string array) with required keywords
		BITPIX, NAXIS, NAXIS1, ... Further keywords can be added
		to the header with SXADDPAR.

 KEYWORDS:
  INPUT:
	image:	If set, then a minimal header for a FITS IMAGE extension
		is created.    An IMAGE extension header is identical to
		a primary FITS header except the first keyword is 
		'XTENSION' = 'IMAGE' instead of 'SIMPLE  ' = 'T'.

	extend:	If set, then the keyword EXTEND is inserted into the file,
		with the value of "T" (true).

  OUTPUT: NONE


 RETURN: NONE


 RESTRICTIONS:
	(1)  MKHDR should not be used to make an STSDAS header or a FITS
		ASCII or Binary Table header.   Instead use

		SXHMAKE - to create a minimal STSDAS header
		FXHMAKE - to create a minimal FITS binary table header
		FTCREATE - to create a minimal FITS ASCII table header

	(2)  Any data already in the header before calling MKHDR
		will be destroyed.


 EXAMPLE:
	Create a minimal FITS header, HDR, for a 30 x 40 x 50 INTEGER*2 array

	      IDL> MKHDR, HDR, 2, [30,40,50]

	Alternatively, if the array already exists as an IDL variable, ARRAY,

	       IDL> MKHDR, HDR, ARRAY


 STATUS:
	Complete


 SEE ALSO:
	sxaddpar, sxdelpar, sxpar


 MODIFICATION HISTORY:
    Written November, 1988               W. Landsman
    May, 1990, Adapted for IDL Version 2.0, J. Isensee
	











































READ_FITS
---------


 PURPOSE:
	Reads a FITS file into IDL data and optionally header variables.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	result = read_fits(filename, [ header ])


 ARGUMENTS:
  INPUT:
	filename:	String containing the name of the file to be read.

  OUTPUT:
	header:		String array containing the header from the FITS file.


 KEYWORDS:
  INPUT:
	NOSCALE:	If present and non-zero, then the ouput data will not be
			scaled using the optional BSCALE and BZERO keywords in
			the FITS header.   Default is to scale.

	SILENT:		Normally, READFITS will display the size the array at
			the terminal.  The SILENT keyword will suppress this

	NaNVALUE:	This scalar is only needed on Vax architectures.   It 
			specifying the value to translate any IEEE "not a
			number" values in the FITS data array.   It is needed
			because the Vax does not recognize the "not a number"
			convention.

	EXTEN_NO:	Scalar integer specify the FITS extension to read.  For
			example, specify EXTEN = 1 or /EXTEN to read the first 
			FITS extension.    Extensions are read using recursive
			calls to READFITS.

	POINT_LUN:	Position (in bytes) in the FITS file at which to start
			reading.   Useful if READFITS is called by another
			procedure which needs to directly read a FITS extension.
			Should always be a multiple of 2880.

	STARTROW:	This keyword only applies when reading a FITS extension
			It specifies the row (scalar integer) of the extension
			table at which to begin reading. Useful when one does
			not want to read the entire table.

	NUMROW:		This keyword only applies when reading a FITS extension. 
			If specifies the number of rows (scalar integer) of the 
			extension table to read.   Useful when one does not want
			to read the entire table.

  OUTPUT: NONE


 RETURN:
	FITS data array constructed from designated record.


 RESTRICTIONS:
     (1)	Cannot handle random group FITS
     (2)       User's with versions of IDL before 2.2.1 should remove the
               call to the TEMPORARY function near the end of the program


 EXAMPLE:
	Read a FITS file TEST.FITS into an IDL image array, IM and FITS 
       header array, H.   Do not scale the data with BSCALE and BZERO.

              IDL> im = READFITS( 'TEST.FITS', h, /NOSCALE)

       If the file contain a FITS extension, it could be read with

              IDL> tab = READFITS( 'TEST.FITS', htab, /EXTEN )

       To read only rows 100-149 of the FITS extension,

              IDL> tab = READFITS( 'TEST.FITS', htab, /EXTEN, 
                                    STARTR=100, NUMR = 50 )


 STATUS:
	Complete


 SEE ALSO:
	write_fits


 MODIFICATION HISTORY:
       MODIFIED, Wayne Landsman  October, 1991
                Reset BSCALE and BZERO after using them
       Added call to TEMPORARY function to speed processing     Feb-92
       Added a check for fixed record length file  under VMS    Jun-92
       Added STARTROW and NUMROW keywords for FITS tables       Jul-92
	Spitale; Jan 1998 - added xdr conversions, changed name
	                    from 'readfits' to 'read_fits'
	



























STRN
----
 PURPOSE:
	Convert a number to a string and remove padded blanks.
 EXPLANATION:
	The main and original purpose of this procedure is to convert a number
	to an unpadded string (i.e. with no blanks around it.)  However, it 
	has been expanded to be a multi-purpose formatting tool.  You may 
	specify a length for the output string; the returned string is either 
	set to that length or padded to be that length.  You may specify 
	characters to be used in padding and which side to be padded.  Finally,
	you may also specify a format for the number.  NOTE that the input 
	"number" need not be a number; it may be a string, or anything.  It is
	converted to string.

 CALLING SEQEUNCE:
	tmp = STRN( number, [ LENGTH=, PADTYPE=, PADCHAR=, FORMAT = ] )

 INPUT:
	NUMBER    This is the input variable to be operated on.  Traditionally,
		 it was a number, but it may be any scalar type.

 OPTIONAL INPUT:
	LENGTH    This KEYWORD specifies the length of the returned string.  
		If the output would have been longer, it is truncated.  If 
		the output would have been shorter, it is padded to the right 
		length.
	PADTYPE   This KEYWORD specifies the type of padding to be used, if any.
		0=Padded at End, 1=Padded at front, 2=Centered (pad front/end)
		IF not specified, PADTYPE=1
	PADCHAR   This KEYWORD specifies the character to be used when padding.
		The default is a space (' ').
	FORMAT    This keyword allows the FORTRAN type formatting of the input
		number (e.g. '(f6.2)')

 OUTPUT:
	tmp       The formatted string

 USEFUL EXAMPLES:
	print,'Used ',strn(stars),' stars.'  ==> 'Used 22 stars.'
	print,'Attempted ',strn(ret,leng=6,padt=1,padch='0'),' retries.'
		==> 'Attempted 000043 retries.'
	print,strn('M81 Star List',length=80,padtype=2)
		==> an 80 character line with 'M81 Star List' centered.
	print,'Error: ',strn(err,format='(f15.2)')
		==> 'Error: 3.24'     or ==> 'Error: 323535.22'

 HISTORY:
	03-JUL-90 Version 1 written by Eric W. Deutsch
	10-JUL-90 Trimming and padding options added         (E. Deutsch)
	29-JUL-91 Changed to keywords and header spiffed up     (E. Deutsch)
	Ma7 92 Work correctly for byte values (W. Landsman)
	19-NOV-92 Added Patch to work around IDL 2.4.0 bug which caused an
	error when STRN('(123)') was encountered.            (E. Deutsch)
	Converted to IDL V5.0   W. Landsman   September 1997











SXADDPAR
--------


 PURPOSE:
	Adds or modifies a parameter in a FITS header array.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	sxaddpar, header, name, value [, comment, location]


 ARGUMENTS:
  INPUT:
	header:		String array containing FITS header. Max string length
			must be equal to 80.  If not defined, then SXADDPAR will
			create an empty FITS header array.

	name:		Name of parameter. If Name is already in the header the
			value and possibly comment fields are modified. Otherwise
			a new record is added to the header.  If name = 'HISTORY'
			then the value will be added to the record without
			replacement.  In this case the comment parameter is
			ignored.

	value:		Value for parameter.  The value expression must be of the
			correct type, e.g. integer, floating or string.  String
			values of 'T' or 'F' are considered logical values.

	comment:	String field.  The '/' is added by this routine.  Added 
			starting in position 31.    If not supplied, or set equal
			to '', then the previous comment field is retained (when
			found).

	location:	Keyword string name.  The parameter will be placed before
			the location of this keyword.    This parameter is
			identical to the BEFORE keyword and is kept only for
			consistency with earlier versions of SXADDPAR.

  OUTPUT:
	header:		Modified header.


 KEYWORDS:
  INPUT:
	before:	Keyword string name.  The parameter will be placed before the
		location of this keyword.  For example, if BEFORE='HISTORY'
		then the parameter will be placed before the first history
		location.  This applies only when adding a new keyword;
		keywords already in the header are kept in the same position.

	after:	Same as BEFORE, but the parameter will be placed after the
		location of this keyword.  This keyword takes precedence over
		BEFORE.

	format:	Specifies FORTRAN-like format for parameter, e.g. "F7.3".  A
		scalar string should be used.  For complex numbers the format
		should be defined so that it can be applied separately to the
		real and imaginary parts.

  OUTPUT: NONE


 RETURN: NONE


 RESTRICTIONS:
	Parameters and names are not checked against valid FITS parameter names,
	values and types.


 STATUS:
	Complete


 SEE ALSO:
	sxpar, sxdelpar


 MODIFICATION HISTORY:
	DMS, RSI, July, 1983.
	D. Lindler Oct. 86  Added longer string value capability
	Converted to NEWIDL  D. Lindler April 90
       Added Format keyword, J. Isensee, July, 1990
       Added keywords BEFORE and AFTER. K. Venkatakrishna, May '92
	










































SXDELPAR
--------


 PURPOSE:
	Deletes keyword parameters from a FITS header.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	sxdelpar, h, parname


 ARGUMENTS:
  INPUT:
	h:		FITS header, string array.

	parname:	String or string array of keyword name(s) to delete.

  OUTPUT:
	h:		Modified header.


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 NOTES:
   (1)  Nothing happens if the keyword to be deleted is not found (no message)
   (2)  All appearances of a keyword in the header will be deleted


 STATUS:
	Complete


 SEE ALSO:
	sxpar, sxaddpar


 MODIFICATION HISTORY:
	version 1  D. Lindler Feb. 1987
	Converted to new IDL  April 1990 by D. Lindler
	














SXPAR
-----


 PURPOSE:
	Obtains the value of a parameter in a FITS header.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	result = sxpar(hdr, name [, abort])


 ARGUMENTS:
  INPUT:
	hdr:	FITS header array, (e.g. as returned by SXOPEN or READFITS)  
		string array, each element should have a length of 80
		characters.

	name:	String name of the parameter to return.   If Name is of 
		the form 'keyword*' then an array is returned containing 
		values of keywordN where N is an integer.  The value
		of keywordN will be placed in RESULT(N-1).  The data type 
		of RESULT will be the type of the first valid match of keywordN 
		found.

	abort:	String specifying that SXPAR should do a RETALL
		if a parameter is not found.  ABORT should contain
		a string to be printed if the keyword parameter is not found.
		If not supplied SXPAR will return with a negative
		!err if a keyword is not found.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	count:	Returns a value equal to the number of parameters found by sxpar.


 RETURN:
	Value of parameter in header.  If parameter is double precision,
	floating, long or string, the result is of that type.  Apostrophes are
	stripped from strings.  If the parameter is logical, 1 is returned for T,
	and 0 is returned for F.  If Name was of form 'keyword*' then a vector of
	values are returned.


 COMMON BLOCKS:
	xx:	xx

	xx:	xx


 SIDE EFFECTS:
       Keyword COUNT returns the number of parameters found.
	!err is set to -1 if parameter not found, 0 for a scalar
	value returned.  If a vector is returned it is set to the
	number of keyword matches found.

       If a keyword occurs more than once in a header, a warning is given,
       and the first occurence is used.


 RESTRICTIONS:
	xx


 PROCEDURE:
	The first 8 chacters of each element of Hdr are searched for a 
       match to Name.  The value from the last 20 characters is returned.  
       An error occurs if there is no parameter with the given name.
       
       If a numeric value has no decimal point it is returned as type
       LONG.   If it contains more than 8 numerals, or contains the 
       character 'D', then it is returned as type DOUBLE.  Otherwise
       it is returned as type FLOAT


 EXAMPLE:
        Given a FITS header, h, return the values of all the NAXISi values
        into a vector.    Then place the history records into a string vector.

         IDL> naxisi = sxpar( h ,'NAXIS*')         ; Extract NAXISi value
         IDL> history = sxpar( h, 'HISTORY' )      ; Extract HISTORY records


 STATUS:
	Complete


 SEE ALSO:
	sxaddpar, sxdelpar


 MODIFICATION HISTORY:
	DMS, May, 1983, Written.
   D. Lindler Jan 90 added ABORT input parameter
   J. Isensee Jul,90 added COUNT keyword
   W. Thompson, Feb. 1992, added support for FITS complex values.
   W. Thompson, May 1992, corrected problem with HISTORY/COMMENT/blank
			   keywords, and complex value error correction.
	
























WRITE_FITS
----------


 PURPOSE:
	Writes an an IDL array into a disk FITS file.


 CATEGORY:
	UTIL/FITS


 CALLING SEQUENCE:
	writefits, filename, data [,header]


 ARGUMENTS:
  INPUT:
	filename:	String containing the name of the file to be written.

	data:		Image array to be written to FITS file.

	header:		String array containing the header for the FITS file.
			If variable HEADER is not given, the program will
			generate a minimal FITS header.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	NaNvalue:	Value in the data array to be set to the IEEE NaN
			condition.  This is the FITS representation of undefined
 			values.

	silent:		If set, suppress superfluous printed output.

  OUTPUT: NONE


 RETURN: NONE


 RESTRICTIONS:
       (1) It recommended that BSCALE and BZERO not be used (or set equal
           to 1. and 0) with REAL*4 or REAL*8 data.
       (2) WRITEFITS will remove any group parameters from the FITS header.
	(3) Does not handle groups or extensions.


 EXAMPLE:
       Write a randomn 50 x 50 array as a FITS file creating a minimal header.

       IDL> im = randomn(seed, 50, 50)        ;Create array
       IDL> writefits, 'test', im             ;Write to a FITS file "test"


 STATUS:
	Complete


 SEE ALSO:
	read_fits


 MODIFICATION HISTORY:
	WRITTEN, Jim Wofford, January, 29 1989
       MODIFIED, Wayne Landsman, added BITPIX = -32,-64 support for UNIX
       Fixed Unix bug when writing FITS header, 13-Feb-92
       Use new BYTEODER keywords 22-Feb-92
	J.Spitale Jan 1998; changed name from 'writefits' to 'write_fits'
	Spitale, 3/2002 -- add silent keyword
	



























































