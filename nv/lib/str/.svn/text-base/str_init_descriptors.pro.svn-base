;=============================================================================
;+
; NAME:
;       str_init_descriptors
;
;
; PURPOSE:
;       Initializes the star descriptor by setting the class field to 'STAR',
;       initializes the luminosity (lum) and spectral type (sp) fields
;       and initializing the GLOBE superclass using glb_init_descriptor().
;
;
; CATEGORY:
;       NV/LIB/STR
;
;
; CALLING SEQUENCE:
;       result = str_init_descriptors(n)
;
;
; ARGUMENTS:
;  INPUT:
;       n:      Number of star descriptors.
;
;    time:      (optional) Array of time (n)
;
;    name:      (optional) Array of names (n)
;
;  orient:      (optional) Array of orientation maticies (n)
;
;    avel:      (optional) Array of acceleration vectors (n)
;
;     pos:      (optional) Array of position vectors (n)
;
;     vel:      (optional) Array of velocity vectors (n)
;
;   radii:      (optional) Array of tri-axial radii (n)
;
;    lora:      (optional) Array of lora (n)
;
;     lum:      (optional) Array of luminosities (n)
;
;      sp:      (optional) Array of spectral types (n)
;
;  OUTPUT:
;       NONE
;
;
; KEYWORDS:
;         NONE
;
; RETURN:
;       An array (n) of star descriptors.
;
; STATUS:
;       Completed.
;
;
; MODIFICATION HISTORY:
;       Written by:     Haemmerle, 5/1998
;
;-
;=============================================================================
function str_init_descriptors, n, crd=crd, bd=bd, gbd=gbd, sd=sd, $
@str__keywords.include
end_keywords
@nv_lib.include


 if(NOT keyword_set(sd)) then sd=replicate({star_descriptor}, n)
 sd.class=decrapify(make_array(n, val='STAR'))

 if(keyword_set(gbd)) then sd.gbd = gbd $
 else sd.gbd=glb_init_descriptors(n, crd=crd, bd=bd,  $
@glb__keywords.include
end_keywords)

 if(keyword_set(lum)) then sd.lum=decrapify(lum)
 if(keyword_set(sp)) then sd.sp=decrapify(sp)


 sdp = ptrarr(n)
 nv_rereference, sdp, sd

 return, sdp
end
;===========================================================================



