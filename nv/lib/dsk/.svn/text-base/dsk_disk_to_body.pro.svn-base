;===========================================================================
; dsk_disk_to_body
;
; v is array (nv,3,nt) of 3-element column vectors. result is array 
; (nv,3,nt) of 3-element column vectors.
;
;===========================================================================
function dsk_disk_to_body, dkxp, v, frame_bd=frame_bd
@nv_lib.include
 dkdp = class_extract(dkxp, 'DISK')
 _ref = orb_get_ascending_node(dkdp, frame_bd)

 sv = size(v)
 nv = sv[1]
 nt = n_elements(dkdp)

 rad = v[*,0,*]
 dlon = v[*,1,*]

 bd = class_extract(dkdp, 'BODY')

 ref_inertial = _ref[linegen3x(nv,3,nt)]			; nv x 3 x nt

 ;------------------------------------------------------------------------
 ; subtract lon. of ascending node before rotating
 ;------------------------------------------------------------------------
 lan = make_array(nv,val=1d)#dsk_get_lan(dkdp, frame_bd)
 dlon = dlon - lan

 ;------------------------------------------
 ; rotate reference vector along disk plane
 ;------------------------------------------
 ref = bod_inertial_to_body(bd, ref_inertial)
 zz = (tr([0,0,1])##make_array(nv,val=1d))[linegen3z(nv,3,nt)]				; nv x 3 x nt
 pp = v_rotate_11(ref, zz, sin(dlon), cos(dlon))

 ;------------------------------------------
 ; apply radius
 ;------------------------------------------
 rrad = rad[linegen3y(nv,3,nt)]
 vv = pp*rrad

 ;------------------------------------------
 ; package result
 ;------------------------------------------
 result = dblarr(nv,3,nt, /nozero)
 result[*,0,*] = vv[*,0,*]
 result[*,1,*] = vv[*,1,*]
 result[*,2,*] = v[*,2,*]

 ;------------------------------------------
 ; apply radial scale
 ;------------------------------------------
 result[*,0,*] = dsk_apply_scale(dkdp, result[*,0,*], /inverse)

 return, result
end
;===========================================================================



;===========================================================================
; dsk_disk_to_body
;
; v is array (nv,3,nt) of 3-element column vectors. result is array 
; (nv,3,nt) of 3-element column vectors.
;
;===========================================================================
function _dsk_disk_to_body, dkxp, v, frame_bd=frame_bd
@nv_lib.include
 dkdp = class_extract(dkxp, 'DISK')
 node = dsk_get_node(dkdp, frame_bd)
 return, disk_to_body(dkdp, v, node)
end
;===========================================================================



