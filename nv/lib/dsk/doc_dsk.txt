									12/05/15
DSK Program Reference
=====================

 Summary
 -------
  - DISK_DESCRIPTOR__DEFINE
	Class structure for the DISK class.

  - DSK_APPLY_SCALE
	Computes scaled radii.

  - DSK_BODY
	Returns the body descriptor for each given disk descriptor.

  - DSK_BODY_TO_DISK
	Transforms vectors from the body coordinate system to the disk
	coordinate system.

  - DSK_CLONE_DESCRIPTOR
	Allocates a new disk descriptor as a copy of an existing descriptor.

  - DSK_COPY_DESCRIPTOR
	Copies all fields from one disk descriptor into another.

  - DSK_DISK_TO_BODY
	Transforms vectors from the disk coordinate system to the body
	coordinate system.

  - DSK_DLANLDT
	Returns dlanldt for each given disk descriptor.

  - DSK_DLIBLDT
	Returns dlibldt for each given disk descriptor.

  - DSK_DLIBMDT
	Returns dlibmdt for each given disk descriptor.

  - DSK_DLPMDT
	Returns dlpmdt for each given disk descriptor.

  - DSK_ECC
	Returns ecc for each given disk descriptor.

  - DSK_EM
	Returns em for each given disk descriptor.

  - DSK_EVOLVE
	Computes new disk descriptors at the given time offsets from the 
	given disk descriptors using the taylor series expansion 
	corresponding to the derivatives contained in the given disk 
	descriptor.

  - DSK_GET_AP
	Determines ap for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_DAPDT
	Determines dapdt for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_DISK_POINTS
	Computes points on the inner and outer edges of a disk. 

  - DSK_GET_DLANDT
	Determines dlandt for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_DLIBDT_AP
	Determines dlibdt_ap for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_DLIBDT_LAN
	Determines dlibdt_lan for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_EDGE_ELEVATION
	Computes elevations along the edge of a disk.

  - DSK_GET_EDGE_RADIUS
	Computes radii along the edge of a disk.

  - DSK_GET_INC
	Determines inc for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_INNER_DISK_POINTS
	Computes points on the inner edge of a disk. 

  - DSK_GET_LAN
	Determines lan for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_LIBA_AP
	Determines liba_ap for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_LIBA_LAN
	Determines liba_lan for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_LIB_AP
	Determines lib_ap for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_LIB_LAN
	Determines lib_lan for each given disk descriptor, based on the
	orientation of its BODY axes.

  - DSK_GET_NL
	Obtains the nl (number of vertical harmonics) value from the enironment.

  - DSK_GET_NM
	Obtains the nm (number of radial harmonics) value from the enironment.

  - DSK_GET_NODE
	Computes the ascending node of the given disk wrt the given frame
	body descriptor.

  - DSK_GET_OUTER_DISK_POINTS
	Computes points on the outer edge of a disk. 

  - DSK_GET_RADIUS
	Computes radii along the iner and outer edges of a disk.

  - DSK_GET_RANGES
	Returns ranges of valid coordinates for the given DISK object.

  - DSK_HIDE_POINTS
	Hides points wrt a DISK object.

  - DSK_IL
	Returns il for each given disk descriptor.

  - DSK_INIT_DESCRIPTORS
	Init method for the DISK class.

  - DSK_INTERSECT
	Computes ray intersections with a DISK object. 

  - DSK_INTERSECT_INERTIAL
	Computes ray intersections with a DISK object, in inertial coordinates.

  - DSK_L
	Returns l for each given disk descriptor.

  - DSK_LANL
	Returns lanl for each given disk descriptor.

  - DSK_LIBAL
	Returns libal for each given disk descriptor.

  - DSK_LIBAM
	Returns libam for each given disk descriptor.

  - DSK_LIBL
	Returns libl for each given disk descriptor.

  - DSK_LIBM
	Returns libm for each given disk descriptor.

  - DSK_LPM
	Returns lpm for each given disk descriptor.

  - DSK_M
	Returns m for each given disk descriptor.

  - DSK_NL
	Returns nl for each given disk descriptor.

  - DSK_NM
	Returns nm for each given disk descriptor.

  - DSK_REFLECT
	Computes ray reflections with a DISK object. 

  - DSK_REPLICATE
	Replicates the given descriptor, producing an array of the given
	dimensions containing cloned versions of the input descriptor.

  - DSK_RM_POINTS
	Removes points infront of or behind a DISK object.

  - DSK_SCALE
	Returns scale for each given disk descriptor.

  - DSK_SET_AP
	Replaces ap in each given disk descriptor.

  - DSK_SET_BODY
	Replaces the body descriptor in each given disk descriptor.

  - DSK_SET_DAPDT
	Replaces the dapdt in each given disk descriptor.

  - DSK_SET_DLANDT
	Replaces dlandt in each given disk descriptor.

  - DSK_SET_DLANLDT
	Replaces dlanldt in each given disk descriptor.

  - DSK_SET_DLIBDT_AP
	Sets dlibdt_ap in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_DLIBDT_LAN
	Sets dlibdt_lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_DLIBLDT
	Replaces dlibldt in each given disk descriptor.

  - DSK_SET_DLIBMDT
	Replaces dlibmdt in each given disk descriptor.

  - DSK_SET_DLPMDT
	Replaces dlpmdt in each given disk descriptor.

  - DSK_SET_ECC
	Replaces ecc in each given disk descriptor.

  - DSK_SET_EM
	Replaces em in each given disk descriptor.

  - DSK_SET_IL
	Replaces il in each given disk descriptor.

  - DSK_SET_INC
	Sets inc in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_L
	Replaces l in each given disk descriptor.

  - DSK_SET_LAN
	Sets lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_LANL
	Replaces lanl in each given disk descriptor.

  - DSK_SET_LIBAL
	Replaces libal in each given disk descriptor.

  - DSK_SET_LIBAM
	Replaces libam in each given disk descriptor.

  - DSK_SET_LIBA_AP
	Sets liba_ap in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_LIBA_LAN
	Sets liba_lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_LIBL
	Replaces libl in each given disk descriptor.

  - DSK_SET_LIBM
	Replaces libm in each given disk descriptor.

  - DSK_SET_LIB_AP
	Sets lib_ap in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_LIB_LAN
	Sets lib_lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.

  - DSK_SET_LPM
	Replaces lpm in each given disk descriptor.

  - DSK_SET_M
	Replaces m in each given disk descriptor.

  - DSK_SET_NL
	Replaces nl in each given disk descriptor.

  - DSK_SET_NM
	Replaces nm in each given disk descriptor.

  - DSK_SET_SCALE
	Replaces the scale in each given disk descriptor.

  - DSK_SET_SMA
	Replaces the sma in each given disk descriptor.

  - DSK_SHAPE_RADIAL
	Computes radii along the edge of a disk using disk elements.

  - DSK_SHAPE_VERTICAL
	Computes elevations along the edge of a disk using disk elements.

  - DSK_SMA
	Returns sma for each given disk descriptor.

  - DSK_VALID_EDGES
	Determines which edges (i.e., inner/outer) in the input DISK objects 
	are valid.































DISK_DESCRIPTOR__DEFINE
-----------------------


 PURPOSE:
	Class structure for the DISK class.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	bd:	BODY class descriptor.  

		Methods: cam_body, cam_set_body


	sma:	Array ndv+1 x 2 giving the semimajor axes and derivatives
		for each edge. 

		Methods: dsk_sma, dsk_set_sma


	ecc:	Array ndv+1 x 2 giving the eccentricities and derivatives
		for each edge.

		Methods: dsk_ecc, dsk_set_ecc


	scale:	2-elements array giving optional radial scale coefficients:

			 scaled_radii = scale[0] * radii*scale[1]

		Methods: dsk_scale, dsk_set_scale, dsk_apply_scale


	nm:	Integer giving the number of radial harmonics in the ring
		shape.

		Methods: dsk_nm, dsk_set_nm, dsk_get_nm


	m:	Array nm x 2 giving the m value for each harmonic, for
		each edge.

		Methods: dsk_m, dsk_set_m, dsk_get_nm


	em:	Array nm x 2 giving the eccentricity for each harmonic, for
		each edge.

		Methods: dsk_em, dsk_set_em


	lpm:	Array nm x 2 giving the longitude of periapse for each 
		harmonic, for each edge.

		Methods: dsk_lpm, dsk_set_lpm


	dlpmdt:	Array nm x 2 giving the apsidal precession rate for each 
		harmonic, for each edge.

		Methods: dsk_dlpmdt, dsk_set_dlpmdt


	libam:	Array nm x 2 giving the libration amplitude for each 
		harmonic, for each edge.

		Methods: dsk_libam, dsk_set_libam


	libm:	Array nm x 2 giving the libration phase for each 
		harmonic, for each edge.

		Methods: dsk_libm, dsk_set_libm


	dlibmdt:	Array nm x 2 giving the libration frequency for each 
			harmonic, for each edge.

			Methods: dsk_dlibmdt, dsk_set_dlibmdt


	nl:	Integer giving the number of radial harmonics in the ring
		shape.

		Methods: dsk_nm, dsk_set_nm, dsk_get_nm


	l:	Array nl x 2 giving the l value for each harmonic, for
		each edge.

		Methods: dsk_m, dsk_set_m, dsk_get_nm


	il:	Array nl x 2 giving the inclination for each harmonic, for
		each edge.

		Methods: dsk_em, dsk_set_em


	lanl:	Array nl x 2 giving the longitude of periapse for each 
		harmonic, for each edge.

		Methods: dsk_lpm, dsk_set_lpm


	dlanldt:	Array nl x 2 giving the nodal precession rate for each 
			harmonic, for each edge.

			Methods: dsk_dlpmdt, dsk_set_dlpmdt


	libal:	Array nl x 2 giving the libration amplitude for each 
		harmonic, for each edge.

		Methods: dsk_libam, dsk_set_libam


	libl:	Array nl x 2 giving the libration phase for each 
		harmonic, for each edge.

		Methods: dsk_libm, dsk_set_libm


	dlibldt:	Array nl x 2 giving the libration frequency for each 
			harmonic, for each edge.

			Methods: dsk_dlibmdt, dsk_set_dlibmdt




 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















































DSK_APPLY_SCALE
---------------


 PURPOSE:
	Computes scaled radii.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	scaled_radii = dsk_apply_scale(dkx, radii)


 ARGUMENTS:
  INPUT:
	dkx:	 A single disk descriptors.

	radii:	 Array of radii to convert.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	inverse:	If set, the operation is performed in reverse.

  OUTPUT: NONE


 RETURN:
	Scaled radii based onthe scale parameters in the disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























DSK_BODY
--------


 PURPOSE:
	Returns the body descriptor for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	body = dsk_body(dkx)


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	Array body descriptors associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_BODY_TO_DISK
----------------


 PURPOSE:
	Transforms vectors from the body coordinate system to the disk
	coordinate system.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	v_disk = dsk_body_to_disk(dkx, v_body, frame_bd=frame_bd)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	v_body:	 Array (nv x 3 x nt) of column vectors in the body 
		 coordinate system.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: NONE


 RETURN:
	Array (nv x 3 x nt) of column vectors in the disk coordinate system.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























DSK_CLONE_DESCRIPTOR
--------------------


 PURPOSE:
	Allocates a new disk descriptor as a copy of an existing descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	new_dkd = dsk_clone_descriptor(dkd)


 ARGUMENTS:
  INPUT:
	dkd:	 Descriptor of class DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Newly created disk descriptor with all fields identical to the input
	descriptor.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	





























DSK_COPY_DESCRIPTOR
-------------------


 PURPOSE:
	Copies all fields from one disk descriptor into another.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_copy_descriptor, dkd_dst, dkd_src


 ARGUMENTS:
  INPUT:
	dkd_dst:	 Descriptor of class DISK to copy to.

	dkd_src:	 Descriptor of class DISK to copy from.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN: NONE


 MODIFICATION HISTORY:
 	Written by:	Spitale
	





























DSK_DISK_TO_BODY
----------------


 PURPOSE:
	Transforms vectors from the disk coordinate system to the body
	coordinate system.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	v_body = dsk_disk_to_body(dkx, v_dsk, frame_bd=frame_bd)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	v_disk:	 Array (nv x 3 x nt) of column vectors in the disk
		 coordinate system.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: NONE


 RETURN:
	Array (nv x 3 x nt) of column vectors in the body coordinate system.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























DSK_DLANLDT
-----------


 PURPOSE:
	Returns dlanldt for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlanldt = dsk_dlanldt(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlanldt value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_DLIBLDT
-----------


 PURPOSE:
	Returns dlibldt for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlibldt = dsk_dlibldt(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlibldt value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_DLIBMDT
-----------


 PURPOSE:
	Returns dlibmdt for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlibmdt = dsk_dlibmdt(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlibmdt value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_DLPMDT
----------


 PURPOSE:
	Returns dlpmdt for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlpmdt = dsk_dlpmdt(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlpmdt value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_ECC
-------


 PURPOSE:
	Returns ecc for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	ecc = dsk_ecc(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	ecc value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_EM
------


 PURPOSE:
	Returns em for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	em = dsk_em(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	em value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_EVOLVE
----------


 PURPOSE:
	Computes new disk descriptors at the given time offsets from the 
	given disk descriptors using the taylor series expansion 
	corresponding to the derivatives contained in the given disk 
	descriptor.


 CATEGORY:
	NV/LIB/BOD


 CALLING SEQUENCE:
	dkdt = dsk_evolve(dkx, dt)


 ARGUMENTS:
  INPUT: 
	dkx:	 Any subclass of DISK.

	dt:	 Time offset.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	nodv:	 If set, derivatives will not be evolved.


  OUTPUT: NONE


 RETURN:
	Array (ndkd,ndt) of newly allocated descriptors, of class DISK,
	evolved by time dt, where ndkd is the number of dkx, and ndt
	is the number of dt.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

















DSK_GET_AP
----------


 PURPOSE:
	Determines ap for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	ap = dsk_ap(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	ap value associated with each given disk descriptor.  One for each dkx.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_DAPDT
-------------


 PURPOSE:
	Determines dapdt for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dapdt = dsk_dapdt(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dapdt value associated with each given disk descriptor.  One for each dkx.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_DISK_POINTS
-------------------


 PURPOSE:
	Computes points on the inner and outer edges of a disk. 


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	disk_pts = dsk_get_disk_points(dkx, np)


 ARGUMENTS:
  INPUT:
	dkx:	 Any single subclass of DISK.

	np:	 Number of points on each edge.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

	dlon:		Azimuthal spacing for the points, instead of specifying
			the np argument.

  OUTPUT: NONE


 RETURN:
	Array (np x 3 x 2) of points on the inner and outer edges of the 
	disk, in disk body coordinates.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

















DSK_GET_DLANDT
--------------


 PURPOSE:
	Determines dlandt for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlandt = dsk_dlandt(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlandt value associated with each given disk descriptor.  One for each dkx.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_DLIBDT_AP
-----------------


 PURPOSE:
	Determines dlibdt_ap for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlibdt_ap = dsk_dlibdt_ap(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlibdt_ap value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_DLIBDT_LAN
------------------


 PURPOSE:
	Determines dlibdt_lan for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dlibdt_lan = dsk_dlibdt_lan(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	dlibdt_lan value associated with each given disk descriptor.  One for each dkx.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_EDGE_ELEVATION
----------------------


 PURPOSE:
	Computes elevations along the edge of a disk.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	z = dsk_get_edge_elevation(dkx, lon, frame_bd)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	lon:	 Array (nlon) of longitudes at which to compute elevations.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	inner:	If set, the inner edge is used.

	outer:	If set, the outer edge is used.

  OUTPUT: NONE


 RETURN:
	Array (nt x nlon) of elevations computed at each longitude on each 
	disk.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
















DSK_GET_EDGE_RADIUS
-------------------


 PURPOSE:
	Computes radii along the edge of a disk.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	r = dsk_get_edge_radius(dkx, lon, frame_bd)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	lon:	 Array (nlon) of longitudes at which to compute radii.

	time:	 Array (nlon) of epochs to use instead of that of dkxp.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	inner:	If set, the inner edge is used.

	outer:	If set, the outer edge is used.

  OUTPUT: NONE


 RETURN:
	Array (nt x nlon) of radii computed at each longitude on each 
	disk.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	














DSK_GET_INC
-----------


 PURPOSE:
	Determines inc for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	inc = dsk_inc(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	inc value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_INNER_DISK_POINTS
-------------------------


 PURPOSE:
	Computes points on the inner edge of a disk. 


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	disk_pts = dsk_get_inner_disk_points(dkx, np)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	np:	 Number of points on the edge.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

	dlon:		Azimuthal spacing for the points, instead of specifying
			the np argument.

  OUTPUT: NONE


 RETURN:
	Array (np x 3 x nt) of points on the outer edge of each disk,
	in disk body coordinates.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

















DSK_GET_LAN
-----------


 PURPOSE:
	Determines lan for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	lan = dsk_lan(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	lan value associated with each given disk descriptor.  One for each dkx.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_LIBA_AP
---------------


 PURPOSE:
	Determines liba_ap for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	liba_ap = dsk_liba_ap(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	liba_ap value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_LIBA_LAN
----------------


 PURPOSE:
	Determines liba_lan for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	liba_lan = dsk_liba_lan(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	liba_lan value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_LIB_AP
--------------


 PURPOSE:
	Determines lib_ap for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	lib_ap = dsk_lib_ap(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	lib_ap value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_LIB_LAN
---------------


 PURPOSE:
	Determines lib_lan for each given disk descriptor, based on the
	orientation of its BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	lib_lan = dsk_lib_lan(dkx, frame_bd)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	lib_lan value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





















DSK_GET_NL
----------


 PURPOSE:
	Obtains the nl (number of vertical harmonics) value from the enironment.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	nm = dsk_get_nm()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Value for nl obtained from the DSK_NL environmet variable.  Default
	is 4.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























DSK_GET_NM
----------


 PURPOSE:
	Obtains the nm (number of radial harmonics) value from the enironment.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	nm = dsk_get_nm()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Value for nm obtained from the DSK_NM environmet variable.  Default
	is 4.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























DSK_GET_NODE
------------


 PURPOSE:
	Computes the ascending node of the given disk wrt the given frame
	body descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	node = dsk_get_node(dkx, frame_bd)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	One unit vector for each input descriptor pointng along the
	ascending node of each given disk on each given frame
	body descriptor.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























DSK_GET_OUTER_DISK_POINTS
-------------------------


 PURPOSE:
	Computes points on the outer edge of a disk. 


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	disk_pts = dsk_get_outer_disk_points(dkx, np)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	np:	 Number of points on the edge.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

	dlon:		Azimuthal spacing for the points, instead of specifying
			the np argument.

  OUTPUT: NONE


 RETURN:
	Array (np x 3 x nt) of points on the outer edge of each disk,
	in disk body coordinates.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

















DSK_GET_RADIUS
--------------


 PURPOSE:
	Computes radii along the iner and outer edges of a disk.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	r = dsk_get_radius(dkx, lon, frame_bd)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	lon:	 Array (nlon) of longitudes at which to compute radii.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	Array (nlon x 2 x nt) of radii computed at each longitude on each 
	disk.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	



















DSK_GET_RANGES
--------------


 PURPOSE:
	Returns ranges of valid coordinates for the given DISK object.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	ranges = dsk_get_ranges(dkx)


 ARGUMENTS:
  INPUT:
	dkx:	 Any subclass of DISK.  One descriptor only.


  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Array (2 x 3) giving the ranges in radius, longitude and altitude.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	





























DSK_HIDE_POINTS
---------------


 PURPOSE:
	Hides points wrt a DISK object.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	sub = dsk_hide_points(dkx, r, points)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	r:	 Column vector giving the position of the viewer in the disk
		 body frame.

	points:	 Array (nv x 3 x nt) of points to test, given in the disk
		 body frame

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

	epsilon:	Distance in front of the disk for a point to be
			considered "in front of" the disk.  Default is 1.


  OUTPUT: NONE


 RETURN:
	Array Subscripts of all input vectors (points argument) that are hidden 
	from the viewer at r by the given disk.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
















DSK_IL
------


 PURPOSE:
	Returns il for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	il = dsk_il(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	il value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_INIT_DESCRIPTORS
--------------------


 PURPOSE:
	Init method for the DISK class.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dkd = dsk_init_descriptors(n)


 ARGUMENTS:
  INPUT:
	n:	Number of descriptors to create.

  OUTPUT: NONE


 KEYWORDS (in addition to those accepted by all superclasses):
  INPUT:  
	dkd:	Disk descriptor(s) to initialize, instead of creating a new one.

	bd:	Body descriptor(s) to pass to bod_init_descriptors.

	crd:	Core descriptor(s) to pass to cor_init_descriptors.

	sma:	Array (ndv+1 x 2 x n) giving the semimajor axes and derivatives
		for each edge. 

	ecc:	Array (ndv+1 x 2 x n) giving the eccentricities and derivatives
		for each edge.

	scale:	Array (2 x n) giving radial scale coefficients.

	nm:	Integer giving the number of radial harmonics in the ring
		shape.

	m:	Array (nm x 2 x n) giving the m value for each harmonic, for
		each edge.

	em:	Array (nm x 2 x n) giving the eccentricity for each harmonic, for
		each edge.

	lpm:	Array (nm x 2 x n) giving the longitude of periapse for each 
		harmonic, for each edge.

	dlpmdt:	Array (nm x 2 x n) giving the apsidal precession rate for each 
		harmonic, for each edge.

	libam:	Array (nm x 2 x n) giving the libration amplitude for each 
		harmonic, for each edge.

	libm:	Array (nm x 2 x n) giving the libration phase for each 
		harmonic, for each edge.

	dlibmdt:	Array (nm x 2 x n) giving the libration frequency for each 
			harmonic, for each edge.

	nl:	Integer giving the number of radial harmonics in the ring
		shape.

	_l:	Array (nl x 2 x n) giving the l value for each harmonic, for
		each edge.  The leading underscore is needed to avoid 
		conflict with other keywords.

	il:	Array (l x 2 x n) giving the inclination for each harmonic, for
		each edge.

	lanl:	Array (nl x 2 x n) giving the longitude of periapse for each 
		harmonic, for each edge.

	dlanldt:	Array (nl x 2 x n) giving the nodal precession rate for each 
			harmonic, for each edge.

	libal:	Array (nl x 2 x n) giving the libration amplitude for each 
		harmonic, for each edge.

	libl:	Array (nl x 2 x n) giving the libration phase for each 
		harmonic, for each edge.

	dlibldt:	Array (nl x 2 x n) giving the libration frequency for each 
			harmonic, for each edge.

  OUTPUT: NONE


 RETURN:
	Newly created or or freshly initialized disk descriptors, depending
	on the presence of the dkd keyword.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	





























DSK_INTERSECT
-------------


 PURPOSE:
	Computes ray intersections with a DISK object. 


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	v_int = dsk_intersect(dkx, v, r)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	v:	 Array (nv x 3 x nt) of column vectors giving the origins
		 of the rays in the body frame.

	r:	 Array (nv x 3 x nt) of column vectors giving the directions
		 of the rays in the body frame.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: 
	t:	Array(nv x 3 x nt) giving the distances to each intersection.
		Values down each column are identical, i.e., this array
		is a stack of three identical (nv x 1 x nt) arrays.

	hit: 	Array giving the subscripts of the input rays that actually
	 	intersect the disk. 


 RETURN:
	Array (nv x 3 x nt) of column vectors giving the ray/disk
	intersections in the body frame. 


 MODIFICATION HISTORY:
 	Written by:	Spitale
	














DSK_INTERSECT_INERTIAL
----------------------


 PURPOSE:
	Computes ray intersections with a DISK object, in inertial coordinates.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	v_int = dsk_intersect_inertial(dkx, v, r)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	v:	 Array (nv x 3 x nt) of column vectors giving the origins
		 of the rays in the inertial frame.

	r:	 Array (nv x 3 x nt) of column vectors giving the directions
		 of the rays in the inertial frame.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: 
	t:	Array(nv x 3 x nt) giving the distances to each intersection.
		Values down each column are identical, i.e., this array
		is a stack of three identical (nv x 1 x nt) arrays.

	hit: 	Array giving the subscripts of the input rays that actually
	 	intersect the disk. 


 RETURN:
	Array (nv x 3 x nt) of column vectors giving the ray/disk
	intersections in the inertial frame.  Note this if inertial
	results are needed, this routine is slightly faster than
	dsk_intersect.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	












DSK_L
-----


 PURPOSE:
	Returns l for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	l = dsk_l(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	l value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_LANL
--------


 PURPOSE:
	Returns lanl for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	lanl = dsk_lanl(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	lanl value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_LIBAL
---------


 PURPOSE:
	Returns libal for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	libal = dsk_libal(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	libal value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_LIBAM
---------


 PURPOSE:
	Returns libam for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	libam = dsk_libam(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	libam value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_LIBL
--------


 PURPOSE:
	Returns libl for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	libl = dsk_libl(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	libl value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_LIBM
--------


 PURPOSE:
	Returns libm for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	libm = dsk_libm(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	libm value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_LPM
-------


 PURPOSE:
	Returns lpm for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	lpm = dsk_lpm(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	lpm value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_M
-----


 PURPOSE:
	Returns m for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	m = dsk_m(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	m value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_NL
------


 PURPOSE:
	Returns nl for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	nl = dsk_nl(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	nl value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_NM
------


 PURPOSE:
	Returns nm for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	nm = dsk_nm(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	nm value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_REFLECT
-----------


 PURPOSE:
	Computes ray reflections with a DISK object. 


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	v_int = dsk_reflect(dkx, v, r)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	v:	 Array (nv x 3 x nt) of column vectors giving the observer
		 position in the body frame.

	r:	 Array (nv x 3 x nt) of column vectors giving the target
		 position in the body frame.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: 
	t:	Array(nv x 3 x nt) giving the distances to each reflection.
		Values down each column are identical, i.e., this array
		is a stack of three identical (nv x 1 x nt) arrays.

	hit: 	Array giving the subscripts of the input rays that actually
	 	reflect on the disk. 


 RETURN:
	Array (nv x 3 x nt) of column vectors giving the ray/disk
	reflections in the body frame. 


 MODIFICATION HISTORY:
 	Written by:	Spitale
	














DSK_REPLICATE
-------------


 PURPOSE:
	Replicates the given descriptor, producing an array of the given
	dimensions containing cloned versions of the input descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	xd = dsk_replicate(dkx, dim)


 ARGUMENTS:
  INPUT:
	dkx:	 Any superclass of DISK.

	dim:	 Dimensions of the result.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Array of the given dimensions containing cloned versions of the input 
	descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






















DSK_RM_POINTS
-------------


 PURPOSE:
	Removes points infront of or behind a DISK object.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	sub = dsk_rm_points(dkx, r, points)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	r:	 Column vector giving the position of the viewer in the disk
		 body frame.

	points:	 Array (nv x 3 x nt) of points to test, given in the disk
		 body frame

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: NONE


 RETURN:
	Array Subscripts of all input vectors (points argument) that are hidden 
	from the viewer at r by the given disk.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




















DSK_SCALE
---------


 PURPOSE:
	Returns scale for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	scale = dsk_scale(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	scale value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_SET_AP
----------


 PURPOSE:
	Replaces ap in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_ap, bx, ap


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	ap:	 New ap value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_BODY
------------


 PURPOSE:
	Replaces the body descriptor in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_body, dkx, bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	bd:	 Array (nt) of new body descriptors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_DAPDT
-------------


 PURPOSE:
	Replaces the dapdt in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dapdt, bx, dapdt


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dapdt:	 New dapdt value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_DLANDT
--------------


 PURPOSE:
	Replaces dlandt in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlandt, bx, dlandt


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlandt:	 New dlandt value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_DLANLDT
---------------


 PURPOSE:
	Replaces dlanldt in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlanldt, bx, dlanldt


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlanldt:	 New dlanldt value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_DLIBDT_AP
-----------------


 PURPOSE:
	Sets dlibdt_ap in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlibdt_ap, bx, dlibdt_ap, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlibdt_ap:	 New dlibdt_ap value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_DLIBDT_LAN
------------------


 PURPOSE:
	Sets dlibdt_lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlibdt_lan, bx, dlibdt_lan, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlibdt_lan:	 New dlibdt_lan value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_DLIBLDT
---------------


 PURPOSE:
	Replaces dlibldt in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlibldt, bx, dlibldt


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlibldt:	 New dlibldt value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_DLIBMDT
---------------


 PURPOSE:
	Replaces dlibmdt in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlibmdt, bx, dlibmdt


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlibmdt:	 New dlibmdt value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_DLPMDT
--------------


 PURPOSE:
	Replaces dlpmdt in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_dlpmdt, bx, dlpmdt


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	dlpmdt:	 New dlpmdt value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_ECC
-----------


 PURPOSE:
	Replaces ecc in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_ecc, bx, ecc


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	ecc:	 New ecc value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_EM
----------


 PURPOSE:
	Replaces em in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_em, bx, em


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	em:	 New em value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_IL
----------


 PURPOSE:
	Replaces il in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_il, bx, il


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	il:	 New il value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_INC
-----------


 PURPOSE:
	Sets inc in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_inc, bx, inc, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	inc:	 New inc value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_L
---------


 PURPOSE:
	Replaces l in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_l, bx, l


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	l:	 New l value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_LAN
-----------


 PURPOSE:
	Sets lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_lan, bx, lan, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	lan:	 New lan value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_LANL
------------


 PURPOSE:
	Replaces lanl in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_lanl, bx, lanl


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	lanl:	 New lanl value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_LIBAL
-------------


 PURPOSE:
	Replaces libal in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_libal, bx, libal


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	libal:	 New libal value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_LIBAM
-------------


 PURPOSE:
	Replaces libam in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_libam, bx, libam


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	libam:	 New libam value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_LIBA_AP
---------------


 PURPOSE:
	Sets liba_ap in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_liba_ap, bx, liba_ap, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	liba_ap:	 New liba_ap value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_LIBA_LAN
----------------


 PURPOSE:
	Sets liba_lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_liba_lan, bx, liba_lan, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	liba_lan:	 New liba_lan value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_LIBL
------------


 PURPOSE:
	Replaces libl in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_libl, bx, libl


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	libl:	 New libl value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_LIBM
------------


 PURPOSE:
	Replaces libm in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_libm, bx, libm


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	libm:	 New libm value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_LIB_AP
--------------


 PURPOSE:
	Sets lib_ap in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_lib_ap, bx, lib_ap, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	lib_ap:	 New lib_ap value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_LIB_LAN
---------------


 PURPOSE:
	Sets lib_lan in each given disk descriptor.  This value is determined 
	by the orientation of the BODY axes.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_lib_lan, bx, lib_lan, frame_bd


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	lib_lan:	 New lib_lan value.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















DSK_SET_LPM
-----------


 PURPOSE:
	Replaces lpm in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_lpm, bx, lpm


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	lpm:	 New lpm value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_M
---------


 PURPOSE:
	Replaces m in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_m, bx, m


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	m:	 New m value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_NL
----------


 PURPOSE:
	Replaces nl in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_nl, bx, nl


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	nl:	 New nl value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_NM
----------


 PURPOSE:
	Replaces nm in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_nm, bx, nm


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	nm:	 New nm value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_SCALE
-------------


 PURPOSE:
	Replaces the scale in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_scale, bx, scale


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	scale:	 New scale value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SET_SMA
-----------


 PURPOSE:
	Replaces the sma in each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	dsk_set_sma, bx, sma


 ARGUMENTS:
  INPUT: 
	dkx:	 Array (nt) of any subclass of DISK.

	sma:	 New sma value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























DSK_SHAPE_RADIAL
----------------


 PURPOSE:
	Computes radii along the edge of a disk using disk elements.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	z = dsk_shape_radial(dkx, a, e, lp, lon, m, em, lpm)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	a:	 Array (nt) of semimajor axis values. 

	e:	 Array (nt) of eccentricity values. 

	lp:	 Array (nt) of longitudes of periapse. 

	lon:	 Array (nlon) of longitudes at which to compute elevations.

	m:	 Array (nt) of radial wavenumbers.

	em:	 Array (nt) of eccentricities for each m.

	lpm:	 Array (nt) of longitudes of periapse for each m.


  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

	mm:	If set, only the radius component for this wavenumber
		is returned.

	mii:	If set, only the radius component with this index
		is returned.

  OUTPUT: NONE


 RETURN:
	Array (nt x nlon) of radii computed at each longitude on each 
	disk.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

DSK_SHAPE_VERTICAL
------------------


 PURPOSE:
	Computes elevations along the edge of a disk using disk elements.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	z = dsk_shape_vertical(dkx, a, i, lan, lon, l, il, lanl)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

	a:	 Array (nt) of semimajor axis values. 

	i:	 Array (nt) of inclination values. 

	lan:	 Array (nt) of longitudes of ascending node. 

	lon:	 Array (nlon) of longitudes at which to compute elevations.

	l:	 Array (nt) of vertical wavenumbers.

	il:	 Array (nt) of inclinations for each l.

	lanl:	 Array (nt) of longitudes of ascending node for each l.


  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One for each dkx.

	ll:	If set, only the elevation component for this wavenumber
		is returned.

	lii:	If set, only the elevation component with this index
		is returned.

  OUTPUT: NONE


 RETURN:
	Array (nt x nlon) of elevations computed at each longitude on each 
	disk.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

DSK_SMA
-------


 PURPOSE:
	Returns sma for each given disk descriptor.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	sma = dsk_sma(dkx)


 ARGUMENTS:
  INPUT: NONE
	dkx:	 Any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	sma value associated with each given disk descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























DSK_VALID_EDGES
---------------


 PURPOSE:
	Determines which edges (i.e., inner/outer) in the input DISK objects 
	are valid.


 CATEGORY:
	NV/LIB/DSK


 CALLING SEQUENCE:
	sub = dsk_valid_edges(dkx, </inner|/outer|/all>)


 ARGUMENTS:
  INPUT:
	dkx:	 Array (nt) of any subclass of DISK.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	inner:	If set, only the inner edges are tested.

	outer:	If set, only the outer edges are tested.

	all:	If set, the inner and outer edges are tested, and must
		both be valid to be selected.

  OUTPUT: NONE


 RETURN:
	Array of subscripts of the descriptors whose edges meet th criteria
	edfined by the input keyowrds.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






















