;===========================================================================
; cam_init_descriptors
;
;
;===========================================================================
function cam_init_descriptors, n, crd=crd, bd=bd, cd=cd, $
@cam__keywords.include
end_keywords
@nv_lib.include

 if(NOT keyword_set(cd)) then cd=replicate({camera_descriptor}, n)
 cd.class=decrapify(make_array(n, val='CAMERA'))

 if(keyword_set(scale)) then cd.scale=scale
 if(keyword_set(oaxis)) then cd.oaxis=oaxis
 if(keyword_set(exposure)) then cd.exposure=decrapify(exposure)

 if(keyword_set(fn_psf)) then cd.fn_psf = fn_psf

 if(keyword_set(filters)) then cd.filters[0:n_elements(filters)-1] = filters
 if(keyword_set(fn_filter)) then cd.fn_filter = fn_filter

 if(keyword_set(size)) then cd.size = size

 if(keyword_set(bd)) then cd.bd = bd $
 else cd.bd=bod_init_descriptors(n, crd=crd, $
@bod__keywords.include
end_keywords)

 if(keyword_set(fn_focal_to_image)) then $
                            cd.fn_focal_to_image=decrapify(fn_focal_to_image) $
 else cd.fn_focal_to_image = $
                     decrapify(make_array(n, val='cam_focal_to_image_linear'))

 if(keyword_set(fn_image_to_focal)) then $
                            cd.fn_image_to_focal=decrapify(fn_image_to_focal) $
 else cd.fn_image_to_focal = $
                      decrapify(make_array(n, val='cam_image_to_focal_linear'))

 if(keyword_set(fn_data_p)) then cd.fn_data_p=decrapify(fn_data_p)

 cdp = ptrarr(n)
 nv_rereference, cdp, cd



 return, cdp
end
;===========================================================================



