;=============================================================================
;+
; NAME:
;       image_to_body
;
;
; PURPOSE:
;       Transforms a point in image coordinates to body coordinates on the
;	object.
;
;
; CATEGORY:
;       NV/LIB/TOOLS
;
;
; CALLING SEQUENCE:
;       result = image_to_body(cd, bx, p)
;
;
; ARGUMENTS:
;  INPUT:
;             cd:       Camera or map descriptor
;
;             bx:       Body descriptor (subclass of GLOBE or DISK)
;
;              p:       An array of image points
;
;  OUTPUT:
;       NONE
;
; RETURN:
;       An array of body-frame vectors.  Zero vectors are returned if a
;	body point cannot be computed (e.g., the ray misses the planet).
;
; STATUS:
;       Completed.
;
;
; MODIFICATION HISTORY:
;       Written by:     Spitale; 8/2006
;-
;=============================================================================
function image_to_body, cd, bx, p, hit=hit

 class = (class_get(cd))[0]

 case class of 
  'MAP' : return, surface_to_body(od, frame_bd=frame_bd, $
	            image_to_surface(cd, od, p, frame_bd=frame_bd))


  'CAMERA' : $
	begin
	 class = (class_get(bx))[0]

	 np = n_elements(p)/2
	 dim = size(p, /dim)
	 if(n_elements(dim) GT 1) then np = dim[1] 
	 nt = n_elements(bx)

	 cam_pos = bod_pos(cd)
	 if(nt GT 1) then cam_pos = cam_pos[linegen3z(1,3,nt)]
	 v = bod_inertial_to_body_pos(bx, cam_pos)
	 v = v[linegen3x(np,3,nt)]
	 rr = image_to_inertial(cd, p)
	 r = bod_inertial_to_body(bx, rr)

	 if(keyword_set(class_extract(bx, 'DISK'))) then $
                                   body_pts = dsk_intersect(bx, v, r, hit=hit) $
	 else $
	  begin
	   body_pts = (glb_intersect(bx, v, r, discriminant=discriminant))[0:np-1,*]
	   hit = where(discriminant GE 0)
	  end

	 return, body_pts
	end

  else :
 endcase


end
;=============================================================================
