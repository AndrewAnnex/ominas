;==============================================================================
; dsk_projected_resolution
;
; p is point on disk in inertial coordinates.
;
; This approach is from Matt Tiscareno and is much simpler than the 
; original below.
;
;==============================================================================
pro dsk_projected_resolution, dkd, cd, p, scale, $
	rad=resrad, $		; dist/pixel in radial direction
	lon=reslon, $		; dist/pixel in longitudinal direction
	perp=resperp, $		; dist/pixel in perp. to projected long. dir.
	rr=rr			; intercept radius

 if(NOT keyword_set(scale)) then scale = (cam_scale(cd))[0]

 nv = n_elements(p)/3					; assume  nt = 1
 mm = make_array(nv, val=1d)
 m = make_array(3, val=1d)

 dsk_orient = bod_orient(dkd)
 zz = dsk_orient[2,*] ## mm

 cam_pos = bod_pos(cd) ## mm
 dsk_pos = bod_pos(dkd) ## mm


 ;----------------------------------
 ; radial scale
 ;----------------------------------
 v = cam_pos - p
 range = v_mag(v)
 v = v_unit(v)
 vv = dsk_pos - p
 rr = v_mag(vv)
 vv = v_unit(vv)

 resrad = scale * range / v_mag(v_cross(v, vv))

 

 ;----------------------------------
 ; longitudinal scale
 ;----------------------------------
 vv = v_cross(zz, vv)

 reslon = scale * range / v_mag(v_cross(v, vv))



 ;----------------------------------
 ; perpendicular scale
 ;----------------------------------
 vv = dsk_get_perp(cd, dkd, p, frame=dkd)

 resperp = scale * range / v_mag(v_cross(v, vv))





end
;==============================================================================



;==============================================================================
; dsk_projected_resolution
;
; p is point on disk in inertial coordinates.
;
; result is length of segment bisecting the intersection ellipse in 
; radial/longitudinal direction.
;
;==============================================================================
pro _dsk_projected_resolution, dkd, cd, p, scale, rad=resrad, lon=reslon, rr=rr

 dsk_orient = bod_orient(dkd)

 nv = n_elements(p)/3					; assume  nt = 1
 mm = make_array(nv, val=1d)
 m = make_array(3, val=1d)

 cam_pos = bod_pos(cd) ## mm
 dsk_pos = bod_pos(dkd) ## mm

 v = cam_pos - p
 range = v_mag(v)
 v = v_unit(v)

 r = dsk_pos - p
 rr = v_mag(r)
 r = v_unit(r)

 n = dsk_orient[2,*] ## mm

 cos_theta = v_inner(n,v)
 cos_xi = v_inner(r,v)
 xi = acos(cos_xi)
 gamma = !dpi/2d - xi


 resrad = range * scale * sqrt(2d / (cos(gamma)^2 + sin(gamma)^2*cos_theta^2))
 reslon = range * scale * sqrt(2d / (cos(xi)^2 + sin(xi)^2*cos_theta^2))
end
;==============================================================================



