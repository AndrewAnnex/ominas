;===========================================================================
; glb_init_descriptors
;
;
;===========================================================================
function glb_init_descriptors, n, gbd=gbd, bd=bd, crd=crd, $
@glb__keywords.include
end_keywords
@nv_lib.include

 npht = glb_npht()

 if(NOT keyword_set(gbd)) then gbd=replicate({globe_descriptor}, n)
 gbd.class=decrapify(make_array(n, val='GLOBE'))

 if(keyword_set(lref)) then gbd.lref=decrapify(lref)

 ;----------------------------------------
 ; ellipsoid parameters
 ;----------------------------------------
 gbd.type = 'ELLIPSOID'
 if(keyword_set(radii)) then gbd.radii=radii
 if(keyword_set(lora)) then gbd.lora=decrapify(lora)

 ;----------------------------------------
 ; dynamical parameters
 ;----------------------------------------
 if(keyword_set(rref)) then gbd.rref = rref
 if(keyword_set(GM)) then gbd.GM = GM
 if(keyword_set(mass)) then gbd.mass = mass

 if(keyword_set(J)) then $
  begin
   _nj = n_elements(J)/n
   nj = n_elements(gbd.J)
   if(_nj GT nj) then $
    begin
     nv_message, /con, name='glb_init_descriptors', $
         'Warning -- J contains more terms than allowed, truncating.'
     J = J[0:nj-1,*]
    end
   _nj = n_elements(J)/n
   gbd.J[0:_nj-1,*] = J
  end


 ;----------------------------------------
 ; photometric parameters
 ;----------------------------------------
 if(keyword_set(refl_fn)) then gbd.refl_fn = refl_fn
 if(keyword_set(refl_parm)) then $
       gbd.refl_parm[0:(n_elements(refl_parm)<npht)-1,*] $
               = refl_parm[0:(n_elements(refl_parm)<npht)-1,*]

 if(keyword_set(phase_fn)) then gbd.phase_fn = phase_fn
 if(keyword_set(phase_parm)) then $
       gbd.phase_parm[0:(n_elements(phase_parm)<npht)-1,*] $
               = phase_parm[0:(n_elements(phase_parm)<npht)-1,*]

 if(keyword_set(albedo)) then gbd.albedo = albedo

 if(keyword_set(bd)) then gbd.bd = bd $
 else gbd.bd=bod_init_descriptors(n, crd=crd, $
@bod__keywords.include
end_keywords)


 gbdp = ptrarr(n)
 nv_rereference, gbdp, gbd


 return, gbdp
end
;===========================================================================



