;===========================================================================
; glb_intersect_plane.pro
;
; Inputs and outputs are in BODY coordinates
;
; computes vectors at which planes with origin v(1,3,nt) and unit normals
; n(1,3,nt) intersect the globe.
;
; Returns array body points(np,3,nt), where np is the number of points
; on the curve of intersection.
;
;===========================================================================
function glb_intersect_plane, gbd, v, n, np=np

 nt = n_elements(gbd)

 if(NOT keyword_set(np)) then np = 1000


 ;---------------------------------------------
 ; closest point on plane to globe center
 ;---------------------------------------------
 vp = n*(v_inner(v,n)#make_array(3,val=1d))						; 1 x 3 x nt


 ;---------------------------------------------
 ; determine which planes actually intersect
 ;---------------------------------------------
 rad = (v_mag(glb_intersect(gbd, dblarr(1,3,nt), n)))[0,0,*]	; 1 x 1 x nt
 w = where(rad-v_mag(vp) GT 0)
 if(w[0] EQ -1) then return, 0
 nw = n_elements(w)
 
 
 ;----------------------------------------------------------
 ; construct vectors in plane, radiating from closest point
 ;----------------------------------------------------------
 vv0 = v - vp							; 1 x 3 x nt
 np2 = np/2
 _2np2 = 2*np2
 theta = dindgen(np2)/double(np2) * !dpi
 _vv0 = vv0[*,*,w] & _n = n[*,*,w]
 if(nw NE 1) then $
  begin
   _vv0 = transpose(vv0[*,*,w])
   _n = transpose(n[*,*,w])
  end
 vv = transpose(v_rotate(_vv0, _n, sin(theta), cos(theta)))	; np2 x 3 x nw
 
 ;----------------------------------------------------------
 ; find intercepts on globe surface
 ;----------------------------------------------------------
 vpp = glb_intersect(gbd, vp[*,*,w]##make_array(np2,val=1d), vv)
								; _2np2 x 3 x nw


 ;----------------------------------------------------------
 ; construct output array
 ;----------------------------------------------------------
 result = dblarr(_2np2,3,nt)
 result[*,*,w] = vpp 						; _2np2 x 3 x nt


 return, result
end
;===========================================================================
