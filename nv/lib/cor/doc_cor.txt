									12/05/15
COR Program Reference
=====================

 Summary
 -------
  - CORE_DESCRIPTOR__DEFINE
	Class structure for the CORE class.

  - COR_ADD_TASK
	Adds a task to the descriptor task list.

  - COR_CLONE_DESCRIPTOR
	Allocates a new core descriptor as a copy of an existing descriptor.

  - COR_COPY_DESCRIPTOR
	Copies all fields from one core descriptor into another.

  - COR_INIT_DESCRIPTORS
	Init method for the CORE class.

  - COR_NAME
	Returns the name for each given core descriptor.

  - COR_REPLICATE
	Replicates the given descriptor, producing an array of the given
	dimensions containing cloned versions of the input descriptor.

  - COR_SELECT
	Selects descriptors based on their names.

  - COR_SET_NAME
	Replaces the name for each given core descriptor.

  - COR_SET_UDATA
	Stores user data in a descriptor and associates it with the 
	specified name.

  - COR_TASKS
	Returns the descriptor task list.

  - COR_TEST_UDATA
	Tests the existence of data stored in a descriptor under the 
	specified name.

  - COR_UDATA
	Retrieves user data stored in a descriptor under the specified name.

  - COR_USER
	Returns the username for each given core descriptor.
















CORE_DESCRIPTOR__DEFINE
-----------------------


 PURPOSE:
	Class structure for the CORE class.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	sn:	Unique serial number of descriptor.  Managed in NV/SYS.


	idp:	Unique ID pointer for descriptor.  Managed in NV/SYS.


	name:	Name of the object.

		Methods: cor_name, cor_set_name


	user:	Username.

		Methods: cor_user


	tasks_p:	Pointer to tasks list.

			Methods: cor_tasks, cor_add_task


	udata_tlp:	Tag list containing user data.

			Methods: cor_set_udata, cor_test_udata, cor_udata


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	
















COR_ADD_TASK
------------


 PURPOSE:
	Adds a task to the descriptor task list.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	cor_add_task, crx, task


 ARGUMENTS:
  INPUT:
	crx:	 Any subclass of CORE.  Only one descriptor may be provided.

	task:	 String giving the name of a program that modified the 
		 descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	
























COR_CLONE_DESCRIPTOR
--------------------


 PURPOSE:
	Allocates a new core descriptor as a copy of an existing descriptor.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	new_crd = cor_clone_descriptor(crd)


 ARGUMENTS:
  INPUT:
	crd:	 Descriptor of class CORE.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Newly created core descriptor with all fields identical to the input
	descriptor.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	





























COR_COPY_DESCRIPTOR
-------------------


 PURPOSE:
	Copies all fields from one core descriptor into another.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	cor_copy_descriptor, crd_dst, crd_src


 ARGUMENTS:
  INPUT:
	crd_dst:	 Descriptor of class CORE to copy to.

	crd_src:	 Descriptor of class CORE to copy from.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN: NONE


 MODIFICATION HISTORY:
 	Written by:	Spitale
	





























COR_INIT_DESCRIPTORS
--------------------


 PURPOSE:
	Init method for the CORE class.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	crd = cor_init_descriptors(n)


 ARGUMENTS:
  INPUT:
	n:	 Number of descriptors to create.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	crd:	Core descriptor(s) to initialize, instead of creating a new one.

	name:	 String giving the name of the descriptor.

	user:	 String giving the username for the descriptor.

	tasks:	 String array giving the initial task list.

  OUTPUT: NONE


 RETURN:
	Newly created or or freshly initialized core descriptors depending
	on the presence of the crd keyword.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


















COR_NAME
--------


 PURPOSE:
	Returns the name for each given core descriptor.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	name = cor_name(crx)


 ARGUMENTS:
  INPUT: NONE
	crx:	 Any subclass of CORE.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	Name associated with each given core descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























COR_REPLICATE
-------------


 PURPOSE:
	Replicates the given descriptor, producing an array of the given
	dimensions containing cloned versions of the input descriptor.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	xd = cor_replicate(crx, dim)


 ARGUMENTS:
  INPUT:
	crx:	 Any subclass of CORE.  Only one descriptor may be provided.

	dim:	 Dimensions of the result.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Array of the given dimensions containing cloned versions of the input 
	descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






















COR_SELECT
----------


 PURPOSE:
	Selects descriptors based on their names.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	xd = cor_select(crx, names)


 ARGUMENTS:
  INPUT:
	crx:	 Array of descriptors of any subclass of CORE.

	names:	 Array of names to select.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	All descriptors in crx whose CORE names match strings in the input
	name list.  0 if no mathces found.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	























COR_SET_NAME
------------


 PURPOSE:
	Replaces the name for each given core descriptor.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	cor_set_name, crx, name


 ARGUMENTS:
  INPUT: NONE
	crx:	 Any subclass of CORE.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	



























COR_SET_UDATA
-------------


 PURPOSE:
	Stores user data in a descriptor and associates it with the 
	specified name.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	cor_set_udata, crx, name, data


 ARGUMENTS:
  INPUT:
	crx:	 Any subclass of CORE.  Only one descriptor may be provided.

	name:	 Name to associate with the data.  If the name already exists,
		 then the data is overwritten.

	data:	 Data to store.  If multiple crx supplied, then the trailing 
		 dimension must match the number of descriptors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	




















COR_TASKS
---------


 PURPOSE:
	Returns the descriptor task list.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	tasks = cor_tasks(crx)


 ARGUMENTS:
  INPUT:
	crx:	 Any subclass of CORE.  Only one descriptor may be provided.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN: 
	String array containing the list of all programs that have modified
	the given descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

























COR_TEST_UDATA
--------------


 PURPOSE:
	Tests the existence of data stored in a descriptor under the 
	specified name.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	data = cor_test_udata(crx, name)


 ARGUMENTS:
  INPUT:
	crx:	 Any subclass of CORE.  Only one descriptor may be provided.

	name:	 Name associated with the data to test.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	True if the data is stored under the given name, false otherwise.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	























COR_UDATA
---------


 PURPOSE:
	Retrieves user data stored in a descriptor under the specified name.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	data = cor_udata(crx, name)


 ARGUMENTS:
  INPUT:
	crx:	 Any subclass of CORE.  If multiple crx are provided, then
		 the trailing dimension represents each each descriptor.

	name:	 Name associated with the data.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN:
	Data associated with the given name.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	























COR_USER
--------


 PURPOSE:
	Returns the username for each given core descriptor.


 CATEGORY:
	NV/LIB/COR


 CALLING SEQUENCE:
	user = cor_user(crx)


 ARGUMENTS:
  INPUT: NONE
	crx:	 Any subclass of CORE.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

  OUTPUT: NONE


 RETURN:
	Username associated with each given core descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























