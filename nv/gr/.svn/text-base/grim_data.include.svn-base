;=============================================================================
; grim_blank
;
;=============================================================================
function grim_blank, xsize, ysize
 return, bytarr(xsize, ysize)
end
;=============================================================================



;=============================================================================
; grim_init
;
;=============================================================================
function grim_init, dd, zoom=zoom, wnum=wnum, grnum=grnum, filter=filter,$
                        retain=retain, user_callbacks=user_callbacks, $
                        user_psym=user_psym, faint=faint, cursor_swap=cursor_swap, $
                        path=path, save_path=save_path, load_path=load_path, fov=fov, $
                        trs_cd=trs_cd, trs_pd=trs_pd, trs_rd=trs_rd, trs_sd=trs_sd, trs_std=trs_std, $
                        trs_sund=trs_sund, filetype=filetype, hide=hide, type=type, $
                        color=color, xrange=xrange, yrange=yrange, npoints=npoints, $
                        thick=thick, nsum=nsum, xtitle=xtitle, ytitle=ytitle, $
                        psym=psym, user_modes=user_modes, readout_fns=readout_fns, $
                        symsize=symsize, nhist=nhist, maintain=maintain, workdir=workdir, $
                        compress=compress, extensions=extensions, max=max, beta=beta
@grim_block.include
 
  if(NOT keyword_set(nhist)) then nhist = 1

  beta = keyword_set(beta)

  if(NOT keyword_set(readout_fns)) then readout_fns = ''

  if(NOT keyword_set(user_psym)) then user_psym = 3
  if(NOT keyword_set(faint)) then faint = 12
  if(NOT defined(cursor_swap)) then cursor_swap = -1

  if(NOT keyword_set(user_modes)) then user_modes_p = ptr_new(0) $
  else user_modes_p = ptr_new(user_modes)

  _fov = 1.
  if(keyword_set(fov)) then _fov = float(fov)

  if(NOT keyword_set(npoints)) then npoints = 0
  if(NOT keyword_set(fov)) then fov = 0.
  if(NOT keyword_set(filter)) then filter = ''

  if(NOT keyword_set(filetype)) then filetype = ''

  if(keyword_set(path)) then load_path = (save_path = path)
  if(NOT keyword_set(load_path)) then load_path = ''
  if(NOT keyword_set(save_path)) then save_path = ''
  if(NOT keyword_set(workdir)) then workdir = './'

  if(NOT keyword_set(trs_cd)) then trs_cd = ''
  if(NOT keyword_set(trs_pd)) then trs_pd = ''
  if(NOT keyword_set(trs_rd)) then trs_rd = ''
  if(NOT keyword_set(trs_sd)) then trs_sd = ''
  if(NOT keyword_set(trs_std)) then trs_std = ''
  if(NOT keyword_set(trs_sund)) then trs_sund = ''

  if(NOT keyword_set(color)) then color = ctwhite()
  if(NOT keyword_set(thick)) then thick = 1
  if(NOT keyword_set(nsum)) then nsum = 0
  if(NOT keyword_set(psym)) then psym = -3l
  if(NOT keyword_set(symsize)) then symsize = 1.
 
  if(NOT keyword_set(title)) then title = 'Untitled'
  if(NOT keyword_set(xtitle)) then xtitle = ''
  if(NOT keyword_set(ytitle)) then ytitle = ''


  ;----------------------
  ; main data structure
  ;----------------------
  grim_data = {grim_data_struct, $
	;---------------
	; widgets
	;---------------
		base			: 0l, $
		shortcuts_base		: 0l, $
		shortcuts_base1		: 0l, $
		shortcuts_base2		: 0l, $
		shortcuts_base3		: 0l, $
		shortcuts_base4		: 0l, $
		shortcuts_base5		: 0l, $
		shortcuts_base6		: 0l, $
		shortcuts_base7		: 0l, $
		shortcuts_base8		: 0l, $
		shortcuts_base9		: 0l, $
		color_button		: 0l, $
		settings_button		: 0l, $
		next_button		: 0l, $
		previous_button		: 0l, $
		jumpto_text		: 0l, $
		refresh_button		: 0l, $
		hide_button		: 0l, $
		entire_button		: 0l, $
		view_previous_button	: 0l, $
		tracking_button		: 0l, $
		render_button		: 0l, $
		undo_button		: 0l, $
		redo_button		: 0l, $
		undo_menu_id		: 0l, $
		redo_menu_id		: 0l, $
		activate_all_button	: 0l, $
		deactivate_all_button	: 0l, $
		guideline_button	: 0l, $
		identify_button		: 0l, $
		pixel_grid_button	: 0l, $
		grid_button		: 0l, $
		remove_button		: 0l, $
		remove_xd_button	: 0l, $
		trim_button		: 0l, $
		axes_button		: 0l, $
		header_button		: 0l, $
		notes_button		: 0l, $
		repeat_button		: 0l, $
		sub_base		: 0l, $
		modes_base		: 0l, $
		modes_base1		: 0l, $
		modes_base2		: 0l, $
		modes_base3		: 0l, $
		select_button		: 0l, $
		context_button		: 0l, $
		pan_button		: 0l, $
		tiepoints_button	: 0l, $
		activate_button		: 0l, $
		readout_button		: 0l, $
		mag_button		: 0l, $
		zoom_button		: 0l, $
		xyzoom_button		: 0l, $
		smooth_button		: 0l, $
		plane_button		: 0l, $
		move_button		: 0l, $
		rotate_button		: 0l, $
		spin_button		: 0l, $
		footprint_button	: 0l, $
		mbar			: 0l, $
		menu			: 0l, $
		draw_base		: 0l, $
		draw			: 0l, $
		context_draw		: 0l, $
		context_base		: 0l, $
		axes_draw		: 0l, $
		axes_base		: 0l, $
		message_base		: 0l, $
		xy_label		: 0l, $
		label			: 0l, $
		menu_ids_p		: ptr_new(), $
		menu_desc_p		: ptr_new(), $
		map_items_p		: ptr_new(), $
		od_map_items_p		: ptr_new(), $
		readout_top		: 0l, $
		readout_text		: 0l, $
		header_text		: -1l, $
		header_base		: -1l, $
		notes_text		: -1l, $
		notes_base		: -1l, $
		help_text		: -1l, $
		help_base		: -1l, $
	;---------------
	; bookkeeping
	;---------------
		base_xsize		: 0l, $
		base_ysize		: 0l, $

		beta			: beta, $
		npoints			: npoints, $
		nhist			: nhist, $
		readout_fns_p		: ptr_new(readout_fns), $
		ref_comb		: 'Average', $
		type			: type, $	; 'image', 'plot', 'render'
		user_tlp		: ptr_new(), $
		retain			: retain, $
		maintain		: maintain, $
		compress		: compress, $
		extensions		: extensions, $
		cursor_swap		: cursor_swap, $
		zoom			: zoom, $
		mode			: '', $
		mode_data_p		: ptr_new(0), $
		grid_flag		: 0, $
		pixel_grid_flag		: 0, $
		guideline_flag		: 0, $
		guideline_pixmaps	: [0l,0l], $
		guideline_save_xy	: [-1d,-1d], $
		axes_flag		: 0, $
		readout_mark		: dblarr(2), $
		measure_mark		: dblarr(2,2), $
		selected		: 0, $
		wnum			: 0, $
		pixmap			: -1, $
		redraw_pixmap		: -1, $
		context_wnum		: 0, $
		context_pixmap		: 0, $
		context_mapped		: 0, $
		axes_wnum		: 0, $
		mag_redraw_pixmap	: 0, $
		mag_pixmap		: 0, $
		mag_last_x0		: -1l, $
		mag_last_y0		: -1l, $
		grnum			: 0, $
		rf_callbacks_p		: ptr_new(''), $
		rf_callbacks_data_pp	: ptr_new(0), $
		tv_rp			: ptr_new(0), $
		tv_gp			: ptr_new(0), $
		tv_bp			: ptr_new(0), $
		hidden			: 0, $		; all overlays hidden?
		tracking		: 1, $		
		min_p			: ptr_new(0), $
		max_p			: ptr_new(0), $
		default_user_psym	: user_psym, $
		repeat_fn		: '', $
		repeat_event_p		: ptr_new(0), $ 
		user_modes_p		: user_modes_p, $
		workdir			: workdir, $
		tvd_init_p		: ptr_new(0), $
		highlight		: 0, $		
		vpp			: ptr_new(0), $
		dd_map_p		: ptr_new(0), $
		md_map_p		: ptr_new(0), $

	;---------------
	; planes
	;---------------
		n_planes	: 0, $			; # of image planes
							;  active + inactive
		planes_p	: ptr_new(0), $		; Image planes
		pl_flags_p	: ptr_new(0), $		; Plane flags
							;  0 - inactive
							;  1 - active
							;  2 - blank
		pn		: 0, $			; current plane number

		def_trs_cd	: trs_cd, $
		def_trs_pd	: trs_pd, $
		def_trs_rd	: trs_rd, $
		def_trs_sd	: trs_sd, $
		def_trs_std	: trs_std, $
		def_trs_sund	: trs_sund, $

		def_filetype	: filetype, $
		def_load_path	: load_path, $
		def_save_path	: save_path, $
		def_filter	: filter, $

		def_fov		: fov, $
		def_hide	: hide, $

		def_color	: color, $
		def_psym	: psym, $
		def_symsize	: symsize, $
		def_thick	: thick, $
		def_nsum	: nsum, $

		def_title	: title[0], $
		def_xtitle	: xtitle[0], $
		def_ytitle	: ytitle[0] $
	     }


  ;---------------------
  ; planes
  ;---------------------
  grim_add_planes, grim_data, dd, $
     xrange=xrange, yrange=yrange, xtitle=xtitle, ytitle=ytitle, max=max

 ;----------------------
 ; common block
 ;----------------------
 if(n_elements(_selected) EQ 0) then _selected = -1

 return, grim_data
end
;=============================================================================



;=============================================================================
; grim_exists
;
;=============================================================================
function grim_exists, grim_data
 if(NOT keyword_set(grim_data)) then return, 0
 return, ptr_valid(grim_data.planes_p)
end
;=============================================================================



;=============================================================================
; grim_get_data
;
;=============================================================================
function grim_get_data, top, $
         dead=dead, primary=primary, no_wset=no_wset
@grim_block.include

 if((NOT keyword_set(top)) AND (NOT keyword_set(_top))) then return, 0

 if(NOT keyword_set(top)) then top = _top $
 else _top = top
 if(NOT keyword_set(_primary)) then _primary = _top


 if(keyword_set(primary)) then top = _primary
 if(NOT widget_info(top, /valid_id)) then return, 0

 widget_control, top, get_uvalue=grim_data
 if(NOT keyword_set(dead)) then $
       if(NOT keyword_set(no_wset)) then grim_wset, grim_data, grim_data.wnum

 return, grim_data
end
;=============================================================================



;=============================================================================
; grim_set_data
;
;=============================================================================
pro grim_set_data, grim_data, top, primary=primary
@grim_block.include

 if(NOT keyword_set(top)) then top = _top $
 else _top = top
 if(NOT keyword_set(_primary)) then _primary = _top


 if(keyword_set(primary)) then top = _primary

; if(NOT widget_info(top, /valid)) then return
 widget_control, top, set_uvalue=grim_data

end
;=============================================================================



;=============================================================================
; grim_set_primary
;
;=============================================================================
pro grim_set_primary, top
@grim_block.include

 if(keyword__set(_primary)) then old_primary = _primary

 if(old_primary EQ top) then return

 _primary = top

 ;-----------------------------------
 ; erase old primary frame
 ;-----------------------------------
; if(widget_info(old_primary, /valid_id)) then $
 if(widget_info(old_primary, /managed)) then $
  begin
   grim_data = grim_get_data(old_primary)
   grim_refresh, /use_pixmap, /no_objects, /no_image, grim_data, /noglass
  end

 ;-----------------------------------
 ; set new primary and draw frame
 ;-----------------------------------
 grim_data = grim_get_data(_primary)
 _top = _primary
 grim_set_ct, grim_data
 grim_refresh, /no_image, /no_objects, grim_data, /noglass

 grim_call_primary_callbacks

end
;=============================================================================



;=============================================================================
; grim_add_primary_callback
;
;=============================================================================
pro grim_add_primary_callback, callbacks, data_ps
@grim_block.include

 grim_add_callback, callbacks, data_ps, _pm_callbacks, _pm_data_ps
end
;=============================================================================



;=============================================================================
; grim_rm_primary_callback
;
;=============================================================================
pro grim_rm_primary_callback, data_ps
@grim_block.include

 grim_rm_callback, data_ps, _pm_callbacks, _pm_data_ps
end
;=============================================================================



;=============================================================================
; grim_call_primary_callbacks
;
;=============================================================================
pro grim_call_primary_callbacks
@grim_block.include

 grim_call_callbacks, _pm_callbacks, _pm_data_ps

end
;=============================================================================



;=============================================================================
; grim_get_selected
;
;=============================================================================
function grim_get_selected
@grim_block.include

 if(_selected[0] EQ -1) then return, 0

 n = n_elements(_selected)

 dead = bytarr(n)
 for i=0, n-1 do if(NOT widget_info(_selected[i], /valid_id)) then dead[i] = 1

 w = where(dead EQ 0)
 if(w[0] NE -1) then return, _selected[w]

 return, 0
end
;=============================================================================



;=============================================================================
; grim_select
;
;=============================================================================
pro grim_select, grim_data
@grim_block.include

 grim_data.selected = NOT grim_data.selected

 if(grim_data.selected) then $
  begin
   widget_control, grim_data.select_button, set_value=grim_select_bitmap()
   if(_selected[0] EQ -1) then _selected = grim_data.base $
   else _selected = [_selected, grim_data.base]
   grim_print, grim_data, 'Image selected.'
  end $
 else $
  begin
   widget_control, grim_data.select_button, set_value=grim_unselect_bitmap()
   w = where(_selected EQ grim_data.base)
   if(w[0] NE -1) then _selected = rm_list_item(_selected, w[0], only=-1)
   grim_print, grim_data, 'Image deselected.'
  end

end
;=============================================================================



;=============================================================================
; grim_identify
;
;=============================================================================
pro grim_identify, grim_data

 print, '!'

end
;=============================================================================



;=============================================================================
; grim_top_to_grnum
;
;=============================================================================
function grim_top_to_grnum, top, new=new

 if(keyword_set(new)) then return, handle_create(value=top)

 grim_data = grim_get_data(top)
 return, grim_data.grnum
end
;=============================================================================



;=============================================================================
; grim_grnum_to_top
;
;=============================================================================
function grim_grnum_to_top, grnum

 handle_value, grnum, top

 return, top
end
;=============================================================================



;=============================================================================
; grim_test_map
;
;=============================================================================
function grim_test_map, grim_data, plane=plane

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 if(nv_instrument(plane.dd) EQ 'MAP') then return, 1

 if(NOT keyword_set(*plane.cd_p)) then return, 0

 if(class_get(*plane.cd_p) EQ 'MAP') then return, 1

 return, 0
end
;=============================================================================



;=============================================================================
; grim_jump_to_plane
;
;=============================================================================
pro grim_jump_to_plane, grim_data, pn, valid=valid

 if(NOT keyword_set(grim_data)) then grim_data = grim_get_data()

 ;-----------------------------------
 ; verify valid plane
 ;-----------------------------------
 valid = 0
 flags = *grim_data.pl_flags_p

 if(pn GE n_elements(flags)) then return
 if(flags[pn] EQ 0) then return
 valid = 1

 ;-----------------------------------
 ; change to next valid plane
 ;-----------------------------------
 grim_data.pn = pn

 grim_set_data, grim_data
end
;=============================================================================



