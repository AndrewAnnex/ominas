;=============================================================================
; grim_descriptor_notify_handle
;
;=============================================================================
pro grim_descriptor_notify_handle, grim_data, xd, refresh=refresh, new=new
@grim_constants.common

 plane = grim_get_plane(grim_data)
 planes = grim_get_plane(grim_data, /all)
 nplanes = n_elements(planes)

 new = 0

 ;-----------------------------------------------------------------
 ; if the data descriptor of the current plane is affected, then 
 ; remember to refresh the image
 ;-----------------------------------------------------------------
 use_pixmap = 1
 idp = nv_extract_idp(xd)
 w = where(idp EQ nv_extract_idp(plane.dd))
 if(w[0] NE -1) then $
  begin
   if(nv_update(plane.dd) EQ 1) then new = 1 $
   else $
    begin
     refresh = 1
     use_pixmap = 0
    end
  end

 ;---------------------------------------------------------------------------
 ; call source routines for overlays that depend on any affected descriptors
 ;---------------------------------------------------------------------------
 for j=0, nplanes-1 do $
  begin
   points_ps = grim_cat_points(grim_data, plane=planes[j])
   n = n_elements(points_ps)

   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
   ; build a list of source functions and dependencies
   ; such that each source function is called only once.
   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
   name_list = ''
   dep_list = ptr_new()
   points_ps_list = ptr_new()

   if(keyword_set(points_ps)) then $
    for i=0, n-1 do $
     begin
      pgs_points, points_ps[i], uname='grim_dep', udata=dep
      if(keyword_set(dep)) then $
       begin
        w = where(dep EQ idp)
        if(w[0] NE -1) then $
         begin
          pgs_points, points_ps[i], uname='grim_name', udata=name

          w = where(name_list EQ name)
          if(w[0] EQ -1) then $
           begin
            name_list = append_array(name_list, name)
            dep_list = append_array(dep_list, ptr_new(dep))
            points_ps_list = append_array(points_ps_list, ptr_new(points_ps[i]))
            if(plane.pn EQ planes[j].pn) then refresh = 1
           end $
          else $
           begin
            ii= w[0]
            *dep_list[ii] = append_array(*dep_list[ii], dep)
            *points_ps_list[ii] = append_array(*points_ps_list[ii], points_ps[i])
           end 
         end
       end
     end

   ;- - - - - - - - - - - - - - - - - - - - - - - -
   ; get rid of redundant dependencies
   ;- - - - - - - - - - - - - - - - - - - - - - - -
   n = 0
   if(keyword_set(name_list)) then n = n_elements(name_list)
   for i=0, n-1 do $
    begin
     deps = *dep_list[i]
     deps = deps[sort(deps)]
     deps = deps[uniq(deps)]
     *dep_list[i] = deps
    end

   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   ; if the cd time is changed, then all descriptors will need to be reloaded
   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;   if(NOT grim_test_map(grim_data)) then $
;    if(plane.t0 NE bod_time(*plane.cd_p)) then $
;     begin
;      grim_mark_descriptors, grim_data, /all, plane=plane, MARK_STALE
;      for i=0, n-1 do *dep_list[i] = 0		; force everything to recompute.
						; this is not the right way
						; to do this since it destroys
						; all memory of which overlays
						; need to be recomputed
;     end

   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
   ; Call each source function
   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
   for i=0, n-1 do grim_overlay, grim_data, plane=plane, $
                      name_list[i], dep=*dep_list[i], ps=*points_ps_list[i]

   for i=0, n-1 do ptr_free, dep_list[i], points_ps_list[i]
  end

end
;=============================================================================



;=============================================================================
; grim_suspend_events
;
;=============================================================================
pro grim_suspend_events
@grim_block.include

 _suspend_events = 1

end
;=============================================================================



;=============================================================================
; grim_resume_events
;
;=============================================================================
pro grim_resume_events
@grim_block.include

 _suspend_events = 0

end
;=============================================================================



;=============================================================================
; grim_descriptor_notify
;
;=============================================================================
pro grim_descriptor_notify, events, refresh=refresh, new=new
@grim_block.include

 widget_control, /hourglass

 if(keyword_set(_suspend_events)) then return

 n = n_elements(events)

 ;-------------------------------------------
 ; handle events one at a time
 ;-------------------------------------------
 for i=0, n-1 do $
  begin
   grim_data = 0
   top = long(events[i].data)
   xd = events[i].xd
   grim_data = grim_get_data(top)
   plane = grim_get_plane(grim_data)

; if(NOT keyword_set(grim_data)) then nv_notify_unregister, xd, ...

   ;- - - - - - - - - - - - - - - - - - - -
   ; handle the event
   ;- - - - - - - - - - - - - - - - - - - -
   if(keyword_set(grim_data)) then $
                grim_descriptor_notify_handle, grim_data, xd, refresh=refresh, new=new

   ;- - - - - - - - - - - - - - - - - - - -
   ; open a new grim window if necessary
   ;- - - - - - - - - - - - - - - - - - - -
   if((events[i].desc EQ 'DATA') OR (events[i].desc EQ 'ALL')) then $
    if(keyword_set(new)) then $
     begin
stop
; this is not working.  You just get an infinite number of events and new grim windows.
help, events[i].xd
      sibling_dd = nv_sibling(plane.dd)

      new = 0
;      if(NOT ptr_valid(plane.sibling_dd)) then new = 1 $
;      else if(sibling_dd NE plane.sibling_dd) then new = 1

      if(ptr_valid(plane.sibling_dd)) then  $
      if(sibling_dd NE plane.sibling_dd) then new = 1

;nv_suspend_events
      if(new) then grim, /new, sibling_dd
;nv_resume_events
      plane.sibling_dd = sibling_dd

      grim_set_plane, grim_data, plane
     end 

  end

 ;-------------------------------------------
 ; refresh grim if necessary
 ;-------------------------------------------
 if(keyword_set(refresh)) then grim_refresh, grim_data, use_pixmap=use_pixmap

end
;=============================================================================



;=============================================================================
; grim_rm_descriptor
;
;=============================================================================
pro grim_rm_descriptor, grim_data, plane=plane, _xd

 ;----------------------------------
 ; remove the descriptor
 ;----------------------------------
 ptr = 0
 if(size(_xd, /type) EQ 10) then ptr = 1

 if(ptr) then $
  begin
   if(NOT ptr_valid(_xd)) then return
   xd = *_xd
  end $
 else xd = _xd

 if(NOT keyword_set(xd)) then return


 nv_notify_unregister, xd, 'grim_descriptor_notify'
 grim_deactivate_xd, plane, xd


 ;----------------------------------
 ; remove its overlays
 ;----------------------------------
 for i=0, n_elements(xd)-1 do $
  begin
   idp = nv_extract_idp(xd[i])
   ps = grim_get_object_overlays(plane, xd[i])
   if(keyword_set(ps)) then nv_notify_unregister, ps, 'grim_descriptor_notify'
  end

 nv_free, xd

 if(ptr) then *_xd = 0
end
;=============================================================================



;=============================================================================
; grim_mark_descriptor
;
;=============================================================================
pro grim_mark_descriptor, xd, val
 for i=0, n_elements(xd)-1 do if(keyword_set(xd[i])) then cor_set_udata, xd[i], 'grim_status', val
end
;=============================================================================



;=============================================================================
; grim_demark_descriptor
;
;=============================================================================
function grim_demark_descriptor, xd
 if(NOT ptr_valid(xd)) then return, 0
 return, cor_udata(xd, 'grim_status')
end
;=============================================================================



;=============================================================================
; grim_mark_descriptors
;
;=============================================================================
pro grim_mark_descriptors, grim_data, all=all, $
     cd=cd, pd=pd, rd=rd, sd=sd, std=std, sund=sund, planes=planes, $
     val

 if(NOT keyword_set(planes)) then planes = grim_get_plane(grim_data)
 n = n_elements(planes)

 for i=0, n-1 do $
  begin
   ;----------------------------------
   ; clear descriptors
   ;----------------------------------
   if((keyword_set(all)) OR (keyword_set(cd))) then $
                                grim_mark_descriptor, *planes[i].cd_p, val
   if((keyword_set(all)) OR (keyword_set(pd))) then $
                                grim_mark_descriptor, *planes[i].pd_p, val
   if((keyword_set(all)) OR (keyword_set(rd))) then $
                                grim_mark_descriptor, *planes[i].rd_p, val
   if((keyword_set(all)) OR (keyword_set(sd))) then $
                                grim_mark_descriptor, *planes[i].sd_p, val
   if((keyword_set(all)) OR (keyword_set(std))) then $
                                grim_mark_descriptor, *planes[i].std_p, val
   if((keyword_set(all)) OR (keyword_set(sund))) then $
                                grim_mark_descriptor, *planes[i].sund_p, val
  end


end
;=============================================================================



;=============================================================================
; grim_add_descriptor
;
;=============================================================================
pro grim_add_descriptor, grim_data, xdp, xd, one=one, replace=replace, $
                         noregister=noregister
@grim_constants.common

 if(NOT keyword_set(xd)) then return
 plane = grim_get_plane(grim_data)

 grim_mark_descriptor, xd, MARK_FRESH

 ;------------------------------------------------------
 ; when the list contains no descriptors or /replace
 ;------------------------------------------------------
 if(NOT keyword_set(*xdp) OR keyword_set(replace)) then $
  begin
   if(keyword_set(*xdp)) then $
            grim_rm_descriptor, grim_data, plane=plane, xdp

   *xdp = xd
   if(NOT keyword_set(noregister)) then $
              nv_notify_register, xd, 'grim_descriptor_notify', $
                                                   scalar_data=grim_data.base
   return
  end

 ;-----------------------------------------------
 ; when only one descriptor is allowed   
 ;-----------------------------------------------
 if(keyword_set(one)) then $
  begin
   *xdp = xd
   grim_descriptor_notify_handle, grim_data, xd
   return
  end

 ;-------------------------------------------------------------------
 ; multiple descriptors allowed --
 ;  replace or append depending on whether a descriptor with
 ;  this name already exists.
 ; If not homogenous, then find the highest common class.
 ;-------------------------------------------------------------------
 nxd = n_elements(xd)
 for i=0, nxd-1 do $
  begin
   w = where(cor_name(*xdp) EQ cor_name(xd[i]))
   if(w[0] EQ -1) then $
    begin
     *xdp = class_homogenize([*xdp, xd[i]])
;     if(class_get(xd[i]) NE class_get((*xdp)[0])) then $
;                                *xdp = class_homogenize([xd, *xdp]) $
;     else *xdp = [*xdp, xd[i]]

     if(NOT keyword_set(noregister)) then $
           nv_notify_register, xd[i], 'grim_descriptor_notify', $
                                                   scalar_data=grim_data.base
    end $
   else $
    begin
     (*xdp)[w[0]] = xd[i]
     grim_descriptor_notify_handle, grim_data, xd[i]
    end
  end


end
;=============================================================================






;=============================================================================
; grim_get_cameras
;
;=============================================================================
function grim_get_cameras, grim_data, idp=idp, replace=replace, plane=plane
@grim_constants.common

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 idp = ptr_new()


 mark = grim_demark_descriptor((*plane.cd_p)[0])
 if(mark EQ MARK_FRESH) then cd = *plane.cd_p $
 else $
  begin
;   grim_clear_objects, grim_data, /cd, plane=plane

   ;------------------------------------------------
   ; get camera and map descriptors
   ;------------------------------------------------
   cd0 = *plane.cd_p
   t = ''
   if(keyword_set(cd0)) then $
    begin
     if(keyword_set(class_extract(cd0, 'BODY'))) then t = bod_time(cd0)
     orient = bod_orient(cd0)
    end

   grim_message, /clear
   cd = pg_get_cameras(plane.dd, plane.trs_cd, cam_time=t, orient=orient)
   md = pg_get_maps(plane.dd)
   grim_message

   if(NOT keyword_set(cd)) then $
    if(NOT keyword_set(md)) then return, 0

   map = grim_test_map(grim_data)
   if(keyword_set(md)) then map = 1

   ;------------------------------------------------
   ; if not a map, then cd is camera descriptor
   ;------------------------------------------------
   if(NOT map) then $
    begin
     grim_add_descriptor, grim_data, plane.cd_p, cd, /one, replace=replace 
     plane.t0 = bod_time(cd)
     grim_set_plane, grim_data, plane;, pn=plane.pn
    end $

   ;------------------------------------------------------------------
   ; otherwise, cd is map descriptor and od is camera descriptor
   ;------------------------------------------------------------------
   else $
    begin
     grim_add_descriptor, grim_data, plane.cd_p, md, /one
     if(keyword_set(cd)) then $
                 grim_add_descriptor, grim_data, plane.od_p, cd, /one
    end
  end

 idp = nv_extract_idp(*plane.cd_p)

 return, *plane.cd_p
end
;=============================================================================



;=============================================================================
; grim_get_planets
;
;=============================================================================
function grim_get_planets, grim_data, idp=idp, $
                       replace=replace, plane=plane, names=names
@grim_constants.common

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 idp = ptr_new()


 ;---------------------------------------------------------------------
 ; determine whether to load planet descriptors
 ;  since the sun is included as a planet, we may still need to load
 ;  planet descriptors, even if the array is already populated
 ;---------------------------------------------------------------------
 load = 0
 _pd = *plane.pd_p
 mark = grim_demark_descriptor(_pd[0])
 if(mark NE MARK_FRESH) then $
  begin
;   grim_clear_objects, grim_data, /pd, plane=plane
   load = 1
  end $
 else $
   if((n_elements(_pd) EQ 1) AND (cor_name(_pd[0]) EQ 'SUN')) then load = 1


 ;---------------------------------------------------------------------
 ; get descriptors
 ;---------------------------------------------------------------------
; if(keyword_set(*plane.pd_p)) then pd = get_object_by_name(*plane.pd_p, names) $
 if(NOT load) then pd = get_object_by_name(*plane.pd_p, names) $
 else $
  begin
   pd = pg_get_planets(plane.dd, od=*plane.cd_p, sd=*plane.sund_p, plt_name=names, plane.trs_pd)
   if(NOT keyword_set(pd)) then return, 0

   names = cor_name(pd)
   w = where(names NE 'UNKNOWN')
   if(w[0] EQ -1) then return, 0
   pd = pd[w]

   grim_add_descriptor, grim_data, plane.pd_p, pd, replace=replace
  end

 idp = nv_extract_idp(pd)


 return, pd
end
;=============================================================================



;=============================================================================
; grim_get_sun
;
;=============================================================================
function grim_get_sun, grim_data, idp=idp, replace=replace, plane=plane
@grim_constants.common

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 idp = ptr_new()

 mark = grim_demark_descriptor((*plane.sund_p)[0])
 if(mark EQ MARK_FRESH) then sund = get_object_by_name(*plane.sund_p, names) $
 else $
  begin
;   grim_clear_objects, grim_data, /sund, plane=plane

   ; can use a planet instead of the sun if 'name' translator keyword is given
   kv = nv_parse_keyvals(nv_parse_transient_keyvals(plane.trs_sund), keywords=keywords)
   nv_free, kv  

   star = 1
   if(keyword_set(keywords)) then $
    begin
     w = where(keywords EQ 'name')
     if(w[0] NE -1) then star = 0
    end 

   if(star) then sund = pg_get_stars(plane.dd, od=*plane.cd_p, str_name='SUN', plane.trs_sund) $
   else $
    begin
     pd = (pg_get_planets(plane.dd, od=*plane.cd_p, plane.trs_sund))[1]
     sund = str_init_descriptors(1, gbd=plt_globe(pd))
    end
   if(NOT keyword_set(sund)) then return, 0

   grim_add_descriptor, grim_data, plane.sund_p, sund, /one, replace=replace

   ; add sun as planet as well
;   grim_add_descriptor, grim_data, plane.pd_p, sund, replace=replace
  end

 idp = nv_extract_idp(sund)


 return, sund
end
;=============================================================================



;=============================================================================
; grim_get_stars
;
;=============================================================================
function grim_get_stars, grim_data, idp=idp, replace=replace, silent=silent, $
          plane=plane, names=names
@grim_constants.common

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 idp = ptr_new()

 mark = grim_demark_descriptor((*plane.sd_p)[0])
 if((mark EQ MARK_FRESH) AND NOT keyword_set(replace)) then $
                                  sd = get_object_by_name(*plane.sd_p, names) $
 else $
  begin
;   grim_clear_objects, grim_data, /sd, plane=plane

   ;---------------------------------------------------
   ; determine ra/dec bounds based on fov setting
   ;---------------------------------------------------
   cd = *plane.cd_p
   slop = 1.1

   ;- - - - - - - - - - - - - - - - - - - - - - - - - -
   ; fov = 0: get bounds from current view
   ;- - - - - - - - - - - - - - - - - - - - - - - - - -
   if(plane.fov EQ 0) then $
    begin
     p = convert_coord(/device, /to_data, 0, 0)
     q = convert_coord(/device, /to_data, !d.x_size-1, !d.y_size-1)

     x0 = min([p[0], q[0]])
     x1 = max([p[0], q[0]])
     y0 = min([p[1], q[1]])
     y1 = max([p[1], q[1]])
    end $
   ;- - - - - - - - - - - - - - - - - - - - - - - - - -
   ; fov != 0: bounds are relative to camera fov
   ;- - - - - - - - - - - - - - - - - - - - - - - - - -
   else $
    begin
     nx = cam_nx(cd)
     ny = cam_ny(cd)
     x0 = 0 & x1 = nx-1
     y0 = 0 & y1 = ny-1
     slop = plane.fov + 0.5
    end

   nx = x1-x0 & ny = y1-y0
   xslop = (slop-1d) * nx
   yslop = (slop-1d) * ny
   x0 = x0 - xslop & x1 = x1 + xslop;
   y0 = y0 - yslop & y1 = y1 + yslop

   corners = [ [x0, y0],$
               [x0, y1], $
               [x1, y0], $
               [x1, y1] ]

   radec = image_to_radec(cd, corners)


   ;---------------------------------------------------
   ; get stars
   ;---------------------------------------------------

   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   ; first check other planes for a similar star descriptor set
   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   plane.cradec = total(radec, 1)/4.
   plane.dradec = transpose([maxdev(radec[*,0]), maxdev(radec[*,1]), 1d])
   grim_set_plane, grim_data, plane, pn=plane.pn
   f = 0.1

   copy = -1

   planes = grim_get_plane(grim_data, /all)
   nplanes = n_elements(planes)
   for i=0, nplanes-1 do if(plane.pn NE i) then $
    begin
     if(planes[i].cradec[2] EQ 1) then $ 
      if(planes[i].trs_sd EQ plane.trs_sd) then $
       if((planes[i].dradec[0]-plane.dradec[0] LT 0.1*plane.dradec[0]) $
            AND (planes[i].dradec[1]-plane.dradec[1] LT f*plane.dradec[1])) then $
        begin
         angle = (radec_angle(plane.cradec, planes[i].cradec))[0]
         if(angle LT f*plane.dradec[0]) then $
          if(angle LT f*plane.dradec[1]) then $
           if(keyword_set(*planes[i].sd_p)) then copy = i
        end
    end


   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   ; get stars from translators if no similar set exists
   ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   if(copy NE -1) then sd = str_clone_descriptor(*planes[copy].sd_p) $
   else sd = pg_get_stars(plane.dd, od=*plane.cd_p, $
                     /no_sort, str_name=names, plane.trs_sd, corners=corners)
   if(NOT keyword_set(sd)) then $
    begin
     grim_rm_descriptor, grim_data, plane=plane, plane.sd_p
     grim_set_plane, grim_data, plane
     return, 0
    end

   if(keyword_set(sd[0])) then $
              grim_add_descriptor, grim_data, plane.sd_p, sd, replace=replace
  end

 idp = nv_extract_idp(sd)


 return, sd
end
;=============================================================================



;=============================================================================
; grim_get_rings
;
;=============================================================================
function grim_get_rings, grim_data, idp=idp, $
                                    replace=replace, plane=plane, names=names
@grim_constants.common

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 idp = ptr_new()

 mark = grim_demark_descriptor((*plane.rd_p)[0])
 if(mark EQ MARK_FRESH) then rd = get_object_by_name(*plane.rd_p, names) $
 else $
  begin
;   grim_clear_objects, grim_data, /rd, plane=plane

   rd = pg_get_rings(plane.dd, $
                  od=*plane.cd_p, pd=*plane.pd_p, rng_name=names, plane.trs_rd)

   if(NOT keyword_set(rd)) then return, 0

   grim_add_descriptor, grim_data, plane.rd_p, rd, replace=replace
  end

 idp = nv_extract_idp(rd)


 return, rd
end
;=============================================================================



;=============================================================================
; grim_get_stations
;
;=============================================================================
function grim_get_stations, grim_data, idp=idp, $
                                    replace=replace, plane=plane, names=names
@grim_constants.common

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 idp = ptr_new()

 mark = grim_demark_descriptor((*plane.std_p)[0])
 if(mark EQ MARK_FRESH) then std = get_object_by_name(*plane.std_p, names) $
 else $
  begin
;   grim_clear_objects, grim_data, /rd, plane=plane

   std = pg_get_stations(plane.dd, $
                  od=*plane.cd_p, pd=*plane.pd_p, stn_name=names, plane.trs_std)
   if(NOT keyword_set(std)) then return, 0

   grim_add_descriptor, grim_data, plane.std_p, std, replace=replace
  end

 idp = nv_extract_idp(std)


 return, std
end
;=============================================================================












;=============================================================================
; grim_load_descriptors
;
;=============================================================================
pro grim_load_descriptors, grim_data, name, plane=plane, class=class, $
       idp_cam=idp_cam, idp_plt=idp_plt, idp_rng=idp_rng, $
       idp_sun=idp_sun, idp_str=idp_str, idp_stn=idp_stn, obj_name=obj_name, replace=replace, gd=gd

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 junk = grim_get_overlay_psp(grim_data, name, plane=plane, $
                                                   class=class, dep=dep)
 dep = append_array(dep, class)

 if(NOT keyword_set(obj_name)) then obj_name = ''

 ;----------------------------------------------------------------
 ; load descriptors based on dependencies for this type of object
 ;----------------------------------------------------------------
 cd = (pd = (rd = (sund = (sd = (std = 0)))))

 cd = grim_get_cameras(grim_data, idp=idp_cam, plane=plane)
 if(NOT keyword_set(idp_cam[0])) then return

 if(keyword_set(class_extract(cd, 'CAMERA'))) then $
  begin
   if((where(dep EQ 'sun'))[0] NE -1) then $
           sund = grim_get_sun(grim_data, idp=idp_sun, plane=plane)

   if((where(dep EQ 'planet'))[0] NE -1) then $
    begin
     names = ''
     if(class EQ 'planet') then names = obj_name
     pd = grim_get_planets(grim_data, idp=idp_plt, plane=plane, names=names, replace=replace)
    end

   if((where(dep EQ 'ring'))[0] NE -1) then $
    begin
     names = ''
     if(class EQ 'ring') then names = obj_name
     rd = grim_get_rings(grim_data, idp=idp_rng, plane=plane, names=names, replace=replace)
    end

   if((where(dep EQ 'star'))[0] NE -1) then $
    begin
     names = ''
     if(class EQ 'star') then names = obj_name
     sd = grim_get_stars(grim_data, idp=idp_str, plane=plane, names=names, replace=replace)
    end

   if((where(dep EQ 'station'))[0] NE -1) then $
    begin
     names = ''
     if(class EQ 'star') then names = obj_name
     std = grim_get_stations(grim_data, idp=idp_stn, plane=plane, names=names, replace=replace)
    end
  end


 gd = {cd: cd, $
       pd: pd, $
       rd: rd, $
       sund: sund, $
       sd: sd, $
       std: std, $
       od: 0}

end
;=============================================================================






