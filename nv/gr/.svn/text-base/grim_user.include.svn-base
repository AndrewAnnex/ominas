;=============================================================================
; grim_user_ps_struct__define
;
;=============================================================================
pro grim_user_ps_struct__define

 struct = $
    { grim_user_ps_struct, $
	user_psp	:	ptr_new(), $
	color		:	'', $
	psym		:	0, $
	symsize		:	0. $
    }


end
;=============================================================================



;=============================================================================
; grim_add_user_points
;
;=============================================================================
pro grim_add_user_points, user_ps, tag, update=update, $
                  color=color, psym=psym, symsize=symsize, $
                  nodraw=nodraw, inactive=inactive, $
                  no_refresh=no_refresh, plane=plane

 if(NOT keyword_set(tag)) then tag = 'no_name'
 if(NOT keyword_set(symsize)) then symsize = 1

 grim_data = grim_get_data()
 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 pn = plane.pn

 n = n_elements(user_ps)
 for i=0, n-1 do if(pgs_valid(user_ps[i])) then $
          user_ps[i] = pgs_set_points(user_ps[i], name=tag)

 if(NOT keyword_set(color)) then color = 'purple'
 if(NOT keyword_set(psym)) then psym = grim_data.default_user_psym

 user_struct = {grim_user_ps_struct}
 user_struct.user_psp = ptr_new(user_ps)
 user_struct.color = color
 user_struct.psym = psym
 user_struct.symsize=symsize

 tlp = plane.user_ps_tlp
 if(keyword_set(update)) then $
                        if((tag_list_match(tlp, tag))[0] EQ -1) then return

 tag_list_set, tlp, tag, user_struct, new=new, index=index
 plane.user_ps_tlp = tlp
 grim_set_plane, grim_data, plane, pn=pn

 if(NOT keyword_set(inactive)) then $
                   grim_activate_user_overlay, plane, index

 if(keyword_set(nodraw)) then return

 if(NOT keyword_set(no_refresh)) then grim_refresh, grim_data, /use_pixmap

end
;=============================================================================



;=============================================================================
; grim_test_active_user_ps
;
;=============================================================================
function grim_test_active_user_ps, plane, tag, prefix=prefix

 if(NOT keyword_set(*plane.active_user_tags_p)) then return, 0

 w = tag_list_match(*plane.active_user_tags_p, tag, prefix=prefix)
 if(w[0] NE -1) then return, 1

 return, 0
end
;=============================================================================



;=============================================================================
; grim_get_user_ps
;
;=============================================================================
function grim_get_user_ps, tag, prefix=prefix, $
           plane=plane, color=color, psym=psym, symsize=symsize, $
           tags=tags, active=active

 if(NOT keyword_set(plane)) then $
  begin
   grim_data = grim_get_data()
   plane = grim_get_plane(grim_data)
  end

 if(NOT keyword_set(plane.user_ps_tlp)) then return, 0
 if(NOT ptr_valid(plane.user_ps_tlp)) then return, 0

 if(NOT keyword_set(tag)) then tag = (*plane.user_ps_tlp).name

 n = n_elements(tag)

 user_ps = 0
 for i=0, n-1 do $
  begin
   user_struct = tag_list_get(plane.user_ps_tlp, tag[i], prefix=prefix)
   nu = n_elements(user_struct)
   if(keyword_set(user_struct)) then $
    if((NOT keyword_set(active)) OR $
        grim_test_active_user_ps(plane, tag[i], prefix=prefix)) then $
     begin
      if(NOT keyword_set(user_ps)) then $
       begin
        for j=0, nu-1 do $
            if(keyword_set(*user_struct[j].user_psp)) then $
                    user_ps = append_array(user_ps, *user_struct[j].user_psp)
        color = user_struct.color
        psym = user_struct.psym
        symsize = user_struct.symsize
        tags = tag[i]
       end $
      else $
       begin
        _user_ps = replicate({pg_points_struct}, nu)
;        for j=0, nu-1 do _user_ps[j] = *user_struct[j].user_psp
        for j=0, nu-1 do _user_ps[j] = (*user_struct[j].user_psp)[0]
        user_ps = [user_ps, _user_ps]
        color = [color, user_struct.color]
        psym = [psym, user_struct.psym]
        symsize = [symsize, user_struct.symsize]
        tags = [tags, tag[i]]
       end
     end
  end


 return, user_ps
end
;=============================================================================



;=============================================================================
; grim_get_active_user_overlays
;
;=============================================================================
pro grim_get_active_user_overlays, plane, $
                         active_tags=active_tags, inactive_tags=inactive_tags

 if(NOT ptr_valid(plane.user_ps_tlp)) then return

 tags = (*plane.user_ps_tlp).name
 nuser = n_elements(tags)

 active_indices = -1
 inactive_indices = lindgen(nuser)
 inactive_tags = tags[inactive_indices]
 

 if(NOT keyword__set(*plane.active_user_tags_p)) then return
 active_user_tags = *plane.active_user_tags_p

 w = nwhere(tags, active_user_tags)
 if(w[0] EQ -1) then return

 active_indices = w
 inactive_indices = complement(tags, active_indices)

 inactive_tags = ''
 if(active_indices[0] NE -1) then active_tags = tags[active_indices]
 if(inactive_indices[0] NE -1) then inactive_tags = tags[inactive_indices]

end
;=============================================================================



;=============================================================================
; grim_trim_user_overlays
;
;=============================================================================
pro grim_trim_user_overlays, grim_data, plane=plane, region

 if(NOT keyword_set(plane)) then plane = grim_get_plane(grim_data)

 ps = grim_get_user_ps(plane=plane)
 if(keyword_set(ps)) then pg_trim, 0, ps, region

end
;=============================================================================



;=============================================================================
; grim_activate_user_overlay
;
;=============================================================================
pro grim_activate_user_overlay, plane, indices

 if(indices[0] EQ -1) then return
 if(NOT ptr_valid(plane.user_ps_tlp)) then return

 tags = (*plane.user_ps_tlp).name
 active_user_tags = *plane.active_user_tags_p
 given_user_tags = tags[indices]

 ;---------------------------------------------
 ; determine which user_ps are already active
 ;---------------------------------------------
 n = n_elements(given_user_tags)
 w = [-1]
 ww = lindgen(n)

 if(keyword__set(active_user_tags)) then $
  begin
   w = nwhere(given_user_tags, active_user_tags)
   ww = complement(indices, w)
  end

 ;---------------------------------------------
 ; activate inactive user_ps
 ;---------------------------------------------
 if(ww[0] NE -1) then $
  begin
   if(NOT keyword__set(active_user_tags)) then $
                              *plane.active_user_tags_p = given_user_tags[ww] $
   else *plane.active_user_tags_p = [active_user_tags, given_user_tags[ww]]
  end


end
;=============================================================================



;=============================================================================
; grim_deactivate_user_overlay
;
;=============================================================================
pro grim_deactivate_user_overlay, plane, indices

 if(indices[0] EQ -1) then return
 if(NOT ptr_valid(plane.user_ps_tlp)) then return

 tags = (*plane.user_ps_tlp).name
 active_user_tags = *plane.active_user_tags_p
 if(NOT keyword__set(active_user_tags)) then return
 given_user_tags = tags[indices]

 ;---------------------------------------------
 ; determine which user_ps are already active
 ;---------------------------------------------
 n = n_elements(given_user_tags)
 w = [-1]
 ww = lindgen(n)

 w = nwhere(active_user_tags, given_user_tags)
 ww = complement(indices, w)

 ;---------------------------------------------
 ; activate inactive user_ps
 ;---------------------------------------------
 if(w[0] NE -1) then $
  begin
    *plane.active_user_tags_p = $
                  rm_list_item(*plane.active_user_tags_p, w, only='')
    if(NOT keyword__set((*plane.active_user_tags_p)[0])) then $
                                                *plane.active_user_tags_p = ''
  end


end
;=============================================================================



;=============================================================================
; grim_clear_user_overlays
;
;=============================================================================
pro grim_clear_user_overlays, plane, tags

 ;------------------------------------------
 ; get tags of active user overlays
 ;------------------------------------------
; grim_get_active_user_overlays, plane, active_tags=active_tags
; if(NOT keyword__set(active_tags)) then return

 ;------------------------------------------
 ; remove active user overlays
 ;------------------------------------------
 n = n_elements(tags)
 for i=0, n-1 do tag_list_rm, plane.user_ps_tlp, tags[i]

; if(NOT keyword__set((*plane.user_ps_tlp)[0])) then ptr_free, plane.user_ps_tlp

 ;------------------------------------------
 ; clear active user overlay array
 ;------------------------------------------
; *plane.active_user_tags_p = ''


end
;=============================================================================



;=============================================================================
; grim_clear_active_user_overlays
;
;=============================================================================
pro grim_clear_active_user_overlays, plane

 ;------------------------------------------
 ; get tags of active user overlays
 ;------------------------------------------
 grim_get_active_user_overlays, plane, active_tags=active_tags
 if(NOT keyword__set(active_tags)) then return

 ;------------------------------------------
 ; remove active user overlays
 ;------------------------------------------
 n = n_elements(active_tags)
 for i=0, n-1 do tag_list_rm, plane.user_ps_tlp, active_tags[i]

; if(NOT keyword__set((*plane.user_ps_tlp)[0])) then ptr_free, plane.user_ps_tlp

 ;------------------------------------------
 ; clear active user overlay array
 ;------------------------------------------
 *plane.active_user_tags_p = ''


end
;=============================================================================



;=============================================================================
; grim_invert_active_user_overlays
;
;=============================================================================
pro grim_invert_active_user_overlays, plane

 if(NOT ptr_valid(plane.user_ps_tlp)) then return

 ;---------------------------------------------------------
 ; determine which psp are currently active/inactive
 ;---------------------------------------------------------

 tags = (*plane.user_ps_tlp).name
 active_user_tags = *plane.active_user_tags_p

 nps = n_elements(tags)

 w = [-1]
 ww = lindgen(nps)

 if(keyword__set(active_user_tags)) then $
  begin
   w = nwhere(tags, active_user_tags)		; active
   ww = complement(tags, w)			; inactive
  end

 ;---------------------------------------------
 ; deactivate active objects
 ;---------------------------------------------
 if(w[0] NE -1) then grim_deactivate_user_overlay, plane, w

 ;---------------------------------------------
 ; activate previously inactive objects
 ;---------------------------------------------
 if(ww[0] NE -1) then grim_activate_user_overlay, plane, ww

 
end
;=============================================================================



;=============================================================================
; grim_set_user_data
;
;=============================================================================
pro grim_set_user_data, grim_data, tag, data

 tlp = grim_data.user_tlp
 tag_list_set, tlp, tag, data

 grim_data.user_tlp = tlp

 grim_set_data, grim_data, grim_data.base
end
;=============================================================================



;=============================================================================
; grim_get_user_data
;
;=============================================================================
function grim_get_user_data, grim_data, tag

 tlp = grim_data.user_tlp
 data = tag_list_get(tlp, tag)

 return, data
end
;=============================================================================



