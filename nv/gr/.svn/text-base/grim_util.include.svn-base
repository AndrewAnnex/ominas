;=============================================================================
; grim_parse_overlay
;
;  fn:name1,name2,...
;
;=============================================================================
function grim_parse_overlay, overlay, names

 names = ''

 s = str_split(overlay, ':')
 fn = s[0]
 if(n_elements(s) GT 1) then names = strupcase(str_nsplit(s[1], ','))

 return, fn
end
;=============================================================================



;=============================================================================
; grim_get_cursor_swap
;
;=============================================================================
function grim_get_cursor_swap, grim_data

 swap = 0
 if(grim_data.cursor_swap EQ -1) then $
  begin
   if(test_endian()) then swap= 1
  end $
 else if(grim_data.cursor_swap EQ 1) then swap = 1

 return, swap
end
;=============================================================================



;=============================================================================
; grim_wset
;
;=============================================================================
pro grim_wset, grim_data, wnum, get_info=get_info, $
    save=save, noplot=noplot, silent=silent

 if(grim_data.type EQ 'plot') then tvgr, wnum, get_info=get_info, $
     save=save, noplot=noplot, silent=silent $
 else tvim, wnum, get_info=get_info, $
     save=save, noplot=noplot, silent=silent 

end
;=============================================================================



;=============================================================================
; grim_logging_callback
;
;=============================================================================
pro grim_logging_callback, data_p, message
 grim_data = *data_p 

 grim_print, grim_data, message
end
;=============================================================================



;=============================================================================
; grim_logging
;
;=============================================================================
pro grim_logging, grim_data, start=start, stop=stop
common grim_logging_block, data_p=data_p

 tag = 'GRIM_LOGGING-'+strtrim(grim_data.base,2)

 if(keyword_set(start)) then $
  begin
   data_p = ptr_new(grim_data)
   nv_message, callback='grim_logging_callback', cb_tag=tag, cb_data_p=data_p
  end $
 else $
  begin
   nv_message, cb_tag=tag, /disconnect
   ptr_free, data_p
   grim_print, grim_data, ''
  end

end
;=============================================================================



;=============================================================================
; grim_flash
;
;=============================================================================
pro grim_flash, p
common grim_flash_block, pixmap


 wnum = !d.window
 xs = !d.x_size
 ys = !d.y_size

 x = p[0]
 y = p[1]

 s = 32.
 s2 = s/2.
 if(NOT keyword_set(pixmap)) then $
  begin
   window, /free, /pixmap, xsize=s+2, ysize=s+2
   pixmap = !d.window
  end

 wset, pixmap
 device, copy=[x-s2,y-s2,s,s,0,0,wnum]
 wset, wnum

; plots, p-[5,0], psym=7, symsize=1., col=ctwhite(), /device, th=2

 plots, p-[1,0], psym=4, symsize=1.5, col=ctyellow(), /device, th=4
 plots, p-[5,0], psym=4, symsize=1.0, col=ctyellow(), /device, th=3
 plots, p-[9,0], psym=4, symsize=0.5, col=ctyellow(), /device, th=2

 plots, p-[1,0], psym=4, symsize=1.0, col=ctred(), /device, th=4
 plots, p-[5,0], psym=4, symsize=0.5, col=ctred(), /device, th=3

 plots, p-[5,0], psym=4, symsize=0.5, col=ctyellow(), /device, th=2

 wait, 0.01
 device, copy=[0,0,s,s,x-s2,y-s2,pixmap]

end
;=============================================================================



;=============================================================================
; grim_menu_delim_event
;
;=============================================================================
pro grim_menu_delim_event, event
end
;=============================================================================



;=============================================================================
; grim_parse_form_entry
;
;=============================================================================
function grim_parse_form_entry, ids, tags, tag, null=null, drop=drop, $
                                            numeric=numeric, string=string

 i = (where(strupcase(tags) EQ strupcase(tag)))[0]

 if(NOT keyword_set(drop)) then $
  begin   
   widget_control, ids[i], get_value=value

   null = 1
   if(NOT keyword_set(numeric)) then $
               if((strmid(value, 0, 1))[0] EQ '-') then return, 0
   null = 0

   if((size(value, /type) EQ 7) AND (NOT keyword_set(string))) then $
                                    value = str_sep(strtrim(value,2), ' ')
  end $
 else value = widget_info(ids[i], /droplist_select)

 if(keyword_set(string)) then value = value[0]

 return, value
end
;=============================================================================



;=============================================================================
; grim_set_form_entry
;
;=============================================================================
pro grim_set_form_entry, ids, tags, tag, value, drop=drop, cwbutton=cwbutton, $
        sensitive=sensitive

 i = (where(tags EQ tag))[0]

 if(n_elements(sensitive) NE 0) then widget_control, ids[i], sensitive=sensitive
 if(n_elements(value) EQ 0) then return

 if(keyword_set(drop)) then widget_control, ids[i], set_droplist_select=value $
 else if(keyword_set(cwbutton)) then $
                                widget_control, ids[i], set_value=value $
 else widget_control, ids[i], set_value = strtrim(value,2) + ' '


end
;=============================================================================



;=============================================================================
; grim_add_callback
;
;=============================================================================
pro grim_add_callback, callbacks, data_ps, callbacks_list, data_ps_list

 if(NOT keyword__set(callbacks_list)) then callbacks_list = 0

 if(n_elements(callbacks) NE n_elements(data_ps)) then $
                       nv_message, 'Inconsistent callback registration.'

 if(NOT keyword__set(callbacks_list[0])) then $
  begin
   callbacks_list = callbacks
   data_ps_list = data_ps
  end $ 
 else $
  begin
   callbacks_list = [callbacks_list, callbacks]
   data_ps_list = [data_ps_list, data_ps]
  end

end
;=============================================================================



;=============================================================================
; grim_rm_callback
;
;=============================================================================
pro grim_rm_callback, data_ps, callbacks_list, data_ps_list

 if(NOT keyword__set(data_ps_list[0])) then return

 w = nwhere(data_ps_list, data_ps)
 if(w[0] EQ -1) then return
 ww = complement(data_ps_list, w)

 if(ww[0] EQ -1) then $
  begin
   callbacks_list = 0
   data_ps_list = 0
  end $
 else $
  begin
   callbacks_list = callbacks_list[ww]
   data_ps_list = data_ps_list[ww]
  end


end
;=============================================================================



;=============================================================================
; grim_call_callbacks
;
;=============================================================================
pro grim_call_callbacks, _callbacks_list, _data_ps_list

 if(NOT keyword__set(_callbacks_list)) then _callbacks_list = 0
 if(NOT keyword__set(_data_ps_list)) then _data_ps_list = 0
 callbacks_list = _callbacks_list
 data_ps_list = _data_ps_list

 if(keyword__set(callbacks_list[0])) then $
  begin
   n = n_elements(callbacks_list)
   for i=0, n-1 do $
    begin
     callback = callbacks_list[i]
     call_procedure, callback, data_ps_list[i]
    end
  end


end
;=============================================================================
