;===========================================================================
; nv_clone_descriptor
;
;===========================================================================
function nv_clone_descriptor, ddp
@nv.include
 nv_notify, ddp, type=1, desc='ALL'
 dd = nv_dereference(ddp)

 new_dd = dd
 new_dd.idp = ptr_new(0)

 if(ptr_valid(dd.data_dap)) then $
                            new_dd.data_dap = data_archive_clone(dd.data_dap)
 if(ptr_valid(dd.header_dap)) then $
                          new_dd.header_dap = data_archive_clone(dd.header_dap)

 if(ptr_valid(dd.dim_p)) then $
               new_dd.dim_p = ptr_new(*dd.dim_p)
 if(ptr_valid(dd.compress_data_p)) then $
               new_dd.compress_data_p = ptr_new(*dd.compress_data_p)
 if(ptr_valid(dd.input_translators_p)) then $
               new_dd.input_translators_p = ptr_new(*dd.input_translators_p)
 if(ptr_valid(dd.output_translators_p)) then $
               new_dd.output_translators_p = ptr_new(*dd.output_translators_p)
 if(ptr_valid(dd.input_translators_p)) then $
               new_dd.input_translators_p = ptr_new(*dd.input_translators_p)
 if(ptr_valid(dd.output_translators_p)) then $
               new_dd.output_translators_p = ptr_new(*dd.output_translators_p)
 if(ptr_valid(dd.input_keyvals_p)) then $
               new_dd.input_keyvals_p = ptr_new(*dd.input_keyvals_p)
 if(ptr_valid(dd.output_keyvals_p)) then $
               new_dd.output_keyvals_p = ptr_new(*dd.output_keyvals_p)
 if(ptr_valid(dd.transient_keyvals_p)) then $
               new_dd.transient_keyvals_p = ptr_new(*dd.transient_keyvals_p)
 if(ptr_valid(dd.udata_tlp)) then new_dd.udata_tlp = $
                                              ptr_copy_recurse(dd.udata_tlp)

 new_dd.sn = nv_get_sn(1)
 new_dd.sibling_dd_h = handle_create()

 new_ddp = ptr_new(new_dd)

 return, new_ddp
end
;===========================================================================
