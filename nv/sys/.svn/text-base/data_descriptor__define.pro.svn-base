;===========================================================================
; data_descriptor__define
;
;
;===========================================================================
pro data_descriptor__define

 struct = $
    { data_descriptor, $
	id_string:		'', $		; Identification string
	sn:			0l, $		; Descriptor serial number

	idp:			ptr_new(), $	; id_ptr
	data_dap:		ptr_new(), $	; Pointer to the data archive
	header_dap:		ptr_new(), $	; Pointer to the generic header archive
        dap_index:		0, $		; data arhive index

	dim_p:			ptr_new(), $	; data dimensions

	filename:		'', $		; Name of source file.
	filetype:		'', $		; Filetype string
	input_transforms_p:	ptr_new(), $	; Input transform function
	output_transforms_p:	ptr_new(), $	; Output transform function
	input_fn:		'', $		; Function to read file
	output_fn:		'', $		; Function to write file
	instrument:		'', $		; Instrument string
	input_translators_p:	ptr_new(), $	; Names of input translators
	output_translators_p:	ptr_new(), $	; Names of output translators
	input_keyvals_p:	ptr_new(), $	; Keyvals for input translators
	output_keyvals_p:	ptr_new(), $	; Keyvals for output translators
	transient_keyvals_p:	ptr_new(), $	; Keyvals parsed per-command
	last_translator:	lonarr(2), $	; Description of last translator
						; called

;	segment:		{nv_seg_struct}, $

	compress:		'', $		; Data compression function suffix
	compress_data_p:	ptr_new(), $

	maintain:		0b, $		; Data maintenance mode:
						;  0: load initially
						;  1: load when needed; retain
						;     only ndd data descriptor
						;     arrays in memory.
						;  2: Load when needed, but
						;     do not retain.

	update:			0, $		; Data update mode:
						; -1: Locked; applies to data, header,
						;     and udata.
						;  0: Normal
						;  1: Clone off a new descriptor 
						;     and leave original dd
						;     unchanged.

	sibling_dd_h:		0l, $		; Handle giving dd spawned as a result
						;  of writing to this descriptor
						;  while update = 1.
						;  Handle is used to protect that dd
						;  from nv_free.

	udata_tlp:		ptr_new() $	; Pointer to user data
    }


end
;===========================================================================


