;===========================================================================
; nv_init_descriptor
;
;
;===========================================================================
function nv_init_descriptor, $
	filename=filename, $
	dim=dim, $
	id_string=id_string, $
	data=data, $
	nhist=nhist, $
	udata=udata, $
	header=header, $
	filetype=filetype, $
	input_fn=input_fn, $
	output_fn=output_fn, $
	instrument=instrument, $
	input_translators=input_translators, $
	output_translators=output_translators, $
	input_transforms=input_transforms, $
	output_transforms=output_transforms, $
	maintain=maintain, compress=compress, $
	tab_translators=tab_translators, silent=silent
@nv.include
 on_error, 1

 if(NOT keyword_set(nhist)) then nhist = 1
 _nhist = getenv('NV_NHIST')
 if(keyword_set(_nhist)) then nhist = fix(_nhist)

 dd={data_descriptor}

 ;---------------------------
 ; handle giving last sibling
 ;--------------------------
 dd.sibling_dd_h = handle_create()

 ;-----------------------
 ; filename
 ;-----------------------
 if(keyword_set(filename)) then dd.filename = filename

 ;-----------------------
 ; identification string
 ;-----------------------
 if(keyword_set(id_string)) then dd.id_string = id_string

 ;-----------------------
 ; serial number
 ;-----------------------
 dd.sn = nv_get_sn()
 dd.idp = ptr_new(0)

 ;-----------------------
 ; maintain
 ;-----------------------
 if(keyword_set(maintain)) then dd.maintain = maintain

 ;-----------------------
 ; compress
 ;-----------------------
 if(keyword_set(compress)) then dd.compress = compress


 ;-----------------------
 ; dimensions
 ;-----------------------
 if(keyword_set(dim)) then dd.dim_p = ptr_new(dim)


 ;-----------------------
 ; user data
 ;-----------------------
 if(keyword_set(udata)) then dd.udata_tlp = udata


 ;-----------------------
 ; file properties
 ;-----------------------
 if(keyword_set(filetype)) then dd.filetype=filetype $
 else dd.filetype = nv_detect_filetype(/default)
 if(keyword_set(input_fn)) then dd.input_fn=input_fn
 if(keyword_set(output_fn)) then dd.output_fn=output_fn


 ;-----------------------
 ; instrument
 ;-----------------------
 if(keyword_set(instrument)) then dd.instrument=instrument $
 else if(keyword_set(filetype) AND keyword_set(header)) then $
  begin
   dd.instrument = nv_detect_instrument(header, udata, filetype, silent=silent)
   if(dd.instrument EQ '') then $
              nv_message, /continue, $
                     'Unable to detect instrument.', name='nv_init_descriptor'
  end


 ;-----------------------
 ; transforms
 ;-----------------------
 if(keyword_set(input_transforms)) then $
                        dd.input_transforms_p = ptr_new(input_transforms)
 if(keyword_set(output_transforms)) then $
                        dd.output_transforms_p = ptr_new(output_transforms)


 ;-----------------------
 ; translators
 ;-----------------------
 if(keyword_set(dd.instrument)) then $
  begin
   nv_lookup_translators, dd.instrument, tab_translators=tab_translators, $
           input_translators, output_translators, input_keyvals, output_keyvals, $
           silent=silent

   if(input_translators[0] EQ '') then $
        nv_message, /continue, 'No input translators available.', $
                                                    name='nv_init_descriptor' $
   else dd.input_translators_p=ptr_new(input_translators)

   if(output_translators[0] EQ '') then $
       nv_message, /continue, 'No output translators available.', $
                                                    name='nv_init_descriptor' $
   else dd.output_translators_p=ptr_new(output_translators)

   if(keyword_set(input_keyvals)) then $
                   dd.input_keyvals_p = ptr_new(nv_parse_keyvals(input_keyvals))
   if(keyword_set(output_keyvals)) then $
                   dd.output_keyvals_p = ptr_new(nv_parse_keyvals(output_keyvals))
  end



 ddp = ptrarr(1)
 nv_rereference, ddp, dd


 ;-----------------------
 ; data and header
 ;-----------------------
 if(defined(data)) then $
  begin
   nv_set_data, ddp, data, /silent
   nv_set_nhist, ddp, nhist
  end  
 
 _header = ''
 if(keyword_set(header)) then _header = header
 nv_set_header, ddp, _header


 return, ddp
end
;===========================================================================



