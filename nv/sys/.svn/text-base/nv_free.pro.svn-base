;=============================================================================
; nvf_recurse
;=============================================================================
pro nvf_recurse, p

 type = size(p, /type)

 if(type EQ 10) then $
  begin
   n = n_elements(p)
   for i=0, n-1 do if(ptr_valid(p[i])) then nvf_recurse, *p[i]
   ptr_free, p
  end $
 else if(type EQ 8) then $
  begin
   n = n_elements(p)
   for i=0, n-1 do $
    begin
     ntags = n_tags(p[i])
     for j=0, ntags-1 do nvf_recurse, p[i].(j)
    end

  end


end
;=============================================================================



;=============================================================================
; nv_free
;
;=============================================================================
pro nv_free, dp
@nv.include
 nvf_recurse, dp
end
;=============================================================================



