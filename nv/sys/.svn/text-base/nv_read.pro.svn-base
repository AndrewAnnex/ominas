;=============================================================================
;+
; NAME:
;	nv_read
;
;
; PURPOSE:
;	Reads a data file of arbitrary format and produces a data descriptor.
;
;
; CATEGORY:
;	NV/SYS
;
;
; CALLING SEQUENCE:
;	dd = nv_read(filespec [, data, header])
;
;
; ARGUMENTS:
;  INPUT:
;	filespec:	Array of strings giving file specifications for
;			file to read.
;
;  OUTPUT:
;	data:		Data array from the last file read.  This is provided
;			as a convenience when reading single files so that
;			it is not necessary to call nv_data to get the array.
;
;	header:		Header array from the last file read.  This is provided
;			as a convenience when reading single files so that
;			it is not necessary to call nv_header to get the array.
;
;
; KEYWORDS:
;  INPUT:
;	filetype:	Overrides automatic filetype detection.
;
;	input_fn:	Overrides input function lookup.
;
;	output_fn:	Overrides output function lookup.
;
;	tab_translators:	Name of translators table to use instead of 
;				that given by the environment variable
;				NV_TRANSLATORS.  If no path is given, then the
;				file is assumed to reside in the same directory
;				as the translator named by the NV_TRANSLATORS
;				environment variable.
;
;	input_translator:	Use this input translator name instead of
;				looking it up in the table.
;
;	output_translator:	Use this output translator name instead of
;				looking it up in the table.
;
;	instrument:	Use this instrument name instead of attempting to 
;			detect it.
;
;	silent:		If set, nv_read suppresses superfluous printed output
;			and passes the flag to the input function.
;
;	sample:		Vector giving the sampling frequency in each direction 
;			in the input data file.  This parameter is passed
;			through to the input function, which may choose to
;			ignore it.
;
;	extension:	If given, these extensions are attempted for each file.
;			If a file with the extension is not found, then the next
;			extension is tried until no extensions are left to try.
;			If no extensions work, then the raw filename is attemtped.
;
;
;  OUTPUT: NONE
;
;
;  ENVIRONMENT VARIABLES:
;	NV_TRANSLATORS:		Name(s) of the translators table(s) to use unless 
;				overridden by the tab_translators keyword.
;				Multiple table names are delimited with ':'.
;
;	NV_FTP_DETECT:		Name(s) of the filetype detectors table(s).		
;				Multiple table names are delimited with ':'.
;
;	NV_IO:			Name(s) of the I/O table(s).		
;				Multiple table names are delimited with ':'.
;
;	NV_INS_DETECT:		Name(s) of the instrument detectors table(s).			
;				Multiple table names are delimited with ':'.
;
;
; RETURN:
;	Array of data descriptors - one for each file resulting from the
;	expansion of the given file specifications.
;
;
; RESTRICTIONS:
;	Under unix, the IDL findfile routine does not expand the ~ symbol,
;	but openr does.  In order to salvage some functionality, nv_read 
;	allows filespecs to pass even if they don't expand to anything using
;	findfile.  In this way, a filespec contianing ~ can be properly
;	expanded, but only if it expands to one filename.  If it expands
;	to multiple filenames, then openr will choke on it.
;
;
; PROCEDURE:
;	nv_read expands all file specifications and then attempts to detect
;	the filetype for each resulting filename using the filetype detectors
;	table.  If a filetype is detected, nv_read looks up the I/O functions
;	and calls the input function to read the file.  Finally, it calls
;	nv_init_descriptor to obtain a data descriptor.  
;
;
; STATUS:
;	Complete
;
;
; SEE ALSO:
;	nv_write
;
;
; MODIFICATION HISTORY:
; 	Written by:	Spitale, 2/1998
;	
;-
;=============================================================================
function nv_read, filespec, data, header, $
		  filetype=_filetype, $
		  input_fn=_input_fn, $
		  output_fn=_output_fn, $
		  instrument=_instrument, $
		  input_translators=input_translators, $
		  output_translators=output_translators, $
		  input_transforms=input_transforms, $
		  output_transforms=output_transforms, $
                  tab_translators=tab_translators, $
;                  tab_transforms=tab_transforms, $
                  maintain=maintain, compress=compress, $
                  silent=silent, sample=sample, nodata=nodata, $
		  id_string=_id_string, nhist=nhist, $
		  extensions=extensions
@nv.include

 on_error, 1

 if(NOT keyword_set(maintain)) then maintain = 0
 nodata = keyword_set(nodata)
 silent = keyword_set(silent)

 ;------------------------------
 ; expand filespec
 ;------------------------------
 filenames = findfile1(filespec)

 ;========================================
 ; create data descriptors for each file
 ;========================================
 dds = 0
 for i=0, n_elements(filenames)-1 do $
  begin
   instrument = ''
   _filename = filenames[i]

   ;---------------------------------------------
   ; try extensions
   ;---------------------------------------------
   filename = ''
   if(keyword_set(extensions)) then $
    begin
     ii = 0
     while((ii LT n_elements(extensions)) AND (NOT keyword_set(filename))) do $
      begin
       dot = '.'
       if(strmid(extensions[ii], 0, 1) EQ '.') then dot = ''
       filename = findfile(_filename + dot + extensions[ii])
       ii = ii + 1
      end
    end
   if(NOT keyword_set(filename)) then  filename = _filename


   ;------------------------------
   ; get names of io routines
   ;------------------------------
   if(NOT keyword_set(_filetype)) then $
                 filetype = nv_detect_filetype(filename, silent=silent, action=action) $
   else filetype = _filetype

   read = 0
   if(NOT keyword_set(action)) then read = 1 $
   else if(action NE 'IGNORE') then read = 1

   if(read) then $
    begin
     if(filetype EQ '') then $
            nv_message, 'Unable to detect filetype.', name='nv_read', /con $
     else $
      begin
       if(NOT keyword_set(_input_fn) OR NOT keyword__set(_output_fn)) then $
                   nv_lookup_io, filetype, input_fn, output_fn, silent=silent

       if(keyword_set(_input_fn)) then input_fn = _input_fn
       if(keyword_set(_output_fn)) then output_fn = _output_fn

       if(output_fn EQ '') then $
         if(NOT silent) then $
           nv_message, /continue, 'No output function available.', name='nv_read'
       if(input_fn EQ '') then $
                     nv_message, 'No input function available.', name='nv_read'

       ;---------------------
       ; read the file
       ;---------------------
       _udata = 0
       _nodata = nodata OR (maintain GT 0)
       if(NOT silent) then print, 'Reading ' + filename
       _data = call_function(input_fn, filename, _header, _udata, _dim, $
                                            nodata=_nodata, /silent, sample=sample)

       ;---------------------------------
       ; check for multiple data arrays
       ;---------------------------------
       multi = 0
       nn = 1
       if(size(_dim, /type) EQ 10) then $
        begin
         multi = 1
         nn = n_elements(_dim)
        end

       ;---------------------------------
       ; loop over all data arrays 
       ;---------------------------------
       for j=0, nn-1 do $
        begin
         if(multi) then $
          begin
           if(defined(_data)) then data = *_data[j]
           if(keyword_set(_header)) then header = *_header[j]
           if(keyword_set(_udata)) then udata = *_udata[j]
           dim = *_dim[j]
          end $
         else $
          begin
           if(defined(_data)) then data = _data
           if(keyword_set(_header)) then header = _header
           if(keyword_set(_udata)) then udata = _udata
           dim = _dim
          end 


         ;-----------------------
         ; instrument
         ;-----------------------
         if(NOT keyword_set(_instrument)) then  $
          begin
           if(keyword_set(filetype) AND keyword_set(header)) then $
            begin
             instrument = nv_detect_instrument(header, udata, filetype, silent=silent)
             if(instrument EQ '') then $
               nv_message, /continue,'Unable to detect instrument.', name='nv_read'
            end 
          end $
         else instrument = _instrument


         ;---------------------------------
         ; transform the data if necessary
         ;--------------------------------- 
         if(keyword_set(instrument)) then $
          begin

           nv_lookup_transforms, instrument, tab_transforms=tab_transforms, $
             _input_transforms, _output_transforms, silent=silent

           if(NOT defined(input_transforms)) then $
                                         input_transforms = _input_transforms
           if(NOT defined(output_transforms)) then $
                                         output_transforms = _output_transforms

           if((keyword_set(input_transforms)) AND (NOT keyword_set(nodata))) then $
              for j=0, n_elements(input_transforms)-1 do $
                 data = call_function(input_transforms[j], data, header, silent=silent)
          end


         ;---------------------------------
         ; use base filename as id string
         ;---------------------------------
         if(keyword_set(_id_string)) then id_string = _id_string[i] $
         else split_filename, _filename, dir, id_string
    
         ;------------------------
         ; create data descriptor
         ;------------------------
         dd = nv_init_descriptor( $
		filename=filename, $
		dim=dim, $
		id_string=id_string, $
		data=data, $
		nhist=nhist, $
		udata=udata, $
		header=header, $
		filetype=filetype, $
		input_fn=input_fn, $
		output_fn=output_fn, $
		instrument=instrument, $
		input_transforms=input_transforms, $
		output_transforms=output_transforms, $
		input_translators=input_translators, $
		output_translators=output_translators, $
		maintain=maintain, $
		compress=compress, $
                tab_translators=tab_translators, silent=silent $
	      )


         ;------------------------
         ; add descriptor to list
         ;------------------------
         dds = append_array(dds, dd)
        end
      end
    end
  end


 return, dds
end
;===========================================================================




