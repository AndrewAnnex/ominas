									12/05/15
SYS Program Reference
=====================

 Summary
 -------
  - DATA_DESCRIPTOR__DEFINE
	Structure defining the data descriptor.

  - KEYVAL_STRUCT__DEFINE
	Structure defining a keyword/value pair.

  - NV_ADD_TRANSIENT_KEYVALS
	Records keyword/value pairs from a transient argument string.

  - NV_CLONE_DESCRIPTOR
       Allocates a new data descriptor as a copy of the given
       (existing) data descriptors.

  - NV_COMPRESS
	Returns the compression function suffix associated with a data 
	descriptor.

  - NV_COMPRESS_EVENTS
	Returns only unique events from the given buffer.

  - NV_COPY_DESCRIPTOR
	Copies all fields from the source data descriptor into the
       destination data descriptor.

  - NV_DATA
	Returns the data array associated with a data descriptor.

  - NV_DEREFERENCE
	Turns an array of pointers to descriptors into an array of descriptors.

  - NV_DETECT_FILETYPE
	Attempts to detect the type of the given file by calling the 
	detectors in the filetype detectors table.

  - NV_DETECT_INSTRUMENT
	Attempts to detect the instrument for a data set by calling the 
	detectors in the instrument detectors table.

  - NV_DIM
	Returns the dimensions of the data array in the given data 
	descriptor.

  - NV_DIRECTIVE_STOP__DEFINE
	Structure defining the NV_STOP directive.

  - NV_EVENT_STRUCT__DEFINE
	Structure defining the NV data event.

  - NV_EXTRACT_IDP
	Extracts the id pointer for event handling from the given structures.

  - NV_EXTRACT_SN
	Extracts serial numbers from given descriptors.

  - NV_FILETYPE
	Returns the filetype associated with a data descriptor.

  - NV_FLUSH
	Flushes the nv event buffer.

  - NV_FREE
	Recursively frees a descriptor.  Pointers and structures are 
	dereferenced and descended, freeing any pointers encountered.

  - NV_FREE_UDATA
	Frees a user data array associated with a data descriptor.

  - NV_GET_DIRECTIVE
	Extracts the directive string from a directive struct.

  - NV_GET_SN
	Returns unique and available descriptor serial numbers.

  - NV_GET_VALUE
	Calls input translators, supplying the given keyword, and builds 
	a list of  returned values.

  - NV_HEADER
	Returns the header array associated with a data descriptor.

  - NV_HEADER_VALUE
	Reads and write header keyword values.

  - NV_HELP
	Prints information about various OMINAS objects.

  - NV_ID_STRING
	Returns the identification string associated with a data descriptor.

  - NV_INIT_DESCRIPTOR
	Creates and initializes a data descriptor.

  - NV_INIT_STATE
	Initializes the NV state structure.

  - NV_INSTRUMENT
	Returns the instrument string associated with a data descriptor.

  - NV_LOAD_DATA
	Loads the data array for a given data descriptor.  Adds to 
	NV state maintained list if maintain == 1.

  - NV_LOOKUP_IO
	Looks up the names of the data input and output functions in
	the I/O table.

  - NV_LOOKUP_TRANSFORMS
	Looks up the names of the data input and output functions in
	the I/O table.

  - NV_LOOKUP_TRANSLATORS
	Looks up the names of the data input and output tranlators in
	the translators table.

  - NV_MAINTAIN
	Returns the maintenance value associated with a data descriptor.

  - NV_MANAGE_DD
	Adds a data descriptor to the NV state maintained list.  If the list
	is full, the oldest descriptor is unloaded and removed.

  - NV_MAX
	Returns the max value associated with a data descriptor.

  - NV_MESSAGE
	Prints an error message and halts execution.

  - NV_MIN
	Returns the min value associated with a data descriptor.

  - NV_NDD
	Returns the global maintenance ndd value.

  - NV_NHIST
	Returns the number of archived data states.

  - NV_NOTIFY
	Notify nv system of an event on some set of descriptors.

  - NV_NOTIFY_LIST_STRUCT__DEFINE
	Structure defining an entry in the NV event registry.

  - NV_NOTIFY_REGISTER
	Register descriptor event handlers.

  - NV_NOTIFY_UNREGISTER
	Unregister a descriptor event handler.

  - NV_PARSE_KEYVAL
	Parses a string containing a keyword=value pair.

  - NV_PARSE_KEYVALS
	Parses an array strings containing keyword=value pairs.

  - NV_PARSE_TRANSIENT_KEYVALS
	Parses a comma-delimited transient argument string into an of array 
	of strings containing keyword=value pairs.

  - NV_PING
	Generates a write event on a set of descriptors.

  - NV_PTR_FREE
	Wrapper to the IDL routine ptr_free.  In conjunction with nv_ptr_new, 
	pointer allocations are tracked for debugging purposes.

  - NV_PTR_NEW
	Wrapper for te IDL function ptr_new.  In conjunction with nv_ptr_free, 
	pointer allocations are tracked for debugging purposes.

  - NV_PUT_VALUE
	Calls output translators, supplying the given keyword and value.

  - NV_READ
	Reads a data file of arbitrary format and produces a data descriptor.

  - NV_READ_CONFIG
	Reads an NV configuration table.

  - NV_REPLICATE
	Replicates the given data descriptor, producing an array of the given
	dimensions containing cloned versions of the input descriptor.

  - NV_REREFERENCE
	Copies an array of descriptors into an array of pointers to descriptors.

  - NV_RESET
	Resets the NV state.

  - NV_RESUME_EVENTS
	Resumes data event tracking.

  - NV_SET_COMPRESS
	Replaces the name of the compression function in a data descriptor.

  - NV_SET_DATA
	Replaces the data array associated with a data descriptor.

  - NV_SET_HEADER
	Replaces the header array associated with a data descriptor.

  - NV_SET_ID_STRING
	Replaces the id string in a data descriptor.

  - NV_SET_MAINTAIN
	Replaces the maintain flag in a data descriptor.

  - NV_SET_MAX
	Replaces the max value in a data descriptor.

  - NV_SET_MIN
	Replaces the min value in a data descriptor.

  - NV_SET_NDD
	Sets a new ndd value in the NV state structure.

  - NV_SET_NHIST
	Changes the number of past states archived in a data descriptor.

  - NV_SET_SIBLING
	Changes the sibling in a data descriptor.

  - NV_SET_UDATA
	Creates or replaces a user data array associated with a data
	descriptor.

  - NV_SET_UPDATE
	Changes the update flag in a data descriptor.

  - NV_SIBLING
	Returns the sibling data descriptor associated with a data 
	descriptor.

  - NV_STATE_STRUCT__DEFINE
	Structure defining the NV state.

  - NV_SUSPEND_EVENTS
	Suspends data event tracking.

  - NV_TEST_DD
	Determines whether the argument is a valid data descriptor.

  - NV_TYPE
	Returns the type code associated with a data descriptor.  

  - NV_UDATA
	Returns a user data array associated with a data descriptor.

  - NV_UNDO
	Increments the data archive index in the data descriptor.

  - NV_UNLOAD_DATA
	Unloads the dat descriptor data array and removes dd from the NV
	state maintained list if present.

  - NV_UPDATE
	Returns the update flag associated with a data descriptor.

  - NV_VALID_DESCRIPTOR
	Determines whether the argument is a valid data descriptor,
	or data descriptor structure.

  - NV_WRITE
	Writes a data file of arbitrary format.

  - TR_KEYWORD_VALUE
	Looks up a keyword in the data descriptor stored keyword/value pairs.


























































DATA_DESCRIPTOR__DEFINE
-----------------------


 PURPOSE:
	Structure defining the data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	id_string:	Identification string.  Typically the filename.

	sn:	Serial number.  This functionality has been replaced
		by the ID pointer, but it is still maintained.

	idp:	ID pointer.  This pointer is unique to the descriptor
		and can be used for identification.

	data_dap:	Pointer to data archive containing the data 
			and nhist past versions.

	dap_index:	Index of archived data to use.  

	max:		Maximum data value.

	min:		Minimum data value.

	dim_p:	Pointer to array giving data dimensions.

	type:	Data type code.

	filename:	Name of data file.

	filetype:	Filetype string determined by nv_detect_filetype.

	input_transforms_p:	Pointer to list of input transform 
				functions determined by nv_lookup_transforms.

	output_transforms_p:	Pointer to list of output transform 
				functions determined by nv_lookup_transforms.

	input_fn:	Name of function to read data file.

	output_fn:	Name of function to write data file.

	keyword_fn:	Name of function to read/write header keywords.

	instrument:	Instrument string from nv_detect_instrument.

	input_translators_p:	Pointer to list of input translator 
				functions determined by nv_lookup_translators.

	output_translators_p:	Pointer to list of output translator 
				functions determined by nv_lookup_translators.

	input_keyvals_p:	Keyword/value pairs for input translators.

	output_keyvals_p:	Keyword/value pairs for output translators.

	transient_keyvals_p:	Transient keyword/value pairs found in the 
				translator argument string.

	last_translator:	Description of last translator called.

	compress:	Compression suffix.  The full name of the 
			compression function is nv_compress_data_<suffix>.

	compress_data_p:	Data for compression function.

	maintain:	Data maintenance mode:
				  0: load initially
				  1: load when needed; retain
				     only ndd data descriptor
				     arrays in memory.
				  2: Load when needed, but
 				     do not retain.

	update:		Data update mode:
				 -1: Locked; applies to data, header,
				     and udata.
				  0: Normal
				  1: Clone off a new descriptor 
				     and leave original dd
				     unchanged.

	sibling_dd_h:	Handle giving dd spawned as a result of writing to 
			this descriptor while update = 1.  Handle is used 
			to protect this dd from nv_free.

	udata_tlp:	Pointer to tag list containing user data.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	


























KEYVAL_STRUCT__DEFINE
---------------------


 PURPOSE:
	Structure defining a keyword/value pair.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	keywords_p:	Pointer to list of keywords.

	values_p:	Pointer to list of value strings.

 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	






































NV_ADD_TRANSIENT_KEYVALS
------------------------


 PURPOSE:
	Records keyword/value pairs from a transient argument string.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_add_transient_keyvals, dd, trs


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor in which to record transient keyvals.

	trs:	Transient argument string.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_CLONE_DESCRIPTOR
-------------------


 PURPOSE:
       Allocates a new data descriptor as a copy of the given
       (existing) data descriptors.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	new_dd = nv_clone_descriptor(dd)


 ARGUMENTS:
  INPUT:
	dd:	 Existing data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  NONE

  OUTPUT: NONE


 RETURN: 
       Newly created data descriptors with all fields identical to
       the input data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_COMPRESS
-----------


 PURPOSE:
	Returns the compression function suffix associated with a data 
	descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	suffix = nv_compress(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	String giving the compression suffix.  The full name
	of the compression function is nv_compress_data_<suffix>.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_COMPRESS_EVENTS
------------------


 PURPOSE:
	Returns only unique events from the given buffer.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	events = nv_compress_events(buf)


 ARGUMENTS:
  INPUT:
	buf:	Array of nv_event_struct.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	All events in buf that are unique.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























NV_COPY_DESCRIPTOR
------------------


 PURPOSE:
	Copies all fields from the source data descriptor into the
       destination data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_copy_descriptor, dd_dst, dd_src


 ARGUMENTS:
  INPUT:
	dd_dst:	        Data descriptor to copy to.

	dd_src:	        Data descriptor to copy from.


  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	silent:	If set, messages are suppressed.

	update:	Data update mode to use instead of the current
		setting in dd_src: (shouldn't this be dd_dst?)
		 -1: Locked;	Nothing copied.
		  0: Normal:	Copy src to dst.
		  1: Clone:	Clone a new decriptor leaving dd_dst
				unchanged.  The value of the dd_dst 
				argument is modifed to point o the 
				cloned descriptor.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	













NV_DATA
-------


 PURPOSE:
	Returns the data array associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_data(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The data array associated with the data descriptor.


 STATUS:
	Complete


 SEE ALSO:
	nv_set_data


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	






















NV_DEREFERENCE
--------------


 PURPOSE:
	Turns an array of pointers to descriptors into an array of descriptors.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	result = nv_dereference(dp)


 ARGUMENTS:
  INPUT:
	dp:	Array of pointers to an arbitrary type of descriptor.

  OUTPUT:
	NONE


 KEYWORDS: NONE


 RETURN:
	Array of descriptors (structures).


 STATUS:
	Complete


 SEE ALSO:
	nv_rereference


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	
























NV_DETECT_FILETYPE
------------------


 PURPOSE:
	Attempts to detect the type of the given file by calling the 
	detectors in the filetype detectors table.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	filetype = nv_detect_filetype(filename)


 ARGUMENTS:
  INPUT:
	filename:	Name of file to test.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	silent:	If set, messages will be suppressed.

	default:	If set, the 'default' filetype is returned.
			The default filetype is the first item in the table
			whose action is not 'IGNORE'.

	all:	If set, all filetypes in the table are returned.

  OUTPUT: NONE


 RETURN: 
	String giving the filetype, or null string if none detected.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


















NV_DETECT_INSTRUMENT
--------------------


 PURPOSE:
	Attempts to detect the instrument for a data set by calling the 
	detectors in the instrument detectors table.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	filinstrumentype = nv_detect_instrument(header, udata, filetype)


 ARGUMENTS:
  INPUT:
	header:		Header from the data file.

	udata:		User data for the detectors.

	filetype:	Filetype from nv_detect_filetype.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	silent:	If set, messages will be suppressed.

  OUTPUT: NONE


 RETURN: 
	String giving the instrument, or 'DEFAULT' if none detected.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




















NV_DIM
------


 PURPOSE:
	Returns the dimensions of the data array in the given data 
	descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	dim = nv_dim(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array giving the dimensions of the data in the data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_DIRECTIVE_STOP__DEFINE
-------------------------


 PURPOSE:
	Structure defining the NV_STOP directive.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	directive:	String giving the directive.



 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






































NV_EVENT_STRUCT__DEFINE
-----------------------


 PURPOSE:
	Structure defining the NV data event.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	idp:		ID pointer identifying the descriptor affected by 
			this event.

	xd:		Descriptor affected by  this event.

	handler:	Name of event handler procedure, which should accept
			an array of events as its only argument.

	data_p:		Pointer to associated user data.

	data:		Scalar user data.

	desc:		String giving a description of the event.

	type:		Event type: 0 = set value, 1 = get_value.





 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






















NV_EXTRACT_IDP
--------------


 PURPOSE:
	Extracts the id pointer for event handling from the given structures.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	result = nv_extract_idp(s)


 ARGUMENTS:
  INPUT:
	s:	Array of structures.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	Array of extracted id pointers; 0 if not found.


 PROCEDURE:
	If the third field of the given descriptor is a pointer, then it is 
	assumed to be the id pointer.  Otherwise, the first field is assumed
	to be a descriptor pointer and that one is checked for a pointer
	in the third position.  The process is repeated until an id pointer
	is found or no sub-descriptor is found.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2003
	















NV_EXTRACT_SN
-------------


 PURPOSE:
	Extracts serial numbers from given descriptors.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	result = nv_extract_sn(xd)


 ARGUMENTS:
  INPUT:
	xd:	Array of descriptors.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	Array of extracted serial numbers; 0 if not found.


 PROCEDURE:
	If the second field of the given descriptor is a long, then it is 
	assumed to be the serial number.  Otherwise, the first field is assumed
	to be a descriptor and that one is checked for a long in the second
	position.  The process is repeated until a serial number is found or 
	no sub-descriptor is found.


 STATUS:
	Complete


 SEE ALSO:
	nv_get_sn


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	











NV_FILETYPE
-----------


 PURPOSE:
	Returns the filetype associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	filetype = nv_filetype(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	String giving the filetype.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























NV_FLUSH
--------


 PURPOSE:
	Flushes the nv event buffer.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_flush


 ARGUMENTS: 
  INPUT:
	events:	If specified, these events are reported instead of those in 
		the event buffer.


 KEYWORDS: NONE


 RETURN:
	NONE


 PROCEDURE:
	Events are compressed so that duplicate events are not reported.  Each
	unique handler is called once with all of the relevant events given.


 COMMON BLOCKS:
	nv_notify_block


 STATUS:
	Complete


 SEE ALSO:
	nv_notify


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2002
	

















NV_FREE
-------


 PURPOSE:
	Recursively frees a descriptor.  Pointers and structures are 
	dereferenced and descended, freeing any pointers encountered.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_free, p


 ARGUMENTS:
  INPUT:
	p:	Pointer or structure.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























NV_FREE_UDATA
-------------


 PURPOSE:
	Frees a user data array associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_free_udata, dd, name


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	name:	String giving the name of the user data aray to free.  If the 
		name exists, then the corresponding data array is replaced.  
		Otherwise, a new array is created with this name. 

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























NV_GET_DIRECTIVE
----------------


 PURPOSE:
	Extracts the directive string from a directive struct.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	dir = nv_get_directive(dst)


 ARGUMENTS:
  INPUT:
	dst:		Structure to test.


  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	Value of the directive string.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2015
	
























NV_GET_SN
---------


 PURPOSE:
	Returns unique and available descriptor serial numbers.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	result = nv_get_sn(n)


 ARGUMENTS:
  INPUT:
	n:	Number of serial numbers to return.  Default is one.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	An array of n unused unique serial numbers.  Note serial numbers 
	start at 1.


 COMMON BLOCKS:
	nv_sn_block:	Keeps track of current serial number.


 STATUS:
	Complete


 SEE ALSO:
	nv_extract_sn


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	














NV_GET_VALUE
------------


 PURPOSE:
	Calls input translators, supplying the given keyword, and builds 
	a list of  returned values.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	values = nv_get_value(dd, keyword)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	keyword:	Keyword to pass to translators, describing the
			requested quantity.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	trs:		Transient argument string.

	tr_disable:	If set, nv_get_value returns without performing 
			any action.

	tr_override:	Comma-delimited list of translators to use instead
			of those stored in dd.

	tr_first:	If set, nv_get_value returns after the first
			successful translator.

  OUTPUT: 
	status:		0 if at least one translator call was successful, 
			-1 otherwise.


 RETURN: 
	Array of values returned from all successful translator calls.
	Values are returned in the same order that the corresponding 
	translators were called.  The dimensions are determined by the 
	output of the first translator call.  Dimensions are (dim,n_values),
	where n_objects is the total number of returned values (there may
	be more than one per translator), and dim is the dimensions of 
	each value.  If dim == 1, the dimensions of the nv_get_value result
	are (n_values).


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	



NV_HEADER
---------


 PURPOSE:
	Returns the header array associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	header = nv_header(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The header array associated with the data descriptor.


 STATUS:
	Complete


 SEE ALSO:
	nv_set_header


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	






















NV_HEADER_VALUE
---------------


 PURPOSE:
	Reads and write header keyword values.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_header_value, dd, keyword, get=get, set=set


 ARGUMENTS:
  INPUT: 
	dd:		Data descriptor.

	keyword:	String giving the name of the keyword to get or set.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	set:	New value to write to the specified keyword.


  OUTPUT: NONE
	get:	Value of the specified keyword read from the header.



 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 8/2013
	
























NV_HELP
-------


 PURPOSE:
	Prints information about various OMINAS objects.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_help, p


 ARGUMENTS:
  INPUT:
	p:	Object to query.  Actions that depend on this input are
		as follows:

		 p		action
		 ----------------------------------------------------
		 No value	Print the full paths of all NV tables. 
		 Numeric	Call IDL finction 'help'.
		 Ptr or struct	Descend recursively, printing info on all
				fields.
		 String		Assumes p is the name of a OMINAS routine
				and prints the docuentation paage if
				available.


  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	event:		If set, the event tables are printed and p
			is ignored.

  OUTPUT: 
	capture:	If present, the output in returned in this
			keyword instead of being printed.


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	











NV_ID_STRING
------------


 PURPOSE:
	Returns the identification string associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_id_string(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The identification string associated with the data descriptor.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2001
	

























NV_INIT_DESCRIPTOR
------------------


 PURPOSE:
	Creates and initializes a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	dd = nv_init_descriptor()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	filename:	Name of data file.

	dim:	Array giving the dimensions of the data array.

	type:	Integer giving the type code of the data array.

	id_string:	Identification string.

	data:	Data array.

	nhist:	Number of past version of the data array to archive.
		If not given, the environment variable NV_NHIST is
		used.  If that is not set, then nhist defaults to 1.

	udata:	Pointer to a tag list containing any user data.

	header:	Header array.

	filetype:	Filetype identifier string.  If not given
			an attempt is made to detect it.

	input_fn:	Name of function to read data file.

	output_fn:	Name of function to write data file.

	keyword_fn:	Name of function to read/write header keywords.

	instrument:	Instrument string.  If not given an
			attempt is made to detect it.

	input_transforms:	String array giving the names of the
				input transforms.

	output_transforms:	String array giving the names of the
				output transforms.

	maintain:	Data maintenance mode.

	compress:	Compression suffix.

	silent:		If set, messages are suppressed.


  OUTPUT: NONE
	input_translators:	String array giving the names of the
				input translators.

	output_translators:	String array giving the names of the
				output translators.



 RETURN:
	Newly created and initialized data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	













































NV_INIT_STATE
-------------


 PURPOSE:
	Initializes the NV state structure.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	state = nv_init_state()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	New nv_state structure.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	



























NV_INSTRUMENT
-------------


 PURPOSE:
	Returns the instrument string associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	instrument = nv_instrument(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The instrument string associated with the data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2001
	


























NV_LOAD_DATA
------------


 PURPOSE:
	Loads the data array for a given data descriptor.  Adds to 
	NV state maintained list if maintain == 1.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_load_data(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor to test.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Loaded data array.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_LOOKUP_IO
------------


 PURPOSE:
	Looks up the names of the data input and output functions in
	the I/O table.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_lookup_io, filetype, input_fn, output_fn


 ARGUMENTS:
  INPUT:
	filetype:	Filetype string from nv_detect_filetype.

  OUTPUT:
	input_fn:	Name of the input function.

	output_fn:	Name of the output function.


 KEYWORDS:
  INPUT: 
	silent:	If set, messages are suppressed.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






















NV_LOOKUP_TRANSFORMS
--------------------


 PURPOSE:
	Looks up the names of the data input and output functions in
	the I/O table.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_lookup_transforms, instrument, input_transforms, output_transforms


 ARGUMENTS:
  INPUT:
	instrument:	Instrument string from nv_detect_instrument.

  OUTPUT:
	input_transforms:	Array giving the names of the input transform 
				functions.

	output_transforms:	Array giving the names of the output transform 
				functions.


 KEYWORDS:
  INPUT: 
	silent:	If set, messages are suppressed.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




















NV_LOOKUP_TRANSLATORS
---------------------


 PURPOSE:
	Looks up the names of the data input and output tranlators in
	the translators table.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_lookup_translators, instrument, input_translators, output_translators


 ARGUMENTS:
  INPUT:
	instrument:	Instrument string from nv_detect_instrument.

  OUTPUT:
	input_translators:	Array giving the names of the input translator 
				functions.

	output_translators:	Array giving the names of the output translator 
				functions.

	input_keyvals:	Array giving the keyword/value pairs the from the 
			translators table, for each input translator.

	output_keyvals:	Array giving the keyword/value pairs the from the 
			translators table, for each output translator.


 KEYWORDS:
  INPUT: 
	silent:	If set, messages are suppressed.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	














NV_MAINTAIN
-----------


 PURPOSE:
	Returns the maintenance value associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_maintain(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The maintenance value associated with the data descriptor.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/2008
	

























NV_MANAGE_DD
------------


 PURPOSE:
	Adds a data descriptor to the NV state maintained list.  If the list
	is full, the oldest descriptor is unloaded and removed.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_manage_dd, dd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























NV_MAX
------


 PURPOSE:
	Returns the max value associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_max(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The max value associated with the data descriptor.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/2012
	

























NV_MESSAGE
----------


 PURPOSE:
	Prints an error message and halts execution.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_message, string


 ARGUMENTS:
  INPUT:
	string:	Message to print.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	name:		Name of the calling routine.

	continue:	If set, execution is not halted.

	get_message:	If set, the last message sent through nv_message
			is returned in the _string keyword and no other
			action is taken.

	clear:		If set, the last message is cleared and no other action
			is taken.

	cb_tag:		If set, the callback procedure below is added to
			the cllaback list under this tag name and no other
			action is taken.

	cb_data_p:	Pointer to data for the callback procedure.

	callback:	Name of a callback procedure to add to the callback
			list.  Callback procedures are sent two arguments:
			cb_data_p (see above), and the message string.  

	disconnect:	If set, the callback identified by the given cb_tag
			is removed from the callback list and no other
			action is taken.

	silent:		If set, no message is printed.


  OUTPUT: 
	message:	If /get_message, this keyword will return the last
			message sent through nv_message.


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	
































































NV_MIN
------


 PURPOSE:
	Returns the min value associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_min(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The min value associated with the data descriptor.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/2012
	

























NV_NDD
------


 PURPOSE:
	Returns the global maintenance ndd value.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_ndd(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The global maintenance ndd value.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/2008
	

























NV_NHIST
--------


 PURPOSE:
	Returns the number of archived data states.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nhist = nv_nhist(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Integer giving the number of past data states archived
	in the data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_NOTIFY
---------


 PURPOSE:
	Notify nv system of an event on some set of descriptors.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_notify, xd, type=type


 ARGUMENTS:
  INPUT:
	xd:	Descriptor for which an event has occurred.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	type:	Type of event:
		 0 - set value
		 1 - get value
		This input can have only one element.  If not given, the 
		event type is assumed to be 0.

	flush:	Flush the write event buffer -- call the handlers for each
		unique event only once and clear the buffer. 

  OUTPUT:
	NONE


 RETURN:
	NONE


 PROCEDURE:
	By default, write events are buffered.  Handlers for write events are 
	only called when /flush is specified.  For read events, all event 
	handlers of the specified type are called as procedures with an
 	nv_event_struct as the argument.


 COMMON BLOCKS:
	nv_notify_block


 STATUS:
	Complete


 SEE ALSO:
	nv_notify_register, nv_notify_unregister


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	

NV_NOTIFY_LIST_STRUCT__DEFINE
-----------------------------


 PURPOSE:
	Structure defining an entry in the NV event registry.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	idp:		ID pointer identifying the descriptor affected by 
			this event.

	xd:		Descriptor affected by this event.

	handler:	Name of event handler procedure, which should accept
			an array of events as its only argument.

	data_p:		Pointer to associated user data.

	data:		Scalar user data.

	desc:		String giving a description of the event.

	type:		Event type: 0 = set value, 1 = get_value.

	compress:	If 1, compress events.

	dynamic:	1 if a pointer was allocated for the descriptor
			in this entry.





 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

















NV_NOTIFY_REGISTER
------------------


 PURPOSE:
	Register descriptor event handlers.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_notify_register, xd, handler, type, data=data


 ARGUMENTS:
  INPUT:
	xd:		Array of descriptors.

	handler:	Name of event handler functions.  If only one element, 
			then this function will be registered for every given
			descriptor.  Otherwise must have the same number of
			elements as xd.

	type:		Type of data event to respond to:
			 0 - set value
			 1 - get value
			0 is default.  If only one element, then this type 
			will be registered for every given descriptor. 
			Otherwise must have the same number of elements as xd.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	data:		Arbitrary user data to associate with events on these
			descriptors.  A pointer to this data is allocated and
			returned in the 'data_p' field of the event structure.
			Note that only one descriptor xd may be specified
			per call when using this argument.

	scalar_data:	Scalar user data to associate with events on these
			descriptors.  This data is returned in the 'data'
			field of the event structure.

	compress:	Event compression flag.  

  OUTPUT:
	NONE


 RETURN:
	NONE


 COMMON BLOCKS:
	nv_notify_block


 STATUS:
	Complete


 SEE ALSO:
	nv_notify_unregister


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	



























































NV_NOTIFY_UNREGISTER
--------------------


 PURPOSE:
	Unregister a descriptor event handler.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_notify_unregister, xd, handler


 ARGUMENTS:
  INPUT:
	xd:		Descriptors for which to discontinue notification.

	handler:	If given, names of event handler functions to remove
			for each given descriptor.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	all:		If set, all handlers are unregistered.	

  OUTPUT:
	NONE


 RETURN:
	NONE


 COMMON BLOCKS:
	nv_notify_block


 STATUS:
	Complete


 SEE ALSO:
	nv_notify_register


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	












NV_PARSE_KEYVAL
---------------


 PURPOSE:
	Parses a string containing a keyword=value pair.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_parse_keyval, keyval, keyword, value


 ARGUMENTS:
  INPUT:
	keyval:		String of the form <keyword>=<value>.

  OUTPUT:
	keyword:	String giving the keyword.

	value:		String giving the value.


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_PARSE_KEYVALS
----------------


 PURPOSE:
	Parses an array strings containing keyword=value pairs.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	kv = nv_parse_keyvals(keyvals)


 ARGUMENTS:
  INPUT:
	keyvals:	Array of strings of the form <keyword>=<value>.

  OUTPUT:


 KEYWORDS:
  INPUT: NONE

  OUTPUT: 
	keywords:	Array of keywords.


 RETURN: 
	Array of type keyval_struct containing the parsed keywords
	and values.  One element per input array element.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_PARSE_TRANSIENT_KEYVALS
--------------------------


 PURPOSE:
	Parses a comma-delimited transient argument string into an of array 
	of strings containing keyword=value pairs.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	keyvals = nv_parse_transient_keyvals(trs)


 ARGUMENTS:
  INPUT:
	trs:	Transient argument string.

  OUTPUT:


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array of strings containing keyword=value pairs.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_PING
-------


 PURPOSE:
	Generates a write event on a set of descriptors.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_ping, xd


 ARGUMENTS:
  INPUT:
	xd:	Array of descriptors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2014
	


























NV_PTR_FREE
-----------


 PURPOSE:
	Wrapper to the IDL routine ptr_free.  In conjunction with nv_ptr_new, 
	pointer allocations are tracked for debugging purposes.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_ptr_free, p


 ARGUMENTS:
  INPUT:
	p:	Pointer to free.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























NV_PTR_NEW
----------


 PURPOSE:
	Wrapper for te IDL function ptr_new.  In conjunction with nv_ptr_free, 
	pointer allocations are tracked for debugging purposes.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	p = nv_ptr_new(x)


 ARGUMENTS:
  INPUT:
	x:	Data to point to.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Newly allocated pointer


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_PUT_VALUE
------------


 PURPOSE:
	Calls output translators, supplying the given keyword and value.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_put_value, dd, keyword, value


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	keyword:	Keyword to pass to translators, describing the
			requested quantity.

	value:		Value to write through the translators.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	trs:		Transient argument string.

	tr_disable:	If set, nv_get_value returns without performing 
			any action.

	tr_override:	Comma-delimited list of translators to use instead
			of those stored in dd.

	tr_first:	If set, nv_get_value returns after the first
			successful translator.

  OUTPUT: 
	status:		0 if at least one translator call was successful, 
			-1 otherwise.


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	










NV_READ
-------


 PURPOSE:
	Reads a data file of arbitrary format and produces a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	dd = nv_read(filespec [, data, header])


 ARGUMENTS:
  INPUT:
	filespec:	Array of strings giving file specifications for
			file to read.

  OUTPUT:
	data:		Data array from the last file read.  This is provided
			as a convenience when reading single files so that
			it is not necessary to call nv_data to get the array.

	header:		Header array from the last file read.  This is provided
			as a convenience when reading single files so that
			it is not necessary to call nv_header to get the array.


 KEYWORDS:
  INPUT:
	filetype:	Overrides automatic filetype detection.

	input_fn:	Overrides input function lookup.

	output_fn:	Overrides output function lookup.

	tab_translators:	Name of translators table to use instead of 
				that given by the environment variable
				NV_TRANSLATORS.  If no path is given, then the
				file is assumed to reside in the same directory
				as the translator named by the NV_TRANSLATORS
				environment variable.

	input_translator:	Use this input translator name instead of
				looking it up in the table.

	output_translator:	Use this output translator name instead of
				looking it up in the table.

	instrument:	Use this instrument name instead of attempting to 
			detect it.

	silent:		If set, nv_read suppresses superfluous printed output
			and passes the flag to the input function.

	sample:		Vector giving the sampling indices in the input data 
			file.  This parameter is passed through to the input 
			function, which may choose to ignore it.

	extensions:	If given, these extensions are attempted for each file.
			If a file with the extension is not found, then the next
			extension is tried until no extensions are left to try.
			If no extensions work, then the raw filename is attemtped.


  OUTPUT: NONE


  ENVIRONMENT VARIABLES:
	NV_TRANSLATORS:		Name(s) of the translators table(s) to use unless 
				overridden by the tab_translators keyword.
				Multiple table names are delimited with ':'.

	NV_FTP_DETECT:		Name(s) of the filetype detectors table(s).		
				Multiple table names are delimited with ':'.

	NV_IO:			Name(s) of the I/O table(s).		
				Multiple table names are delimited with ':'.

	NV_INS_DETECT:		Name(s) of the instrument detectors table(s).			
				Multiple table names are delimited with ':'.


 RETURN:
	Array of data descriptors - one for each file resulting from the
	expansion of the given file specifications.


 RESTRICTIONS:
	Under unix, the IDL findfile routine does not expand the ~ symbol,
	but openr does.  In order to salvage some functionality, nv_read 
	allows filespecs to pass even if they don't expand to anything using
	findfile.  In this way, a filespec contianing ~ can be properly
	expanded, but only if it expands to one filename.  If it expands
	to multiple filenames, then openr will choke on it.


 PROCEDURE:
	nv_read expands all file specifications and then attempts to detect
	the filetype for each resulting filename using the filetype detectors
	table.  If a filetype is detected, nv_read looks up the I/O functions
	and calls the input function to read the file.  Finally, it calls
	nv_init_descriptor to obtain a data descriptor.  


 STATUS:
	Complete


 SEE ALSO:
	nv_write


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	













NV_READ_CONFIG
--------------


 PURPOSE:
	Reads an NV configuration table.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_read_config, env, table_p, filenames_p


 ARGUMENTS:
  INPUT:
	env:	Name of an environment variable giving the names of the
		configuration files to read, delimited by ':'.

  OUTPUT:
	table_p:	Pointer to the configuration table contructed by
			concatenating the contents of each file.

	filenames_p:	List of configuration filenames that were read.


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	






















NV_REPLICATE
------------


 PURPOSE:
	Replicates the given data descriptor, producing an array of the given
	dimensions containing cloned versions of the input descriptor.


 CATEGORY:
	NV/LIB/BOD


 CALLING SEQUENCE:
	dds = nv_replicate(dd, dim)


 ARGUMENTS:
  INPUT:
	dd:	 Data deccriptor to replicate.

	dim:	 Dimensions of the result.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	fn:	Name of the cloning function.  Default is 
		nv_clone_descriptor.

  OUTPUT: NONE


 RETURN:
	Array of the given dimensions containing cloned versions of the input 
	data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




















NV_REREFERENCE
--------------


 PURPOSE:
	Copies an array of descriptors into an array of pointers to descriptors.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_rereference, dp, d


 ARGUMENTS:
  INPUT:
	dp:	Array of pointers to the appropriate type of descriptor.

	d:	Array of descriptors.

  OUTPUT:
	NONE


 KEYWORDS: 
  INPUT:
	new:	If set, new pointers will be alocated in dp.

  OUTPUT: NONE


 RETURN:
	NONE


 STATUS:
	Complete


 SEE ALSO:
	nv_dereference


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2002
	


















NV_RESET
--------


 PURPOSE:
	Resets the NV state.


 CATEGORY:
	NV/LIB/BOD


 CALLING SEQUENCE:
	nv_reset


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




























NV_RESUME_EVENTS
----------------


 PURPOSE:
	Resumes data event tracking.


 CATEGORY:
	NV/LIB/BOD


 CALLING SEQUENCE:
	nv_resume_events


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




























NV_SET_COMPRESS
---------------


 PURPOSE:
	Replaces the name of the compression function in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_compress, dd, compress


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	compress:	String giving the name of a new compression function.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_DATA
-----------


 PURPOSE:
	Replaces the data array associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_data, dd, data


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	data:	New data array.

  OUTPUT:
	dd:	Modified data descriptor.


 KEYWORDS:
  INPUT: 
	update:	Update mode flag.  If not given, it will be taken from dd.

	silent:	If set, messages are suppressed.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:
	nv_data


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	

















NV_SET_HEADER
-------------


 PURPOSE:
	Replaces the header array associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_header, dd, header


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	header:	New header array.

  OUTPUT:
	dd:	Modified data descriptor.


 KEYWORDS:
  INPUT: 
	update:	Update mode flag.  If not given, in will be taken from dd.

	silent:	If set, messages are suppressed.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:
	nv_header


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	

















NV_SET_ID_STRING
----------------


 PURPOSE:
	Replaces the id string in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_id_string, dd, id_string


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	id_string:	New id string.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_MAINTAIN
---------------


 PURPOSE:
	Replaces the maintain flag in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_maintain, dd, maintain


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	maintain:	New maintain flag.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_MAX
----------


 PURPOSE:
	Replaces the max value in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_max, dd, max


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	max:	New max value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_MIN
----------


 PURPOSE:
	Replaces the min value in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_min, dd, min


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	min:	New min value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_NDD
----------


 PURPOSE:
	Sets a new ndd value in the NV state structure.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_ndd, ndd


 ARGUMENTS:
  INPUT:
	ndd:	New ndd value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	



























NV_SET_NHIST
------------


 PURPOSE:
	Changes the number of past states archived in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_nhist, dd, nhist


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	nhist:	New nhist value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_SIBLING
--------------


 PURPOSE:
	Changes the sibling in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_sibling, dd, dd_sibling


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	dd_sibling:	Data descriptor of new sibling.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SET_UDATA
------------


 PURPOSE:
	Creates or replaces a user data array associated with a data
	descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_data, dd, name, data


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	name:	String giving the name of the user data array.  If the name 
		exists, then the corresponding data array is replaced.  
		Otherwise, a new array is created with this name. 

	data:	New data array.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	update:	Update mode flag.  If not given, in will be taken from dd.

	silent:	If set, messages are suppressed.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:
	nv_udata


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	













NV_SET_UPDATE
-------------


 PURPOSE:
	Changes the update flag in a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_set_update, dd, update


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	update:	New update flag.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_SIBLING
----------


 PURPOSE:
	Returns the sibling data descriptor associated with a data 
	descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	sibling_dd = nv_sibling(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Data descriptor of the sibling.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_STATE_STRUCT__DEFINE
-----------------------


 PURPOSE:
	Structure defining the NV state.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	ndd:	Maximum number of data descriptors with maintain == 1 to 
		keep in memory at any given time.

	dds_p:	List of data descriptors kept in memory as a result of
		maintain == 1.

	translators_filenames_p:	Pointer to names of translators 
					tables.

	tr_table_p:	Pointer to loaded translators table.

	transforms_filenames_p:	Pointer to names of transforms tables.

	trf_table_p:	Pointer to loaded transforms table.

	io_filenames_p:	Pointer to names of I/O tables.

	io_table_p:	Pointer to loaded I/O table.

	ftp_detectors_filenames_p:	Pointer to names of filetypes tables.

	ftp_table_p:	Pointer to loaded filetypes table.

	ins_detectors_filenames_p:	Pointer to names of instruments 
					tables.

	ins_table_p:	Pointer to loaded instruments table.




 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	











NV_SUSPEND_EVENTS
-----------------


 PURPOSE:
	Suspends data event tracking.


 CATEGORY:
	NV/LIB/BOD


 CALLING SEQUENCE:
	nv_suspend_events


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	




























NV_TEST_DD
----------


 PURPOSE:
	Determines whether the argument is a valid data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	test = nv_test_dd(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor to test.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	True if the argument is present, is a valid pointer, and
	points to a data descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_TYPE
-------


 PURPOSE:
	Returns the type code associated with a data descriptor.  


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	type = nv_type(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Integer giving the type.


 STATUS:
	This data descriptor functonality is not complete.  A 'type' field
 	needs to be added to the input functions similar to the 'dim' field.
	Then nv_read would include that argument in its call to input_fn and
	it should work.


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























NV_UDATA
--------


 PURPOSE:
	Returns a user data array associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	data = nv_udata(dd, name)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	name:	String giving the name of the data array.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The data array associated with the specified name.


 STATUS:
	Complete


 SEE ALSO:
	nv_set_udata


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	




















NV_UNDO
-------


 PURPOSE:
	Increments the data archive index in the data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_undo, dd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	



























NV_UNLOAD_DATA
--------------


 PURPOSE:
	Unloads the dat descriptor data array and removes dd from the NV
	state maintained list if present.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_unload_data, dd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor to test.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	all:	If set, all maintained data descriptors are unloaded.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























NV_UPDATE
---------


 PURPOSE:
	Returns the update flag associated with a data descriptor.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	update = nv_update(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Data descriptor update flag.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	


























NV_VALID_DESCRIPTOR
-------------------


 PURPOSE:
	Determines whether the argument is a valid data descriptor,
	or data descriptor structure.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	test = nv_valid_descriptor(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor to test.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	True if the argument is a data descriptr structure or a
	pointer to one.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























NV_WRITE
--------


 PURPOSE:
	Writes a data file of arbitrary format.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	nv_write, filespec, dd


 ARGUMENTS:
  INPUT:
	filespec:	Array of strings giving file specifications for
			file to write.

	dd:		Array of data descriptors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	filetype:	Overrides data descriptor filetype (and thus the 
			output function).

	output_fn:	Overrides data descriptor output function.

	verbose:	If set, message are enabled.


  OUTPUT: NONE


 RETURN: NONE


 RESTRICTIONS:
	Under unix, the IDL findfile routine does not expand the ~ symbol,
	but openr does.  In order to salvage some functionality, nv_read 
	allows filespecs to pass even if they don't expand to anything using
	findfile.  In this way, a filespec contianing ~ can be properly
	expanded, but only if it expands to one filename.  If it expands
	to multiple filenames, then openr will choke on it.


 PROCEDURE:
	nv_write expands all file specifications and attempts to write a
	file corresponding to each given data descriptor.  An error results
	if the filespec expands to a different number of files than the number
	of given data descriptors. 


 STATUS:
	Complete


 SEE ALSO:
	nv_read


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/1998
	































































TR_KEYWORD_VALUE
----------------


 PURPOSE:
	Looks up a keyword in the data descriptor stored keyword/value pairs.


 CATEGORY:
	NV/SYS


 CALLING SEQUENCE:
	value = tr_keyword_value(dd, keyword)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	keyword:	Keyword to look up.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Value string associated with the given keyword.  Note that transient
	keyword/value pairs take precedence.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	























