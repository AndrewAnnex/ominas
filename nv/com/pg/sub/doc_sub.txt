									12/05/15
SUB Program Reference
=====================

 Summary
 -------
  - PGS_CLONE_GD
	Clones a generic descriptor.

  - PGS_CLONE_PS
	Clones a points structure.

  - PGS_COPY_PS
	Copies a points structure.

  - PGS_COUNT_DESCRIPTORS
	Determines dimensions of an array of input descriptors.

  - PGS_CULL
	Cleans out an array of points structures by removing invisible points
	and empty points structures.

  - PGS_DESC_SUFFIX
	Constructs a string describing all input descriptors.

  - PGS_DIMENSIONS
	Determines dimensions of the points arrays on the given input 
	points arrays.

  - PGS_GD
	Dereferences a generic descriptor.

  - PGS_MAKE_GD
	Creates a generic descriptor.

  - PGS_NPOINTS
	Counts points in an array of points structures.

  - PGS_NULL
	Returns a null points structure.

  - PGS_OFFSET
	Offsets points in a pg_points structure.

  - PGS_POINTS
	Retrieves fields of a points structure.

  - PGS_POINTS_PS
	Retrieves fields of a points structure, but does not dereference
	pointers.

  - PGS_READ_PS
 	Reads a point structure file.

  - PGS_SCALE
	scales points in a pg_points structure.

  - PGS_SET_POINTS
	Set fields of a points structure.

  - PGS_TEST_PS
	Determines whether the argument is a points structure.

  - PGS_THRESHOLD
	Flags points whose given indicator falls below or above a given 
	threshold.

  - PGS_WRITE_PS
 	Writes a point structure to a file.

  - PG_POINTS_STRUCT__DEFINE
	Structure for managing points in the PG command interface.




























































PGS_CLONE_GD
------------


 PURPOSE:
	Clones a generic descriptor.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	new_gd = pgs_clone_gd(gd)


 ARGUMENTS:
  INPUT:
	gd:		Generic descriptor to clone.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	A new generic descriptor is created containing descriptors cloned 
	from the input generic descriptor.



 MODIFICATION HISTORY:
 	Written by:	Spitale
	




























PGS_CLONE_PS
------------


 PURPOSE:
	Clones a points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	new_gd = pgs_clone_ps(ps)


 ARGUMENTS:
  INPUT:
	ps:		Points structure to clone.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	A new points structure is created containing fields identical
	to the input points structure.


 SEE ALSO:
	pgs_copy_ps


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























PGS_COPY_PS
-----------


 PURPOSE:
	Copies a points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_copy_ps, ps_dst, ps_src


 ARGUMENTS:
  INPUT:
	ps_dst:		Points structure to copy to.

	ps_src:		Points structure to copy from.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 SEE ALSO:
	pgs_clone_ps


 MODIFICATION HISTORY:
 	Written by:	Spitale		5/2014
	

























PGS_COUNT_DESCRIPTORS
---------------------


 PURPOSE:
	Determines dimensions of an array of input descriptors.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_count_descriptors, xds, nd=nd, nt=nt


 ARGUMENTS:
  INPUT:
	xds:		Array (nd,nt) of descriptors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: 
	nd:	First dimension, number of objects, default is 1.

	nt:	Second dimension, number of 'timesteps', default is 1.


 RETURN: NONE



 MODIFICATION HISTORY:
 	Written by:	Spitale
	



























PGS_CULL
--------


 PURPOSE:
	Cleans out an array of points structures by removing invisible points
	and empty points structures.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	new_pp = pgs_cull(pp)


 ARGUMENTS:
  INPUT:
	pp:	Array of points structures.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	Array points structures, or 0 if all were empty.



 MODIFICATION HISTORY:
 	Written by:	Spitale
	




























PGS_DESC_SUFFIX
---------------


 PURPOSE:
	Constructs a string describing all input descriptors.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	string = pgs_desc_suffix(gd)


 ARGUMENTS:
  INPUT:
	gd:	Generic descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	<x>d:	There is an input keyword for each descriptor type,
		which will override anything in gd.

  OUTPUT: NONE


 RETURN:
	String containing a list of descriptions delimited by '/'. 



 MODIFICATION HISTORY:
 	Written by:	Spitale
	



























PGS_DIMENSIONS
--------------


 PURPOSE:
	Determines dimensions of the points arrays on the given input 
	points arrays.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_dimensions, ps, nv=nv, nt=nt


 ARGUMENTS:
  INPUT:
	ps:		Array of points structures.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: 
	nv:	Number of vectors/points.

	nt:	Number of timesteps/dimensions.


 RETURN: NONE



 MODIFICATION HISTORY:
 	Written by:	Spitale		9/2012
	


























PGS_GD
------


 PURPOSE:
	Dereferences a generic descriptor.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_gd, gd, <descriptor output keywords>


 ARGUMENTS:
  INPUT:
	gd:	Generic descriptor.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	<x>d:	There is an output keyword for each descriptor type.

  OUTPUT: NONE


 RETURN: NONE 



 MODIFICATION HISTORY:
 	Written by:	Spitale
	





























PGS_MAKE_GD
-----------


 PURPOSE:
	Creates a generic descriptor.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	new_gd = pgs_make_gd(gd,  <descriptor output keywords>


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	gd:	Generic descriptor.  Fields from this descriptor will
		be included in the output generic descriptor.

	<x>d:	There is an input keyword for each descriptor type.

  OUTPUT: NONE


 RETURN: 
	Generic descriptor containing all of the input fields, and any 
	descripors contained in gd.  Note that no descriptors are cloned;
	only the pointers are copied.



 MODIFICATION HISTORY:
 	Written by:	Spitale
	
























PGS_NPOINTS
-----------


 PURPOSE:
	Counts points in an array of points structures.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	n = pgs_npoints(pp)


 ARGUMENTS:
  INPUT: 
	pp:	Array of points structures

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	visible:	If set, only visible points are counted.

  OUTPUT: NONE


 RETURN: 
	Total number of points in the array of points structures.



 MODIFICATION HISTORY:
 	Written by:	Spitale
	




























PGS_NULL
--------


 PURPOSE:
	Returns a null points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	ps = pgs_null()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	A null points structure.



 MODIFICATION HISTORY:
 	Written by:	Spitale
	






























PGS_OFFSET
----------


 PURPOSE:
	Offsets points in a pg_points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_offset, pp, offset


 ARGUMENTS:
  INPUT:
	pp:		Points structure.

	offset:		Offset to apply.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE.



 MODIFICATION HISTORY:
 	Written by:	Spitale; 4/2015
	




























PGS_POINTS
----------


 PURPOSE:
	Retrieves fields of a points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_points, pp, name=name, points=points, vectors=vectors, $
	                        flags=flags, ...


 ARGUMENTS:
  INPUT:
	pp:		Point structure.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	name:		Point structure name.

	desc:		Point structure description.

	input:		Description of input data.

	assoc_idp:	ID pointer of associated descriptor.

	points:		Array of image points; [2,np,nt].

	vectors:	Array of column vectors; [np,3,nt].

	flags:		Array of flags; [np,nt].

	tags:		Tags for point data; [nd].  These strings may be used
			by other programs to identify point-by-point data
			given by the 'data' keyword.

	data:		Data for each point; [nd,np,nt].

	uname:		Name of a user data array.

	udata:		User data to associate with uname.

	


 RETURN: NONE


 SEE ALSO:
	pgs_set_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1997
	

PGS_POINTS_PS
-------------


 PURPOSE:
	Retrieves fields of a points structure, but does not dereference
	pointers.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_points_ps, pp, name=name, points_ps=points_ps, vectors_ps=vectors_ps, $
	                        flags_ps=flags_ps, ...


 ARGUMENTS:
  INPUT:
	pp:		Point structure.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	name:		Point structure name.

	desc:		Point structure description.

	input:		Description of input data.

	assoc_idp:	ID pointer of associated descriptor.

	points_ps:	Pointer to array of image points.

	vectors_ps:	Pointer to array of column vectors.

	flags_ps:	Pointer to array of flags.

	tags_ps:	Pointer to array of tags for point data.

	data_ps:	Pointer to array of data for each point.

	uname:		Name of a user data array.

	udata:		User data to associate with uname.

	


 RETURN: NONE


 SEE ALSO:
	pgs_set_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1997
	


PGS_READ_PS
-----------


 PURPOSE:
 	Reads a point structure file.


 CATEGORY:
 	NV/PGS


 CALLING SEQUENCE:
 	ps = pgs_read_ps(filename)


 ARGUMENTS:
  INPUT:
 	filename: Name of the point structure file to read.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
 	bin:	If set, a binary point structure file is read;
 		not currently implemented.

 	visible:	If set, only visible points are returned.

 	no_ps:	If set, point structures are not created.

  OUTPUT:
 	name:  Array names.

 	desc:  Array descriptions.

 	flags:  Array flags

 	points:  Point arrays.

 	vectors: Vector arrays.


 RETURN:
 	Normally, this routine returns a pg_points_struct containing
 	the points from the file.  If no_ps is set, then 0 is returned 
 	instead.


 SEE ALSO:
	pgs_write_ps


 MODIFICATION HISTORY:
  Written by: Spitale, 1/2004
 









PGS_SCALE
---------


 PURPOSE:
	scales points in a pg_points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_scale, pp, scale


 ARGUMENTS:
  INPUT:
	pp:		Points structure.

	scale:		Scale to apply.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE.



 MODIFICATION HISTORY:
 	Written by:	Spitale; 4/2015
	




























PGS_SET_POINTS
--------------


 PURPOSE:
	Set fields of a points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	new_ps = pgs_set_points(ps, name=name, points=points, vectors=vectors, $
	                        flags=flags, ...)


 ARGUMENTS:
  INPUT:
	ps:		Point structure whose fields are to be set.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	name:		Point structure name.

	desc:		Point structure description.

	input:		Description of input data.

	assoc_idp:	ID pointer of associated descriptor.

	points:		Array of image points; [2,np,nt].

	vectors:	Array of column vectors; [np,3,nt].

	flags:		Array of flags; [np,nt].

	tags:		Tags for point data; [nd].  These strings may be used
			by other programs to identify point-by-point data
			given by the 'data' keyword.

	data:		Data for each point; [nd,np,nt].

	uname:		Name of a user data array.

	udata:		User data to associate with uname.

	

  OUTPUT: NONE


 RETURN:
	The returned point structure is identical to the input point structure
	excet that the specified fields are modified.


 SEE ALSO:
	pgs_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1997
	

































































PGS_TEST_PS
-----------


 PURPOSE:
	Determines whether the argument is a points structure.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	status = pgs_test_ps(x)


 ARGUMENTS:
  INPUT:
	x:		Point structure.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE
	


 RETURN: 
	True if x is a points structure, false otherwise. 



 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1997
	




























PGS_THRESHOLD
-------------


 PURPOSE:
	Flags points whose given indicator falls below or above a given 
	threshold.


 CATEGORY:
	NV/PGS


 CALLING SEQUENCE:
	pgs_threshold, pp, indicators, threshold, /above
	pgs_threshold, pp, indicators, threshold, /below


 ARGUMENTS:
  INPUT:
	pp:		Points structure.

	indicators:	Values to be tested against the threshold.  One for 
			point in pp.

	threshold:	Threshold value.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	above:	If set, values above the theshold are allowed.

	below:	If set, values below the theshold are allowed.

  OUTPUT: NONE


 RETURN: NONE.



 MODIFICATION HISTORY:
 	Written by:	Spitale
	




















PGS_WRITE_PS
------------


 PURPOSE:
 	Writes a point structure to a file.


 CATEGORY:
 	NV/PGS


 CALLING SEQUENCE:
 	pgs_write_ps, filename, ps


 ARGUMENTS:
  INPUT:
 	filename:	Name of the point structure file to write.

	ps:	Points structure to write.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
 	bin:	If set, a binary point structure file is written;
 		not currently implemented.

  OUTPUT: NONE


 RETURN: NONE


 SEE ALSO:
	pgs_read_ps


 MODIFICATION HISTORY:
  Written by: Spitale, 1/2004
 























PG_POINTS_STRUCT__DEFINE
------------------------


 PURPOSE:
	Structure for managing points in the PG command interface.


 CATEGORY:
	NV/COM/PG/SUB


 CALLING SEQUENCE:
	N/A 


 FIELDS:
	name:	Data set name.

	desc:	Data set description.

	idp:	ID pointer.  Uniquely identifies this data object.

	points_p:	Pointer to image points.

	vectors_p:	Pointer to inertial vectors.

	assoc_idp:	IDP of an associated descriptor, if applicable.

	udata_tlp:	Pointer to a tag list containing generic user data.

	data_p:		Pointer to a point-by-point user data array.

	tags_p:		Tags for point-by-point user data.

	flags_p:	Pointer to point-by-point flag array.

	input:		Description of input data used to produce these
			points.



 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	

















