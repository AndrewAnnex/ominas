;=============================================================================
;+
; NAME:
;	pg_draw_point
;
;
; PURPOSE:
;	Draws points from the given pg_points_struct on the current graphics
;	window using the current data coordinate system.
;
;
; CATEGORY:
;	NV/PG
;
;
; CALLING SEQUENCE:
;	pg_draw_point, object_ps
;
;
; ARGUMENTS:
;  INPUT:
;	object_ps:	Array of pg_points_struct containing image points
;			to be plotted in the current data coordinate system.
;
;  OUTPUT: NONE
;
;
; KEYWORDS:
;  INPUT:
;	xormode:	If set, points are plotted using exclusive-or
;			logic instead of copy.
;
;	literal:	All of the following input keywords accept an array
;			where each element corresponds to an element in the
;			object_ps array.  By default, if the keyword array is
;			shorter than the object_ps array, then the last element
;	  		is used to fill out the array.  /literal suppresses
;			this behavior and causes unspecified elements to
;			take their default values.
;
;	colors:		Array of plotting colors.  Default is !color.  String
;			names will be converted using the ct<string>()
;			functions.
;
;	psyms:		Array of plotting symbols.  Default is 3.
;
;	psizes:		Array of plotting symbol sizes.  Default is 1.0.
;
;	csizes:		Array of character sizes.  Default is 1.0.
;
;	plabels:	Array of object labels.  Default is ''. 
;
;	label_points:	If set, plabels will be applied element-by-element to
;			each point in each points array instead of once
;			to each object.
;
;	wnum:		Window number in which to draw.
;
;  OUTPUT: NONE
;
;
; RETURN:
;	NONE
;
;
; EXAMPLE:
;	The following command draws and labels a lavender 'limb' and a red
;	'ring' (assuming that the points have already been computed):
;
;	pg_draw_point, [limb_ps, ring_ps], color=[ctpurple(), ctred()], $
;	         plabels=['LIMB','RING']
;
;
; STATUS:
;	Complete
;
;
; MODIFICATION HISTORY:
; 	Written by:	Spitale, 1/1998 (pg_draw)
;	Renamed pg_draw_point: Spitale, 9/2005
;	
;-
;=============================================================================
pro pg_draw_point, pp, literal=literal, $
             colors=_colors, psyms=_psyms, psizes=_psizes, plabels=_plabels, $
             xormode=xormode, csizes=_csizes, cthicks=_cthicks, wnum=wnum, shades=shades, $
             label_points=label_points, thick=_thick, line=_line, print=print, $
             label_shade=label_shade, align=_align, corient=_corient

 if(keyword_set(print)) then print, print

 if(NOT keyword_set(pp)) then return

 if(NOT keyword_set(label_shade)) then label_shade = 1.0
 if(keyword_set(wnum)) then wset, wnum

 color_type = size(_colors, /type)
 if(color_type EQ 7) then $
  begin
   nn = n_elements(_colors)
   colors = lonarr(nn)
   if(NOT keyword_set(shades)) then shades = make_array(nn, val=1.0)
   for i=0, nn-1 do colors[i] = call_function('ct'+strlowcase(_colors[i]), shades[i])

   label_colors = lonarr(nn)
   for i=0, nn-1 do label_colors[i] = $
        call_function('ct'+strlowcase(_colors[i]), shades[i]*label_shade)

   _colors = colors
  end

 
 xx = (convert_coord(double([0,5]), double([0,5]), /device, /to_data))[0:1,*]
 plabel_offset = abs([xx[0,0]-xx[0,1], xx[1,0]-xx[1,1]])
 all = NOT keyword_set(literal)

 type = size(pp, /type)
 array = 1
 n_objects = 1
 if(type EQ 8) then $
  begin
   array = 0
   n_objects = n_elements(pp)
  end

 if(n_elements(_psyms) NE 0 AND all) then $
      psyms=fill_array(n_objects, val=_psyms) $
 else psyms=fill_array(n_objects, val=_psyms, def=3)

 if(n_elements(_psizes) NE 0 AND all) then $
      psizes=fill_array(n_objects, val=_psizes) $
 else psizes=fill_array(n_objects, val=_psizes, def=1.0)

 if(n_elements(_corient) NE 0 AND all) then $
      corient=fill_array(n_objects, val=_corient) $
 else corient=fill_array(n_objects, val=_corient, def=1.0)

 if(n_elements(_csizes) NE 0 AND all) then $
      csizes=fill_array(n_objects, val=_csizes) $
 else csizes=fill_array(n_objects, val=_csizes, def=1.0)

 if(n_elements(_cthicks) NE 0 AND all) then $
      cthicks=fill_array(n_objects, val=_cthicks) $
 else cthicks=fill_array(n_objects, val=_cthicks, def=1.0)

 if(n_elements(_align) NE 0 AND all) then $
      align=fill_array(n_objects, val=_align) $
 else align=fill_array(n_objects, val=_align, def=0.0)
;;;; if(idl_v_chrono(!version.release) GT (idl_v_chrono('5.3'))) then align = 1. - align

 if(n_elements(_colors) NE 0 AND all) then $
  begin
   colors=fill_array(n_objects, val=_colors)
   label_colors=fill_array(n_objects, val=_colors*label_shade)
  end $
 else $
   colors=(label_colors=(fill_array(n_objects, val=_colors, def=!color)))

 if(n_elements(_thick) NE 0 AND all) then $
      thick=fill_array(n_objects, val=_thick) $
 else thick=fill_array(n_objects, val=_thick, def=1)

 if(n_elements(_line) NE 0 AND all) then $
      line=fill_array(n_objects, val=_line) $
 else line=fill_array(n_objects, val=_line, def=0)

 if(n_elements(_plabels) NE 0 AND all) then $
      plabels=fill_array(n_objects, val=_plabels) $
 else plabels=fill_array(n_objects, val=_plabels, def='', /string)


 if(keyword_set(xormode)) then device, set_graphics=6

 sub = -1
; for i=0, n_objects-1 do if(pgs_valid(pp[i])) then $
 for i=0, n_objects-1 do $
  begin
   points = 0
   if(NOT array) then $
           pgs_visible_points, pp[i], points=points, flags=flags, sub=sub $
   else points = pp

   if(keyword_set(points)) then $
    begin
     cc = convert_coord([0d,!d.x_size-1], [0d,!d.y_size-1], /device, /to_data)
     cc[0,*] = (cc[0,*])[sort(cc[0,*])]
     cc[1,*] = (cc[1,*])[sort(cc[1,*])]
     w = in_image(0, points, slop=1, $
                      xmin=cc[0,0], ymin=cc[1,0], xmax=cc[0,1], ymax=cc[1,1])

     if(w[0] NE -1) then $
      begin
        

     ;-----------------------
     ; plot visible points
     ;-----------------------
     plots, points, psym=psyms[i], $
               symsize=psizes[i], color=colors[i], thick=thick[i], line=line[i], noclip=0

     ;-----------------------
     ; plot point labels
     ;-----------------------
     if(keyword_set(plabels)) then $
      begin
       if(keyword_set(label_points)) then $
        begin
         labels = plabels
         if(sub[0] NE -1) then labels = plabels[sub]
         xyouts, points[0,*]+plabel_offset[0], $
                 points[1,*]+plabel_offset[1], $
                 labels, color=label_colors[i], $
                 charsize=csizes[i], charthick=cthicks[i], orient=corient[i], $
                 noclip=0, align=align[i]
        end $
       else $
        begin
         xyouts, points[0,0]+plabel_offset[0], $
                     points[1,0]+plabel_offset[1], $
                     plabels[i], color=label_colors[i], $
                     charsize=csizes[i], charthick=cthicks[i], orient=corient[i], $
                     noclip=0, align=align[i]
        end 
      end
      end
    end
  end

 if(keyword_set(xormode)) then device, set_graphics=3
end
;=============================================================================
