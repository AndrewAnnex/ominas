;=============================================================================
;+
; NAME:
;	pg_chisq
;
;
; PURPOSE:
;	Computes chi-squared value for given curve- or point-fit parameters.
;
;
; CATEGORY:
;	NV/PG
;
;
; CALLING SEQUENCE:
;	chisq = pg_chisq(dxy, dtheta, scan_ps, axis_ps=axis_ps)
;
;
; ARGUMENTS:
;  INPUT:
;	dxy:		2-element vector giving the translation as [dx,dy].
;
;	dtheta:		Rotation in radians.
;
;	scan_ps:	Array (n_curves) of pg_points_struct output from
;			pg_cvscan or pg_ptscan containing scan data.
;
;  OUTPUT: NONE
;
;
; KEYWORDS:
;  INPUT:
;	axis_ps:	pg_points_struct containing a single image  point
;			to be used as the axis of rotation.
;
;	fix:		Array specifying which parameters to fix as
;			[dx,dy,dtheta].
;
;  OUTPUT: NONE
;
;
; RETURN:
;	Normalized chi-square value.
;
;
; STATUS:
;	Complete
;
;
; SEE ALSO:
;	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff,
;	pg_ptchisq, pg_fit, pg_threshold
;
;
; MODIFICATION HISTORY:
; 	Written by:	Spitale, 10/2002
;	
;-
;=============================================================================
function pg_residuals, scan_ps
                 

 n_objects = n_elements(scan_ps)
 resx = 0d
 resy = 0d

 ;===============================================
 ; compute chi-squared for each object
 ;===============================================
 for i=0, n_objects-1 do $
  begin
   ;-------------------
   ; get scan data
   ;-------------------
   pgs_visible_points, scan_ps[i], data=scan_data, desc=desc, points=scan_pts

   if(keyword__set(scan_data)) then $
    begin
     ;----------------------
     ; curve scan data
     ;----------------------
     if(desc EQ 'cvscan') then $
      begin
       model_pts = scan_data[5:6,*]
       _resx = tr(model_pts[0,*] - scan_pts[0,*])
       _resy = tr(model_pts[1,*] - scan_pts[1,*])
       resx = [resx, _resx]
       resy = [resy, _resy]
      end $
     ;----------------------
     ; point scan data
     ;----------------------
     else if(desc EQ 'ptscan') then $
      begin
       dx = scan_data[0]
       dy = scan_data[1]

       resx = [resx, dx]
       resy = [resy, dy]
      end $
     else nv_message, name='pg_chisq', 'Invalid data set.'

    end
  end


 res = [tr(resx[1:*]), tr(resy[1:*])]


 return, res
end
;===========================================================================
