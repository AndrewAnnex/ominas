									12/05/15
PG Program Reference
====================

 Summary
 -------
  - PG_ARRAY
	Computes image points for given array descriptors.

  - PG_BAD_DATA
	Locates areas of bad data values like saturation and dropouts.

  - PG_BLEMISH
	Removes blemishes from an image using interpolation.

  - PG_CENTER
	Computes image coordinates of the center of each object.

  - PG_CHISQ
	Computes chi-squared value for given curve- or point-fit parameters.

  - PG_CNTRD
	Calculates the centroids centered near given features in
	an image.

  - PG_COADD
	Averages the given images and geometries. 

  - PG_COREGISTER
	Using the given geometry information, shifts the given images so as 
	to center the given bodies at the same pixel in each image. 

  - PG_COVARIANCE
	Computes a covariance matrix for the least-square fit specified by the
	input scan coefficients.

  - PG_CURSOR
	Allows the user to obtain information about image pixels selected 
	using the mouse in the current graphics window.

  - PG_CUSPS
	Computes image points at the limb/terminator cusps for each given 
	globe object.

  - PG_CVCHISQ
	Computes chi-squared value for given curve fit parameters.

  - PG_CVSCAN
	Attempts to find points of highest correlation with a given model along
	curves in an image.

  - PG_CVSCAN_COEFF
	Computes linear least-squares coefficients for a fit to the image
	coordinate translation and rotation that matches a computed curve to
	a scanned curve in an image.

  - PG_DATA_ADJUST
	Allows the user to adjust data values using the mouse.  A rectangle 
	is selected height (positve or negative) gives the data value adjustment.
	Works for 1-D or 2_d data sets.

  - PG_DESPIKE
	Removes previously-located spurious features like cosmic-ray hits.

  - PG_DISK
	Computes image points on the inner and outer edges of each given disk
	object at all given time steps.

  - PG_DRAG
	Allows the user to graphically translate and rotate an array of points
	using the mouse.

  - PG_DRAG_SHADOW_PLANE
	Allows the user to graphically rotate a plane passing through the 
	center of a planet by dragging the shadow cast by the planet on the
	plane using the mouse.

  - PG_DRAW
	Calls pg_draw_point or pg_draw_vector depending on the input arrays.
	pg_draw_point is called is only one argument is given.  Otherwise,
	it assumed that a source and target are given and pg_draw_vector is 
	called.

  - PG_DRAW_POINT
	Draws points from the given points_struct on the current graphics
	window using the current data coordinate system.

  - PG_DRAW_VECTOR
         Draws vectors on an image from a source towards a
         target. Very useful for locating off-image objects 
         (planets, say) in an image for referencing.  By default,
         vectors are foreshortened to their projections onto the image
         plane so that vectors with large  out-of-plane components
         will be shorter.  (This can be deactivated with the
         /noshorten keyword.)  Also by default, vectors that point
         away from the camera will be drawn as dotted lines while
         vectors which point towards the camera will be drawn solid.
         (This can be controlled with the /solid keyword.)

  - PG_EDGES
	Scans an image for candidate edge points.

  - PG_FARFIT
	Searches for the offset (dx,dy) that gives the best agreement between
	two uncorrelated sets of image points.

  - PG_FIT
	Performs a simultaneous 1-,2-, or 3-parameter linear least-squares fit 
	using the given coefficients.

  - PG_FOOTPRINT
	Computes the footprint of a camera on a given body.

  - PG_FREE
	Frees all pointers in the given structure.

  - PG_GET_ARRAYS
	Obtains a array descriptor for the given data descriptor.  

  - PG_GET_CAMERAS
	Obtains a camera descriptor for the given data descriptor.  

  - PG_GET_MAPS
	Obtains a map descriptor for the given data descriptor.  

  - PG_GET_PLANETS
	Obtains planet descriptors for the given data descriptor.  

  - PG_GET_RINGS
	Obtains ring descriptors for the given data descriptor.  

  - PG_GET_STARS
	Obtain star descriptors for the given data descriptor.  

  - PG_GET_STATIONS
	Obtains a station descriptor for the given data descriptor.  

  - PG_GRID
	Computes image points on a surface coordinate grid.

  - PG_GRID_DISK
	Computes image points on a radius/longitude grid for objects that 
	are a subclass of DISK.


	***This routine is obsolete.  Use pg_grid instead.

  - PG_GRID_GLOBE
	Computes image points on a latitude/longitude grid for objects that 
	are a subclass of GLOBE.

  - PG_HIDE
	Hides the given points with respect to each given object and observer
	using pg_hide/rm_disk, pg_hide/rm_globe, or pg_hide_limb.

  - PG_HIDE_DISK
	Hides the given points with respect to each given disk and observer.

  - PG_HIDE_GLOBE
	Hides the given points with respect to each given globe and observer.

  - PG_HIDE_LIMB
	Hides the given points with respect to the limb of each given globe and
	observer.  This routine is only relevant for points that lie on the 
	surface of a body.  pg_hide_globe should be used for non-surface
	points.

  - PG_IMAGE_SECTOR
	Allows the user to select a rectangular image region, with an
	arbitrary tilt, by clicking and dragging.  A rectangle is selected
	using the left mouse button and a line of zero width is selected
	using the right moise button.

  - PG_LIMB
	Computes image points on the limb of each given globe object.

  - PG_LIMB_SECTOR
	Allows the user to select an image sector along lines of constant
 	azimuth and altitude above a planet by clicking and dragging.

  - PG_LIMB_SECTOR_ALTAZ
	Constructs a limb sector outline for use with pg_profile_ring given
	altitude and azimuth bounds.

  - PG_LIMB_SECTOR_LINEAR
	Constructs a limb sector outline for use with pg_profile_image, given
	altitude and length bounds.  The sector is rectangular, being tangent 
	to the limb at a given azimuth.

  - PG_LINEARIZE_IMAGE
	Reprojects an image onto a linear scale.

  - PG_MAP
	Generates map projections.

  - PG_MASK
	Uses the given geometry to compute an image mask for all objects
	in a scene.

  - PG_MEASURE
	Allows the user to measure quantities between two points in an 
	image using the mouse in the current graphics window.

  - PG_MOSAIC
	Combines two or more maps into one.

  - PG_MOVE
	Translates and rotates the given points.

  - PG_NORTHANGLE
	Computes the angle between the image-coordinate y-axis and the 
	projected z-axis of the given body.  Increasing angle corresponds to 
	clockwise rotation in the image. 

  - PG_PHOTOM
	Photometric image correction for disk or globe objects.

  - PG_PHOTOM_DISK
	Photometric image correction for disk objects.

  - PG_PHOTOM_GLOBE
	Photometric image correction for globe objects.

  - PG_POINTS
	Concatenates the given points_struct's into an array of image
	points.

  - PG_PROFILE_IMAGE
	Generates a dn profile along a line in an image.

  - PG_PROFILE_RING
	Generates radial or longitudinal ring profiles from the given image
	using an image outline.

  - PG_PTASSOC
	Associates points between two arrays by searching for the most
	frequent offset between the two.

  - PG_PTCHISQ
	Computes chi-squared value for given point fit parameters.

  - PG_PTCNTRD
	Attempts to find points of highest correlation with a given model
	centered near given features in an image, then returns the centroid.

  - PG_PTFARSCAN
	Attempts to find all occurrences of a model in an image.

  - PG_PTSCAN
	Attempts to find points of highest correlation with a given model
	centered near given features in an image.

  - PG_PTSCAN_COEFF
	Computes linear least-squares coefficients for a fit to the image
	coordinate offset which matches a point to a feature in an image.

  - PG_PUT_CAMERAS
	Outputs camera descriptors through the translators.

  - PG_PUT_MAPS
	Outputs map descriptors through the translators.

  - PG_PUT_PLANETS
	Outputs planet descriptors through the translators.

  - PG_PUT_RINGS
	Outputs ring descriptors through the translators.

  - PG_PUT_STARS
	Outputs star descriptors through the translators.

  - PG_RANGE
	Computes distance between the centers of two bodies.

  - PG_RAY
	Computes image points on each specified ray.

  - PG_REFLECTION_DISK
	Computes image coordinates of given inertial vectors reflected onto
	surface of the given disk with respect to the given observer.

  - PG_REPOINT
	Modifies the camera orientation matrix based on the given image
	coordinate translation and rotation.

  - PG_REPOS
	Modifies the body position based on the given offset and observer.

  - PG_RESFIT
	Computes polynomial coefficients for a camera distortion model by
	comparing detected reseaus with the known focal plane locations.

  - PG_RESIDUALS
	Computes residuals value for given curve- or point-fit parameters.

  - PG_RESLOC
	Scans an image for candidate reseau marks.

  - PG_RETARG
	Modifies the camera orientation such that the optic axis points 
	along a given vector, or toward a specified body.

  - PG_RING_SECTOR
	Allows the user to select a ring sector by clicking and dragging.
	With the left button, the sector is defined along lines of constant 
	radius and longitude.  With the right button, the sides of the sector
	are perpendicular to the projected radial direction.

  - PG_RING_SECTOR_BOX
	Allows the user to select a box to use with pg_profile_ring.

  - PG_RING_SECTOR_BOX_OBLIQUE
	Allows the user to select an oblique box to use with pg_profile_ring.

  - PG_RING_SECTOR_BOX_ORTHO
	Allows the user to select a box to use with pg_profile_ring.

  - PG_RING_SECTOR_OBLIQUE
	Allows the user to select a ring sector by clicking and dragging.
	The top and bottom of the sector are defined along lines of constant 
	radius, while the sides are perpendicular to the image-projected
	radial direction.

  - PG_RING_SECTOR_PERP
	Allows the user to select a ring sector by clicking and dragging.
	The top and bottom of the sector are defined along lines of constant 
	radius, while the sides are perpendicular to the image-projected
	radial direction.

  - PG_RING_SECTOR_RAD
	Allows the user to select a ring sector by clicking and dragging.
	The sector is defined along lines of constant radius and longitude.

  - PG_RING_SECTOR_RADLON
	Constructs a ring sector outline for use with pg_profile_ring given
	radius and longitude bounds.

  - PG_RM_DISK
	Hides the given points with respect to each given disk and observer
	at all given time steps.  Points are hidden whether they lie in
	front of or behind the disk.

  - PG_RM_GLOBE
	Hides the given points with respect to each given globe and observer
	at all given time steps.  Points are hidden whether the lie in front 
	of or behind the globe.

  - PG_SELECT
	Allows the user to select objects in an image using the mouse.

  - PG_SELECT_POINTS
	Allows the user to select points in an image using the mouse.

  - PG_SELECT_REGION
	Allows the user to select regions in an image using the mouse.

  - PG_SHADOW
	Computes image coordinates of given inertial vectors projected onto
	surface of the given disks and globes with respect to the given
	observer.  Returns only the closest shadow point for each objoect 
	point.

  - PG_SHADOW_DISK
	Computes image coordinates of given inertial vectors projected onto
	surface of the given disk with respect to the given observer.

  - PG_SHADOW_GLOBE
	Computes image coordinates of the given inertial vectors projected onto
	surface of the given globe with respect to the given observer.

  - PG_SHADOW_POINTS
	Determines whether each given point is shadowed by the given object.

  - PG_SHIFT
	Shifts the given image by a non-integer offset and adjusts the camera
	pointing accordingly.

  - PG_SPIKES
	Locates spurious features like cosmic-ray hits.

  - PG_STATION
	Computes image points for given station descriptors.

  - PG_STEREO_SPLIT
	Produces two camera descriptors whose positions are offset
	in the +/-x image directions for computing stereo overlays.

  - PG_STRIP
	Plots the portion of an image between two chosen points.

  - PG_STR_LIMIT_MAG
	Removes stars whose visual magnitude falls outside the given minimum
	and maximum values.

  - PG_SUB_BODY
	Computes surface coordinates of sub-body point.

  - PG_THRESHOLD
	Excludes points whose associated data lie outside of specified
	thresholds by setting the PGS_INVISIBLE_MASK.

  - PG_TIEPOINTS
       Computes tiepoint image offsets.

  - PG_TO_DISK
       Converts image coordinates to disk plane coordinates.  Input
       array can be array of image points or a points_struct.

  - PG_TO_SURFACE
       Converts image coordinates to surface coordinates.  Input
       array can be array of image points or a points_struct.

  - PG_TRIM
	For each given object, excludes points contained in the given region
	by setting the PGS_INVISIBLE_MASK.

  - PG_VECTORS
	Concatenates the given points_struct's into an array of inertial
	vectors.











































PG_ARRAY
--------


 PURPOSE:
	Computes image points for given array descriptors.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	array_ps = pg_array(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	ard:	Array (n_objects, n_timesteps) of descriptors of objects 
		that must be a subclass of array.

	gbx:	Array (n_xd, n_timesteps) of descriptors of objects 
		that must be a subclass of GLOBE.

	dkx:	Array (n_xd, n_timesteps) of descriptors of objects 
		that must be a subclass of DISK.

	bx:	Array (n_xd, n_timesteps) of descriptors of objects 
		that must be a subclass of BODY, instead of gbx or dkx.  

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One per bx.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.


  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/2012
	































































PG_BAD_DATA
-----------


 PURPOSE:
	Locates areas of bad data values like saturation and dropouts.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_bad_data(dd)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor containing the image to be despiked.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	dropout:	Value to use for dropouts.  Default is 0

	sat:		If given, value above which to flag as saturated, 
			inclusive.

	mask:		Byte image of the same size as the input image
			in which nonzero pixel values indicate locations
			where problems should not be flagged.

	extend:		Number of pixels away from masked pixels before
			locations may be flagged as spikes.

	edge:		Regions closer than this to the edge of the image
			will be ignored.  Default is 0.

  OUTPUT:
	subscripts:	Subscript of each bad point.


 RETURN:
	points_struct containing the detected bad points.


 STATUS:
	Complete


 SEE ALSO:
	pg_spikes


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/2013
	






PG_BLEMISH
----------


 PURPOSE:
	Removes blemishes from an image using interpolation.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_blemish(dd, blem_ps)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor containing the image to be corrected.

	blem_ps:	points_struct containing the known image
			coordinates of the blemishes.  If an array of
			points_struct is given, then the operation is
			performed repeatedly using each set of blemish
			coordinates. 

			This argument can also be specified directly as an
			array of image points.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
        a:		Semimajor axis of elliptical blemish model.  Default is
			5 pixels.

        b:		Semiminor axis of elliptical blemish model.  Default is
			5 pixels.

        h:		Angle of rotation (in radians) of smimajor axis from
			horizontal.  Default is 0.

	 show:		If set, the outlines of the blemishes are plotted on 
			the current graphics window.

  OUTPUT:
	image:		The corrected image.


 RETURN:
	Data descriptor containing the corrected image.


 PROCEDURE:
	Blemishes are modeled as ellipses.  Pixels interior to the ellipse
	are interpolated from those on the boundary.


 STATUS:
	Complete


 SEE ALSO:
	pg_resloc, pg_linearize_image, pg_resfit


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2002
	





























































PG_CENTER
---------


 PURPOSE:
	Computes image coordinates of the center of each object.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	center_ps = pg_center(cd=cd, bx=bx)
	center_ps = pg_center(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	bx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

	gd:	Generic descriptor.  If given, the cd and bx inputs 
		are taken from the cd and bx fields of this structure
		instead of from those keywords.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	










PG_CHISQ
--------


 PURPOSE:
	Computes chi-squared value for given curve- or point-fit parameters.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	chisq = pg_chisq(dxy, dtheta, scan_ps, axis_ps=axis_ps)


 ARGUMENTS:
  INPUT:
	dxy:		2-element vector giving the translation as [dx,dy].

	dtheta:		Rotation in radians.

	scan_ps:	Array (n_curves) of points_struct output from
			pg_cvscan or pg_ptscan containing scan data.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	axis_ps:	points_struct containing a single image  point
			to be used as the axis of rotation.

	fix:		Array specifying which parameters to fix as
			[dx,dy,dtheta].

  OUTPUT: NONE


 RETURN:
	Normalized chi-square value.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff,
	pg_ptchisq, pg_fit, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/2002
	











PG_CNTRD
--------


 PURPOSE:
	Calculates the centroids centered near given features in
	an image.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_cntrd(dd, object_ps)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor

	object_ps: 	Array (n_pts) of points_struct giving the points.
			Only the image coordinates of the points need to be
			specified.

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:

       fwhm:           Full-Width Half-maximum to use around expected point
                       location.  If not given, a default fwhm of 2 pixels
                       is used.

       edge:           Distance from edge from which to ignore points.  If
                       not given, an edge distance of 0 is used.

     sigmin:           If given, points are discarded if the sigma above 
                       the mean for the centroid pixel is below this value.


  OUTPUT: NONE


 RETURN:
	An array of type points_struct giving the detected position for
       each object.  The max values for each detection is
       saved in the data portion of points_struct with tag 'scan_cc'.
       The x and y offset from the given position is also saved.


 RESTRICTIONS:
	Currently does not work for multiple time steps.


 PROCEDURE:
	For each visible object, a centroid is calcualted using the
	astronlib cntrd routine.


 SEE ALSO:
	ptscan, pg_ptscan, pg_ptcntrd

 STATUS:
	Complete.


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 2/1999
	





























































PG_COADD
--------


 PURPOSE:
	Averages the given images and geometries. 


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	dd0 = pg_coadd(dd, cd0, bx0, cd=cd, bx=bx)


 ARGUMENTS:
  INPUT:
	dd:	Array of data descriptors giving images to average.

  OUTPUT: 
	cd0:	Averaged camera descriptor.

	bx0:	Averaged body descriptor.


 KEYWORDS:
  INPUT:
	cd:	Array of camera descripors, one for each input image.

	bx:	Array of descriptors of any superclass of BODY, one for each
		input image.

	gd:	Generic descriptor containing the camera and body
		descriptors or an array of generic descriptors, one for each
		input image.

  OUTPUT: NONE



 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 4/2014
	


















PG_COREGISTER
-------------


 PURPOSE:
	Using the given geometry information, shifts the given images so as 
	to center the given bodies at the same pixel in each image. 


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_coregister, dd, cd=cd, bx=bx


 ARGUMENTS:
  INPUT:
	dd:	Array of data descriptors giving images to shift.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array of camera descripors, one for each input image.

	bx:	Array of descriptors of any superclass of BODY, one for each
		input image.

	gd:	Generic descriptor containing the camera and body
		descriptors or an array of generic descriptors, one for each
		input image.

	center: Image coordinates at which to center each body.  By default, 
		the average center among all the bodies is used.  If this input
		contains a single element, it is taken as the index of the 
		input image to use as the reference.

	p:	Array (1,3) giving surface coordinates at which to center 
		each body.

	xshift:	Additional image offset by which to shift each image.

	wrap:	If set shifted pixels are wrapped to the opposite side
		of the image.

	subpixel: By default, each image is shifted by an integer number of
		  pixels in each direction. If this keyword is set, the 
		  image is interpolated onto a new pixel grid such that the 
		  sub-pixel shift is obtained.  (Not currently implemented)

  OUTPUT:
	shift:	Offset applied to each image.


 SIDE EFFECTS:
	The given data and camera descriptors are modified: the images are
	shifted and the camera descriptor optic axes are changed accordingly.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2002
	































































PG_COVARIANCE
-------------


 PURPOSE:
	Computes a covariance matrix for the least-square fit specified by the
	input scan coefficients.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	dxy = pg_covariance(cf)


 ARGUMENTS:
  INPUT:
	cf:	Array of pg_fit_coeff_struct as produced by pg_cvscan_coeff or
		pg_ptscan_coeff.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	status:	0 if successful, -1 otherwise.


 RETURN:
	Covariance matrix.  The diagonal elements are the variances in each fit
	parameter, the off-diagonal elements are the covariances.


 RESTRICTIONS:
	It is the caller's responsibility to ensure that all of the input
	coefficients were computed using with the same set of fixed parameters.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 
	pg_cvchisq, pg_ptchisq, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2002
	












PG_CURSOR
---------


 PURPOSE:
	Allows the user to obtain information about image pixels selected 
	using the mouse in the current graphics window.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_cursor, dd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image.  Multiple data 
		descriptors may be given and the pixel values for each will 
		be displayed.  However, descriptors for only one of the data
		descriptors may be given.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	cd:	Camera descriptor.  Must be included for planet and ring
		coordinate, RA/DEC, and photometric output.  A map descriptor
		may be substitued for this argument, in which case ring
		coordinates, RA/DEC, and photometric data are not output.

	gbx:	Object descriptors, subclass of 'GLOBE'.  Must be included for 
		planet coordinate output.

	dkx:	Object descriptors, subclass of 'DISK'.  Must be included for 
		ring coordinate output.

	sund:	Star descriptor specifying the state of the sun.

	sd:	Star descriptors.  Must be included for star otput.

	gd:	Generic descriptor.  If given, the above object descriptors are
		taken from this structure.

	radec:	If set, right ascension and declination with respect to the
		inertial coordinate system are output for each selected pixel. 

	photom:	If set, photometric angles are output for each pixel that
		intersects a planet or ring.  (Ring photometry is not yet
		implememented)

	fn:	Name of a function to be called whenever a ppoint is selected. 
		The function is called as follows:

		value = call_function(fn, p, image, gd=gd, $
                                               format=_format, label=label)

		p is the image coords of the select ed point, image is the 
		input image and gd is a generic descriptor containing the 
		object descriptors.  format and label are outputs used to label
		the returned value.

	silent:	If set, no string is printed, although the 'string' output
		keyword remains valid.

	xy:	If present, this image point is used and the user is not 
		prompted to select a point.


  OUTPUT:
	string:	The string that's printed.  If /silent is specified, this
		string is valid, but not printed.

	values: Array (nfn,2,npoints) giving the numerical results in the order
		that they appear in the output.


 RETURN:
	NONE


 STATUS:
	Ring photometry is not yet implemented.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 3/2002
	








































PG_CUSPS
--------


 PURPOSE:
	Computes image points at the limb/terminator cusps for each given 
	globe object.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	cusp_ps = pg_cusps(cd=cd, od=od, gbx=gbx)
	cusp_ps = pg_cusps(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	 Array (n_timesteps) of camera descriptors.

	od:	 Array (n_timesteps) of descriptors for the observer, 
		 default is the sun is gd given.

	gbx:	 Array (n_objects, n_timesteps) of descriptors of objects 
		 which must be a subclass of GLOBE.

	gd:	 Generic descriptor.  If given, the cd, od, and gbx inputs 
		 are taken from this structure instead of from those keywords.

	epsilon: Maximum angular error in the result.  Default is 1e-3.

	reveal:	 Normally, points computed for objects whose opaque flag
		 is set are made invisible.  /reveal suppresses this behavior.


  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image
	points and the corresponding inertial vectors.


 PROCEDURE:
	This program uses an iterative scheme to find the two points on 
	the surface of the globe where the surface normal is simultaneously
	perpendicular to the vectors from the camera and the Sun.



 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 12/2010
	

PG_CVCHISQ
----------


 PURPOSE:
	Computes chi-squared value for given curve fit parameters.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	chisq = pg_cvchisq(dxy, dtheta, scan_ps, axis_ps=axis_ps)


 ARGUMENTS:
  INPUT:
	dxy:		2-element vector giving the translation as [dx,dy].

	dtheta:		Rotation in radians.

	scan_ps:	Array (n_curves) of points_struct output from
			pg_cvscan containing scanned image points as well as
			other necessary scan data.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	axis_ps:	points_struct containing a single image  point
			to be used as the axis of rotation.

	fix:		Array specifying which parameters to fix as
			[dx,dy,dtheta].

  OUTPUT: NONE


 RETURN:
	Chi-square value.


 RESTRICTIONS:
	The caller is responsible for ensuring that the input parameters are
	consistent with those used with other programs like pg_fit.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff,
	pg_ptchisq, pg_fit, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/1998
	





PG_CVSCAN
---------


 PURPOSE:
	Attempts to find points of highest correlation with a given model along
	curves in an image.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	scan_ps = pg_cvscan(dd, curve_ps)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor

	cd:		Camera descriptor.  not required, but some
			interpolation schemes will not work without it.

	bx:		Descriptor specifying the body associated with
			each points struct.  Not required, but some algorithms
			will not work properly without it.

	gd:		Generic descriptor.

	curve_ps:	Array (n_curves) of points_struct giving the curves.
			Only the image coordinates of the curves need to be
			specified in the points_struct.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	model_p:	Array (n_curves) of pointers to model arrays.  Each
			model array has dimensions (n_points,nm), where n_points
			is the number of points in the curve and nm is the 
			number of points in the model.  Thus, a model may be
			specified for each point on the curve.  Default
			model is edge_model_atan().

	mzero:		Array (n_curves) or (n_curves,n_points) of zero-point
			offsets for each model in model_p.  mzero must be
			specified if model_p is given.

	width:		Number of pixels to scan on either side of the curve.
			Default is 20.

	edge:		Distance from the edge of the image within which 
			curve points will not be scanned.  Default is 0.

	algorithm:	Name of alrogithm to use to detect the edge.
			Choices are 'MODEL', 'GRAD', and 'HALF'.
			Default is 'MODEL'.

	arg:		Argument passed to the edge detection routine.
			For the GRAD algorithm, this argument specifies
			whether each edge is interior (arg=1) or 
			exterior (arg=0).

	scan_ps:	If given, these previously scanned points are updated
			to be consistent with the given data points.  The image
			is not scanned.

	dir:		If given the scan will be performed in this direction
			instead of normal to the curve.  Must be a 2-element
			unit vector.

  OUTPUT: NONE


 RETURN:
	Array (n_curves) of points_struct containing resulting image points,
	as well as additional scan data to be used by pg_cvscan_coeff and
	possibly other programs.  The scan data is as follows:

		 tag			 description
	 	-----			-------------
		scan_cos		Cosine of normal at each point.
		scan_sin		Sine of normal at each point.
		scan_offsets		Raw offsets from computed curve.
		scan_cc			Correlation coefficient for each scanned
					point.
		scan_sigma		Scan offset uncertainties.
		scan_model_xpts		Model points corresponding to each
		scan_model_ypts		 scanned point


 RESTRICTIONS:
	Currently does not work for multiple time steps.


 PROCEDURE:
	Normal sines and cosines are computed using icv_compute_directions.
	These directions are input to icv_strip_curve along with the image
	in order to extract an image strip to be scanned.  icv_scan_strip is 
	then used to find the optimum scan offsets and icv_convert_scan_offsets
	is used to obtain image coordinates corresponding to each scan offset.
	See the documentation for each of those routines for more details.


 EXAMPLE:
	The following command scans for a limb in the image contained in the
	given data descriptor, dd:

	scan_ps = pg_cvscan(dd, limb_ps, width=40, edge=20)

	In this call, limb_ps is a points_struct containing computed limb
	points.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 
	pg_fit, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	




PG_CVSCAN_COEFF
---------------


 PURPOSE:
	Computes linear least-squares coefficients for a fit to the image
	coordinate translation and rotation that matches a computed curve to
	a scanned curve in an image.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	scan_cf = pg_cvscan_coeff(scan_ps, axis_ps=axis_ps)


 ARGUMENTS:
  INPUT:
	scan_ps:	Array (n_curves) of points_struct output from
			pg_cvscan containing scanned image points as well as
			other necessary scan data.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	axis_ps:	points_struct containing a single image  point
			to be used as the axis of rotation in the fit for
			every curve.

	fix:		Array specifying which parameters to fix in the
			fit as [dx,dy,dtheta].

  OUTPUT: NONE


 RETURN:
	Array (n_curves) of pg_fit_coeff_struct containing coefficients for 
	the least-square fit to be input to pg_fit.


 RESTRICTIONS:
	Currently does not work for multiple time steps.


 PROCEDURE:
	pg_cvscan_coeff extracts the scan data from the given
	scan_ps structure and uses icv_coeff to compute the coefficients.  
	See the documentation for that routine for details.


 EXAMPLE:
	The following command uses scan data from pg_cvscan to compute
	least square coefficients for a fit such that only dx and dtheta
	will be allowed to vary: 

	cvscan_cf = pg_cvscan_coeff(scan_ps, axis=center_ps, fix=[1])

	In this call, scan_ps is a points_struct containing the scan data
	from pg_cvscan and center_ps is a points_struct giving the center
	of the planet as computed by pg_center.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 
	pg_fit, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	






















































PG_DATA_ADJUST
--------------

 PURPOSE:
	Allows the user to adjust data values using the mouse.  A rectangle 
	is selected height (positve or negative) gives the data value adjustment.
	Works for 1-D or 2_d data sets.

 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     pg_data_adjust, dd


 ARGUMENTS:
  INPUT:
      dd:	Data descriptor.

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
         NONE



  OUTPUT:
         NONE


 RETURN: 
      NONE


 ORIGINAL AUTHOR : J. Spitale ; 2/2014



























PG_DESPIKE
----------


 PURPOSE:
	Removes previously-located spurious features like cosmic-ray hits.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_despike(dd)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor containing the image to be despiked.

	spike_ps:	points_struct specifying the points to replace;
			typically computed by pg_spikes.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	scale:		Typical size of features to be removed.  Default 
			is 10.

	n=n:		Number of timers to repeat the box filter.  Default
			is 5.

  OUTPUT:
	image:		The corrected image.


 RETURN:
	Data descriptor containing the corrected image.  If /noclone
	is not set, set input data descriptor is modified.


 PROCEDURE:
	pg_despike replaces the values of the desired pixels with those
	computed by smoothing the input image using a box filter of size 
	'scale' repeatedly, 'n' times.


 STATUS:
	Complete.


 SEE ALSO:
	pg_spikes


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/2004
	





PG_DISK
-------


 PURPOSE:
	Computes image points on the inner and outer edges of each given disk
	object at all given time steps.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_disk(cd=cd, dkx=dkx, gbx=gbx)
	result = pg_disk(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	 Array (n_timesteps) of camera descriptors.

	dkx:	 Array (n_objects, n_timesteps) of descriptors of objects 
		 which must be a subclass of DISK.

	gbx:	 Array (n_objects, n_timesteps) of descriptors of objects 
		 which must be a subclass of GLOBE, describing the primary 
		 body.  For each timestep, only the primaryobject is used.

	gd:	 Generic descriptor.  If given, the descriptor inputs 
		 are taken from the this structure.

	inner/outer: If either of these keywords are set, then only
	             that edge is computed.

	npoints: Number of points to compute around each edge.  Default is
		 1000.

	reveal:	 Normally, points computed for objects whose opaque flag
		 is set are made invisible.  /reveal suppresses this behavior.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

  OUTPUT: NONE


 RETURN:
	Array (2*n_objects) of points_struct containing image points and
	the corresponding inertial vectors.  The output array is arranged as
	[inner, outer, inner, outer, ...] in the order that the disk
	descriptors are given in the dkx argument.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	7/2004:		Added gbx input; Spitale
	




























































PG_DRAG
-------


 PURPOSE:
	Allows the user to graphically translate and rotate an array of points
	using the mouse.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	dxy = pg_drag(object_ps, dtheta=dtheta, axis_ps=axis_ps)


 ARGUMENTS:
  INPUT:
	object_ps:	Array (n_objects) of points_struct containing the
			image points to be dragged.

  OUTPUT: 
	object_ps:	If /move, the input points will be modified by the
			offsets resulting from the drag.


 KEYWORDS:
  INPUT:
	axis_ps:	points_struct containing a single image point
			to be used as the axis of rotation.

	sample:		Sampling interval for drag graphics.  The input
			points are subsampled at this interval so that the
			dragging can be done smoothly.  Default is 10.

	move:		If set, object_ps will be modified on return using
			pg_move.

	symbol:		If set, the symbol number will be passed to cursor_move
			so something other than a period can be used to mark
			points.

	noverbose:	If set, turns off the notification that cursor
                       movement is required.

	xor_graphics:	If set, grahics are drawn using the XOR function.

	color:		Drawing color.  Default is ctyellow.

  OUTPUT:
	dtheta:		Dragged rotation in radians.


 RETURN:
	2-element array giving the drag translation as [dx,dy].


 PROCEDURE:
	cursor_move is used to perfform the drag.  See that routine for more
	detail.


 STATUS:
	Complete


 SEE ALSO:
	pg_move


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
      Modified by:     Dyer Lytle, Vance Haemmerle 11/1998
	

























































PG_DRAG_SHADOW_PLANE
--------------------


 PURPOSE:
	Allows the user to graphically rotate a plane passing through the 
	center of a planet by dragging the shadow cast by the planet on the
	plane using the mouse.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	dxy = pg_drag_shadow_plane(cd=cd, gbx=gbx, sund=sund)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	 Camera descriptor.

	gbx:	 Subclass of GLOBE.

	sund:	 Star descriptor for the Sun.

	gd:	 Generic descriptor.  If given, the cd, gbx, and sund inputs 
		 are taken from this structure instead of from those keywords.

	p0:	 Initial point to use instead  of prompting the user.

	n0:	 Initial plane orientation.  Default is the planet y-axis.

	gain:	 Radians / pixel offset from the initial point.

	axis:	 Rotation axis; default is the planet pole.

	noverbose:	If set, turns off notifications.

	xor_graphics:	If set, grahics are drawn using the XOR function.

	color:		Drawing color.

  OUTPUT: NONE


 RETURN:
	Column vector giving the final plane orientation.



 STATUS:
	Complete


 SEE ALSO:
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/2012
	
































































PG_DRAW
-------


 PURPOSE:
	Calls pg_draw_point or pg_draw_vector depending on the input arrays.
	pg_draw_point is called is only one argument is given.  Otherwise,
	it assumed that a source and target are given and pg_draw_vector is 
	called.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_draw, object_ps, target_ps


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing image points
			to be plotted in the current data coordinate system.
			Or inertial vectors to be used as vector sources.
			May also be an array of image points or inertial
			vectors.

	target_ps:	Array of points_structs giving the inertial
			positions of vector targets.  May also be an
			array of inertial vectors.  If this argument is
			present, then vectors are drawn instead of points.

  OUTPUT: NONE


 KEYWORDS: 
	graphics:	Logical operation to use for drawing.

	See pg_draw or pg_draw_vector for more keywords.


 RETURN:
	NONE


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2005
	














PG_DRAW_POINT
-------------


 PURPOSE:
	Draws points from the given points_struct on the current graphics
	window using the current data coordinate system.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_draw_point, object_ps


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing image points
			to be plotted in the current data coordinate system.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	literal:	All of the following input keywords accept an array
			where each element corresponds to an element in the
			object_ps array.  By default, if the keyword array is
			shorter than the object_ps array, then the last element
	  		is used to fill out the array.  /literal suppresses
			this behavior and causes unspecified elements to
			take their default values.

	colors:		Array of plotting colors.  Default is !color.  String
			names will be converted using the ct<string>()
			functions.  Labels are also plotted in this color.
			If one element, then all points are plotted in this
			color; if multiple elements, and object_ps also
			has multiple elements, each color will be assigned to 
			all elements in the corresponding array (see /literal);
			if mulitple elements, and object_ps has only one
			element, then each color will be assigned to each 
			element of th object_ps array.

	shades:		Array of plotting shades.  Default is 1.0.

	label_shade:	Array of plotting shades for labels.  Default is 1.0.

	shades:		Array of plotting shades.  Default is 1.0.

	psyms:		Array of plotting symbols.  Default is 3.

	thick:		Array of plotting thicknesses.  Default is 1.

	line:		Array of linestyles.  Default is 0.

	psizes:		Array of plotting symbol sizes.  Default is 1.0.

	csizes:		Array of character sizes.  Default is 1.0.

	cthicks:	Array of character thicknesses.  Default is 1.0.

	corient:	Array of character orientations.  Default is 1.0.

	plabels:	Array of object labels.  Default is ''. 

	label_points:	If set, plabels will be applied element-by-element to
			each point in each points array instead of once
			to each object.

	align:		Label alignment.  See XYOUTS.

	wnum:		Window number in which to draw.

	xormode:	If set, XOR graphics mode is used for drawing.

	print:		Message to print before plotting.

  OUTPUT: NONE


 RETURN:
	NONE


 EXAMPLE:
	The following command draws and labels a lavender 'limb' and a red
	'ring' (assuming that the points have already been computed):

	pg_draw_point, [limb_ps, ring_ps], color=[ctpurple(), ctred()], $
	         plabels=['LIMB','RING']


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998 (pg_draw)
	Renamed pg_draw_point: Spitale, 9/2005
	





























PG_DRAW_VECTOR
--------------



 PURPOSE: 
         Draws vectors on an image from a source towards a
         target. Very useful for locating off-image objects 
         (planets, say) in an image for referencing.  By default,
         vectors are foreshortened to their projections onto the image
         plane so that vectors with large  out-of-plane components
         will be shorter.  (This can be deactivated with the
         /noshorten keyword.)  Also by default, vectors that point
         away from the camera will be drawn as dotted lines while
         vectors which point towards the camera will be drawn solid.
         (This can be controlled with the /solid keyword.)



 CATEGORY: 
         NV/PG


 CALLING SEQUENCE: 
                 pg_draw_vector, sources, targets,
                 (cd=cd| gd=gd)[, /literal, thick=thick, lengths=lengths,
                  colors=colors, plabels=plabels, csizes=csizes]



 INPUTS:
        sources:         Inertial positions of sources.  Either an array
                         of column vectors (nv x 3 x nt) or an array of 
                         points structures containing the inertial vectors.  

        targets:         Inertial positions of targets, or inertial unit
                         vectors giving directions to targets.  Either an 
                         array of column vectors (nv x 3 xnt) or an array 
                         of points structures.  There must either be a single 
                         target point or a one-to-one match between source 
                         and target points.
                         


 OPTIONAL INPUTS:



 KEYWORD PARAMETERS:

       cd or gd        A camera descriptor or a generic descriptor
                       containing a camera descriptor.  Required unless
			source and target given as image points.

	literal:	All of the following input keywords accept an array
			where each element corresponds to an element in the
			object_ps array.  By default, if the keyword array is
			shorter than the object_ps array, then the last element
	  		is used to fill out the array.  /literal suppresses
			this behavior and causes unspecified elements to
			take their default values

       lengths:        Lengths of the vectors.  (Default: 50 pixels)

       thick:         Line thicknesses.  (Default: 1)

       colors:         Colors to use in drawing.  (Default: current
                       default color)

       plabels:         Text with which to label vectors.  (Default:
                       no label)

       csizes:      Character sizes for plabels.  (Default: 1)
        
       solid:         All lines are to be drawn solid (linestyle=0)
                       rather than allow vectors pointing into the
                       image plane to be dotted.

       noshorten:     If set, vectors will not be foreshortened
                       depending on how much they point into/out
                       of the image plane.

       fixedheads:     If set, arrowheads will not be scaled to
                        match the foreshortening of the vector.

 OUTPUTS:
        None


 EXAMPLE:
       Say moon_points is a point structure containing the center
       data for the four Galilean satellites and jupiter_points has
       Jupiter's center data.  Then

       IDL> pg_draw_vector, moon_points, jupiter_points, colors=[100, $
             150, 200, 250], thick=1.25, length=70, plabels="Jupiter", $
             csizes=1.5

       will draw vectors from each towards the planet.  Conversely, 

       IDL> pg_draw_vector, jupiter_points, moon_points, colors=[100, $
             150, 200, 250], thick=1.25, length=70, plabels=["Io", "Europa", $
             "Ganymede", "Callisto"], csizes=1.5

       will draw vectors from Jupiter's center towards each moon,
       labelling each by the moon's name.


 MODIFICATION HISTORY:

     Written: John W. Weiss, 5/05
     Consolidated some functionality into plot_arrow; Spitale 9/2005
          



















PG_EDGES
--------


 PURPOSE:
	Scans an image for candidate edge points.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	edge_ps = pg_edges(dd)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	threshold:	Minimum activity to accept as an edge point.

	edge:		Distance from the edge of the image within which 
			curve points will not be scanned.  Default is 0.

	npoints:	Maximum number of points to return.

	lowpass:	If given, the image is smoothed with a kernel of
			this size.


  OUTPUT: NONE


 RETURN:
	points_struct giving the resulting edge points.


 PROCEDURE:
	At each pixel in the image, an activity is computed (see activity.pro).
	Points with activity greater than the threshold value are accepted.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 
	pg_fit, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 4/2002
	






PG_FARFIT
---------


 PURPOSE:
	Searches for the offset (dx,dy) that gives the best agreement between
	two uncorrelated sets of image points.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	dxy = pg_farfit(dd, base_ps, model_ps)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor.

	base_ps:	points_struct giving a set of points to fit to.
			This input may be produced by pg_edges, for example. 

	model_ps:	Array of points_struct giving model points (computed
			limb points for example).

  OUTPUT: NONE


 KEYWORDS:
  INPUT: 
	show:		If specified, the search is displayed in the current 
			graphics window.  This value can be specified as a
			2-element array giving the size of the displayed image.

	bin:		Initial bin size for point densities.  Default is 50
			pixels.

	max_density:	Maximum model point density.  Default = 5.

	nsamples:	Number of samples in each direction in the grid search. 
			See image_correlate.

	region:		Size of region to scan, centered at offset [0,0].  If not
			specified, the entire image is scanned.

	sigma:		2-element array giving the width of the correlation
			peak in each direction.

	cc:		Cross correlation of final result.

	mcc:		Corss correlation at the model points.

	bias:		If given, solutions are biased toward the initial
			guess using a weighting function of the form:

				exp(-r^2/2*bias),

			where r is the distance between from the initial 
			guess.

	nosearch:	If set, no search is performed.  An offset of [0,0]
			is returned.	


  OUTPUT: NONE


 RETURN:
	2-element array giving the fit offset as [dx,dy].


 PROCEDURE:
	pg_farfit is a wrapper for the routine correlate_points.  See the
	documentation for that routine for details on the fitting procedure 


 STATUS:
	Complete.


 SEE ALSO:
	pg_edges correlate_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 4/2002
	











































PG_FIT
------


 PURPOSE:
	Performs a simultaneous 1-,2-, or 3-parameter linear least-squares fit 
	using the given coefficients.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	dxy = pg_fit(cf, dtheta=dtheta)


 ARGUMENTS:
  INPUT:
	cf:	Array of pg_fit_coeff_struct as produced by pg_cvscan_coeff or
		pg_ptscan_coeff.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	dtheta:	Fit offset in theta.


 RETURN:
	2-element array giving the fit offset as [dx,dy].


 RESTRICTIONS:
	It is the caller's responsibility to ensure that all of the input
	coefficients were computed using with the same set of fixed parameters.


 PROCEDURE:
	pg_fit extracts the fit coefficients from cf and inputs them to mbfit
	to perform a simultatneous least square fit using all of the
	coefficients.  See the documentation for that routine for more detail.


 EXAMPLE:
	The following commands perform a simultaneous least square fit to
	a limb, ring and star field with all parameters free:

	cvscan_ps = pg_cvscan(dd, [limb_ps,ring_ps], width=40, edge=20)
	ptscan_ps = pg_ptscan(dd, [star_ps], width=40, edge=20)

	cvscan_cf = pg_cvscan_coeff(cvscan_ps, axis=center_ps)
	ptscan_cf = pg_ptscan_coeff(ptscan_ps, axis=center_ps)

	dxy = pg_fit([cvscan_cf,ptscan_cf], dtheta=dtheta)

	In this example, center_ps, limb_ps, ring_ps, and star_ps are assumed 
	to have been previously computed using the appropriate routines.

	Note that since this is a linear fit, the input systems may have been
	linearized and it may be necessary to iterate this procedure.



 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 
	pg_cvchisq, pg_ptchisq, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	





















































PG_FOOTPRINT
------------


 PURPOSE:
	Computes the footprint of a camera on a given body.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
       footprint_ps = footprint(cd=cd, bx=bx)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	bx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

	gd:	Generic descriptor.  If given, the cd and bx inputs 
		are taken from the cd and bx fields of this structure
		instead of from those keywords.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One per bx.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	sample:	 Sampling rate; default is 1 pixel.

  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2014
	









PG_FREE
-------


 PURPOSE:
	Frees all pointers in the given structure.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_free, s


 ARGUMENTS:
  INPUT:
	s:	Array of structures containing pointers to be freed.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: NONE


 PROCEDURE:
	All fields of the structure are searched for pointers to free.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	























PG_GET_ARRAYS
-------------


 PURPOSE:
	Obtains a array descriptor for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_arrays(dd)
	result = pg_get_arrays(dd, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	arr_*:		All array override keywords are accepted.  See
			array_keywords.include. 

			If arr_name is specified, then only descriptors with
			those names are returned.

	verbatim:	If set, the descriptors requested using arr_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  


 RETURN:
	Array of array descriptors, 0 if an error occurs.


 PROCEDURE:
	If /override, then a array descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except arr_name) can still be overridden by specifying 
	them as keyword parameters.  If arr_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/2012
	

























































PG_GET_CAMERAS
--------------


 PURPOSE:
	Obtains a camera descriptor for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_cameras(dd)
	result = pg_get_cameras(dd, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cds:		Input camera descriptors.  New descriptors will
			be appended to this list.  This concatenation occurs
			before sorting such that input descriptors have
			higher priority than new descriptors (see /no_sort).

	gd:		Generic descriptor containing the above descriptors.

	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	cam_*:		All camera override keywords are accepted.  See
			camera_keywords.include. 

			If cam_name is specified, then only descriptors with
			those names are returned.

	verbatim:	If set, the descriptors requested using cam_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  

	orient:		Default orientation matrix to use if camera
			orientation is not available.  If not specified, 
			the identity matrix is used.


 RETURN:
	Array of camera descriptors, 0 if an error occurs.


 PROCEDURE:
	If /override, then a camera descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except cam_name) can still be overridden by specifying 
	them as keyword parameters.  If cam_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	Modified:	Spitale, 8/2001
	













































PG_GET_MAPS
-----------


 PURPOSE:
	Obtains a map descriptor for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_maps(dd)
	result = pg_get_maps(dd, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	mds:		Input map descriptors.  New descriptors will
			be appended to this list.  This concatenation occurs
			before sorting such that input descriptors have
			higher priority than new descriptors (see /no_sort).

	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	map_*:		All map override keywords are accepted.  See
			map_keywords.include.

			If map_name is specified, then only descriptors with
			those names are returned.

			If /override and map name is not specified, then
			the name is taken from the globe descriptor.

	verbatim:	If set, the descriptors requested using map_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.   


 RETURN:
	Array of map descriptors, 0 if an error occurs.


 PROCEDURE:
	If /override, then a map descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except map_name) can still be overridden by specifying 
	them as keyword parameters.  If map_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	Modified:	Spitale, 8/2001
	
















































PG_GET_PLANETS
--------------


 PURPOSE:
	Obtains planet descriptors for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_planets(dd, od=od)
	result = pg_get_planets(dd, od=od, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	pd:		Input planet descriptors.  New descriptors will
			be appended to this list.  This concatenation occurs
			before sorting such that input descriptors have
			higher priority than new descriptors (see /no_sort).

	od:		Observer descriptor, typically a camera descriptor.
			If given, then planet positions will be corrected
			for light travel time and stellar aberration relative
			to this observer unless /raw is set.

	sd:		Primary star descriptor; needed by some translators.

	gd:		Generic descriptors.  Can be used in place of od and sd.

	raw:		If set, no aberration corrections are performed.

	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	plt_*:		All planet override keywords are accepted.  See
			planet_keywords.include.  

			If plt_name is specified, then only descriptors with
			those names are returned. 

	verbatim:	If set, the descriptors requested using plt_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.   


 RETURN:
	Array of planet descriptors, 0 if an error occurs.


 PROCEDURE:
	If /override, then a planet descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except plt_name) can still be overridden by specifying 
	them as keyword parameters.  If plt_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	Modified:	Spitale, 8/2001
	








































PG_GET_RINGS
------------


 PURPOSE:
	Obtains ring descriptors for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_rings(dd, od=od)
	result = pg_get_rings(dd, od=od, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	rd:		Input ring descriptors.  New descriptors will
			be appended to this list.  This concatenation occurs
			before sorting such that input descriptors have
			higher priority than new descriptors (see /no_sort).

	pd:		Planet descriptors for primary objects.  

	od:		Observer descriptors.  

	gd:		Generic descriptors.  Can be used in place of od.

	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	rng_*:		All ring override keywords are accepted.  See
			ring_keywords.include.

			If rng_name is specified, then only descriptors with
			those names are returned.

	verbatim:	If set, the descriptors requested using rng_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.   


 RETURN:
	Ring descriptors obtained from the translators, 0 if an error occurs.


 PROCEDURE:
	If /override, then a ring descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except rng_name) can still be overridden by specifying 
	them as keyword parameters.  If rng_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 SEE ALSO:
	xx, xx, xx


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	Modified:	Spitale, 8/2001
	









































PG_GET_STARS
------------


 PURPOSE:
	Obtain star descriptors for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_stars(dd, od=od)
	result = pg_get_stars(dd, od=od, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	sd:		Input star descriptors.  New descriptors will
			be appended to this list.  This concatenation occurs
			before sorting such that input descriptors have
			higher priority than new descriptors (see /no_sort).

	od:		Observer descriptor, typically a camera descriptor.
			If given, then star positions will be corrected
			for stellar aberration (but not light-travel time,
			which is inherently accounted for in star catalogs) 
			relative to this observer, unless /raw is set.  

	sund:		Star descriptors for the sun.  Used to correct for
			stellar aberration.  

	gd:		Generic descriptors.  Can be used in place of od.

	raw:		If set, no aberration corrections are performed.

	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	str_*:		All star override keywords are accepted.  See
			star_keywords.include.

			If str_name is specified, then only descriptors with
			those names are returned.

	verbatim:	If set, the descriptors requested using str_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  


 RETURN:
	Star descriptors obtained from the translators, 0 if an error occurs.


 PROCEDURE:
	If /override, then a star descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except str_name) can still be overridden by specifying 
	them as keyword parameters.  If str_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 SEE ALSO:
	xx, xx, xx


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	Modified:	Spitale, 8/2001
	


































PG_GET_STATIONS
---------------


 PURPOSE:
	Obtains a station descriptor for the given data descriptor.  


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_get_stations(dd)
	result = pg_get_stations(dd, trs)


 ARGUMENTS:
  INPUT:
	dd:	data descriptor

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	no_sort:	Unless this keyword is set, only the first descriptor 
			encountered with a given name is returned.  This allows
			translators to be arranged in the translators table such
			by order of priority.

	override:	Create a data descriptor and initilaize with the 
			given values.  Translators will not be called.

	stn_*:		All station override keywords are accepted.  See
			station_keywords.include. 

			If stn_name is specified, then only descriptors with
			those names are returned.

	verbatim:	If set, the descriptors requested using stn_name
			are returned in the order requested.  Otherwise, the 
			order is determined by the translators.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  


 RETURN:
	Array of station descriptors, 0 if an error occurs.


 PROCEDURE:
	If /override, then a station descriptor is created and initialized
	using the specified values.  Otherwise, the descriptor is obtained
	through the translators.  Note that if /override is not used,
	values (except stn_name) can still be overridden by specifying 
	them as keyword parameters.  If stn_name is specified, then
	only descriptors corresponding to those names will be returned.
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/2009
	

























































PG_GRID
-------


 PURPOSE:
	Computes image points on a surface coordinate grid.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	grid_ps = pg_grid(cd=cd, gbx=gbx)
	grid_ps = pg_grid(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_objects, n_timesteps) of descriptors of objects 
		that must be a subclass of GLOBE.

	dkx:	Array (n_objects, n_timesteps) of descriptors of objects 
		that must be a subclass of DISK.

	bx:	Array (n_objects, n_timesteps) of descriptors of objects 
		that must be a subclass of BODY.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One per bx.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	lat:	Array giving grid-line latitudes in radians.

	lon:	Array giving grid-line longitudes in radians.

	nlat:	Number of equally-spaced latitude lines to generate if keyword
		lat not given.  Default is 12.

	flat:	This reference latitude line will be one of the latitude lines generated 
		if nlat is specified.  Default is zero.

	nlon:	Number of equally-spaced longitude lines to generate if keyword
		lon not given.  Default is 12.

	flon:	This reference longitude line will be one of the longitude lines generated 
		if nlon is specified.  Default is zero.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

	npoints: Number of points to compute in each latitude or longitude line,
		 per 2*pi radians; default is 360.

	slat:	Latitudes to compute on each longitude circle.

	slon:	Longitudes to compute on each latitude circle.


  OUTPUT: 
	lat:	Array giving grid-line latitudes in radians.

	lon:	Array giving grid-line longitudes in radians.


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	







































PG_GRID_DISK
------------


 PURPOSE:
	Computes image points on a radius/longitude grid for objects that 
	are a subclass of DISK.


	***This routine is obsolete.  Use pg_grid instead.

 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	grid_ps = pg_grid_disk(cd=cd, dkx=dkx, gbx=gbx)
	grid_ps = pg_grid_disk(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	dkx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of DISK.

	gbx:	Array  of descriptors of objects which must be a subclass 
		of GLOBE, describing the primary body.  For each
		timestep, only the first descriptor is used.

	gd:	Generic descriptor.  If given, the cd and dkx inputs 
		are taken from the cd and dkx fields of this structure
		instead of from those keywords.

	reveal:	Normally, points computed for objects whose opaque flag
		is set are made invisible.  /reveal suppresses this behavior.

	fov:	If set points are computed only within this many camera
		fields of view.

	cull:	If set, points structures excluded by the fov keyword
		are not returned.  Normally, empty points structures
		are returned as placeholders.

	nrad:	Number of radial grid lines.  Default is 4.

	nlon:	Number of longitudinal grid lines. Default is 36.

	nrpoints:	Number of points per radial grid line. Defauly is 500.

	nlpoints:	Number of points per longitudinal grid line. Defauly 
			is 720.

	rad:	If given, radii at which to put grid lines.

	lon:	If given, longitudes at which to put grid lines.
	

  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	




















































PG_GRID_GLOBE
-------------


 PURPOSE:
	Computes image points on a latitude/longitude grid for objects that 
	are a subclass of GLOBE.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	grid_ps = pg_grid_globe(cd=cd, gbx=gbx)
	grid_ps = pg_grid_globe(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	lat:	Array giving grid-line latitudes in radians.

	lon:	Array giving grid-line longitudes in radians.

	nlat:	Number of equally-spaced latitude lines to generate if keywor
		lat not given.  Default is 12.

	flat:	This reference latitude line will be one of the latitude lines generated 
		if nlat is specified.  Default is zero.

	nlon:	Number of equally-spaced longitude lines to generate if keyword
		lon not given.  Default is 12.

	flon:	This reference longitude line will be one of the longitude lines generated 
		if nlon is specified.  Default is zero.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

	npoints: Number of points to compute in each latitude or longitude line,
		 per 2*pi radians; default is 360.


  OUTPUT: 
	lat:	Array giving grid-line latitudes in radians.

	lon:	Array giving grid-line longitudes in radians.

	plat_ps:	points_struct giving the image coordinates of the
			intersection of the each latitude line with the 
			reference longitude line.  These points can be used to draw
			labels for the latitude lines. 

	plon_ps:	points_struct giving the image coordinates of the
			intersection of the each longitude line with the 
			reference latitude line.


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	











































PG_HIDE
-------


 PURPOSE:
	Hides the given points with respect to each given object and observer
	using pg_hide/rm_disk, pg_hide/rm_globe, or pg_hide_limb.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_hide, object_ps, cd=cd, od=od, gbx=gbx, dkx=dkx, /[disk|globe|limb]
	pg_hide, object_ps, gd=gd, od=od, /[disk|globe|limb]


 ARGUMENTS:
  INPUT: 
	object_ps:	Array of points_struct containing inertial vectors.

	hide_ps:	Array (n_disks, n_timesteps) of points_struct 
			containing the hidden points.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	globe:	If set, use pg_hide_globe or pg_rm_globe.

	disk:	If set, use pg_hide_disk or pg_rm_disk.

	limb:	If set, use pg_hide_limb .

	rm:	If set use the *rm* programs instead of *hide* programs.

	  All other keywords are passed directly to pg_rm/hide_globe,
	  pg_hide/rm_disk or pg_hide_limb and are documented with those
	  programs.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The flags arrays in object_ps are modified.


 PROCEDURE:
	For each object in object_ps, hidden points are computed and
	PGS_INVISIBLE_FLAG in the points_struct is set.  No points are
	removed from the array.


 EXAMPLE:
	(1) The following command hides all points on the planet which lie
	    behind the terminator:

	    pg_hide, object_ps, /limb, gbx=pd, od=sd

	    In this call, pd is a planet descriptor, and sd is a star descriptor
	    (i.e., the sun).



	(2) This command hides all points on the planet which are shadowed by
	    the rings:

	    pg_hide, object_ps, /disk, dkx=rd, od=sd

	    In this call, rd is a ring descriptor, and sd is as above.



	(3) This command hides all points which lie behind the planet or the
	    rings:

	    pg_hide, object_ps, /disk, /globe, dkx=rd, gbx=pd, cd=cd

	    In this call, rd is a ring descriptor, pd is a planet descriptor, 
	    cd is a camera descriptor, and sd is as above.


 STATUS:
	Complete


 SEE ALSO:
	pg_hide_disk, pg_hide_globe, pg_hide_limb


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	


































PG_HIDE_DISK
------------


 PURPOSE:
	Hides the given points with respect to each given disk and observer.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_hide_disk, object_ps, cd=cd, od=od, dkx=dkx, gbx=gbx
	pg_hide_disk, object_ps, gd=gd, od=od


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

	hide_ps:	Array (n_disks, n_timesteps) of points_struct 
			containing the hidden points.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	dkx:	Array (n_disks, n_timesteps) of descriptors of objects 
		which must be a subclass of DISK.

	gbx:	Array  of descriptors of objects which must be a subclass 
		of GLOBE, describing the primary body for dkx.  For each
		timestep, only the first descriptor is used.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the observer from which points are hidden.  If no observer
		descriptor is given, the camera descriptor is used.

	gd:	Generic descriptor.  If given, the cd and dkx inputs 
		are taken from the cd and dkx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, objects whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	cat:	If set, the hide_ps points are concatentated into a single
		points_struct.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The flags arrays in object_ps are modified.


 PROCEDURE:
	For each object in object_ps, hidden points are computed and
	PGS_INVISIBLE_FLAG in the points_struct is set.  No points are
	removed from the array.


 EXAMPLE:
	The following command hides all points which are behind the rings as
	seen by the camera:

	pg_hide_disk, object_ps, cd=cd, dkx=rd

	In this call, rd is a ring descriptor, and cd is a camera descriptor.


 STATUS:
	Complete


 SEE ALSO:
	pg_hide, pg_hide_globe, pg_hide_limb


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	7/2004:		Added gbx input; Spitale
	










































PG_HIDE_GLOBE
-------------


 PURPOSE:
	Hides the given points with respect to each given globe and observer.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_hide_globe, object_ps, cd=cd, od=od, gbx=gbx
	pg_hide_globe, object_ps, gd=gd, od=od


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

	hide_ps:	Array (n_disks, n_timesteps) of points_struct 
			containing the hidden points.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_globes, n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the observer from which points are hidden.  If no observer
		descriptor is given, the camera descriptor is used.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, objects whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	cat:	If set, the hide_ps points are concatentated into a single
		points_struct.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The flags arrays in object_ps are modified.


 PROCEDURE:
	For each object in object_ps, hidden points are computed and
	PGS_INVISIBLE_FLAG in the points_struct is set.  No points are
	removed from the array.


 EXAMPLE:
	The following command hides all points which are behind the planet as
	seen by the camera:

	pg_hide_globe, object_ps, cd=cd, gbx=pd

	In this call, pd is a planet descriptor, and cd is a camera descriptor.


 STATUS:
	Complete


 SEE ALSO:
	pg_hide, pg_hide_disk, pg_hide_limb


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	















































PG_HIDE_LIMB
------------


 PURPOSE:
	Hides the given points with respect to the limb of each given globe and
	observer.  This routine is only relevant for points that lie on the 
	surface of a body.  pg_hide_globe should be used for non-surface
	points.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_hide_limb, object_ps, cd=cd, od=od, gbx=gbx
	pg_hide_limb, object_ps, gd=gd, od=od


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

	hide_ps:	Array (n_disks, n_timesteps) of points_struct 
			containing the hidden points.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_globes, n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.  n_globes must be the
		same as the number of object_ps arrays.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the observer from which points are hidden.  If no observer
		descriptor is given, the camera descriptor is used.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, objects whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The flags arrays in object_ps are modified.


 RESTRICTIONS:
	The result is meaningless if the given inertial vectors do not lie
	on the surface of the globe.


 PROCEDURE:
	For each object in object_ps, hidden points are computed and
	PGS_INVISIBLE_FLAG in the points_struct is set.  No points are
	removed from the array.


 EXAMPLE:
	The following command hides all points which lie on the surface of the
	planet behind the limb as seen by the camera:

	pg_hide_limb, object_ps, cd=cd, gbx=pd

	In this call, pd is a planet descriptor, and cd is a camera descriptor.


 STATUS:
	Complete


 SEE ALSO:
	pg_hide, pg_hide_globe, pg_hide_disk


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	









































PG_IMAGE_SECTOR
---------------

 PURPOSE:
	Allows the user to select a rectangular image region, with an
	arbitrary tilt, by clicking and dragging.  A rectangle is selected
	using the left mouse button and a line of zero width is selected
	using the right moise button.

 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps = pg_image_sector()


 ARGUMENTS:
  INPUT:
      NONE

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

           p1:     Endpoint.  If given, p0 must also be given and is taken
                   as the starting point for a line along which to scan.
                   In this case, the user does not select the box manually.
                   Scan width is one pixel unless 'width' is specified,
                   and is centered on the line from p0 to p1.

        width:     Width of box instead of letting the user select.

        color:     Color to use for rectangle, default is !color.

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

       sample:	    Pixel grid sampling to use instead of 1.

      corners:     If set, then p0 and p1 are taken as the corners of
                   the box, and the user is not prompted to select one.

    noverbose:     If set, messages are suppressed.


  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword. 

 ORIGINAL AUTHOR : J. Spitale ; 6/2005



































































PG_LIMB
-------


 PURPOSE:
	Computes image points on the limb of each given globe object.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	limb_ps = pg_limb(cd=cd, gbx=gbx, ods=ods)
	limb_ps = pg_limb(gd=gd, od=od)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	 Array (n_timesteps) of camera descriptors.

	gbx:	 Array (n_objects, n_timesteps) of descriptors of objects 
		 which must be a subclass of GLOBE.

	od:	 Array (n_timesteps) of descriptors of objects 
		 which must be a subclass of BODY.  These objects are used
		 as the observer from which limb is computed.  If no observer
		 descriptor is given, the camera descriptor is used.

	gd:	 Generic descriptor.  If given, the cd and gbx inputs 
		 are taken from the cd and gbx fields of this structure
		 instead of from those keywords.

	npoints: Number of points to compute.  Default is 1000.

	epsilon: Maximum angular error in the result.  Default is 1e-3.

	reveal:	 Normally, points computed for objects whose opaque flag
		 is set are made invisible.  /reveal suppresses this behavior.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image
	points and the corresponding inertial vectors.


 PROCEDURE:
	By definition, the surface normal at a point on the limb of a body is
	perpendicular to a vector from the observer to that same point, so the
	dot product of the two vectors is zero.  This program uses an iterative
	scheme to find points onthe surface at which this dot product is less
	than epsilon.


 EXAMPLE:
	The following command computes points on the planet which lie on the
	terminator:

	term_ps = pg_limb,(cd=cd, gbx=pd, od=sd)

	In this call, pd is a planet descriptor, cd is a camera descriptor, 
	and sd is a star descriptor (i.e., the sun).


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/1998
	














































PG_LIMB_SECTOR
--------------

 PURPOSE:
	Allows the user to select an image sector along lines of constant
 	azimuth and altitude above a planet by clicking and dragging.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_limb_sector(cd=cd, gbx=gbx, dkd=dkd)


 ARGUMENTS:
  INPUT:
      NONE

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

          gbx:     Globe descriptor for the planet whose limb is to be 
                   scanned.

           gd:     Generic descriptor containnig the above descriptors.

      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

       sample:     Sets the grid sampling in pixels.  Default is one.

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

        nodsk:     If set, skyplane disk image points will not be included 
                   in the output points_struct.

           cw:     If set, azimuths are assumed to increase in the clockwise
                   direction.

    noverbose:     If set, messages are suppressed.


  OUTPUT:
         dkd:      Disk desriptor in the skyplane, centered on the planet
                   with 0 axis along the skyplane projection of the north 
                   pole.  For use with pg_profile_ring.

         azimuths: Array giving azimuth at each sample.

        altitudes: Array giving altitude at each sample.

    limb_pts_body: Body coordinates of each limb points on planet surface.


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point, relative to the
      returned disk descriptor, and the user fields 'nrad' and 'nlon' 
      giving the number of points in altitude and azimuth.


 MODIFICATION HISTORY : 
	Spitale; 8/2006		original version






















































PG_LIMB_SECTOR_ALTAZ
--------------------

 PURPOSE:
	Constructs a limb sector outline for use with pg_profile_ring given
	altitude and azimuth bounds.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_limb_sector_altaz(cd=cd, gbx=gbx, alt, az, dkd=dkd)


 ARGUMENTS:
  INPUT:
      alt:	2-elements array giving the lower and upper altitude bounds
		for the sector.

      az:	2-elements array giving the lower and upper azimuth bounds
		for the sector in radians, reliative to the skyplane 
		projection of the planet's north pole.

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

          gbx:     Globe descriptor giving the planet about whose limb
                   the scan will be extracted.

           gd:     Generic descriptor containing the above descriptors.

       sample:     Sets the grid sampling in pixels.  Default is one.

          naz:     Total number of samples in the azimuthal direction.  
                   Determined by the 'sample' keyword by default.

         nalt:     Total number of samples in the altitude direction.  
                   Determined by the 'sample' keyword by default.

          alt:     Array giving the altitude of each point in the sector.

           az:     Array giving the azimuth of each point in the sector.

           cw:     If set, azimuths are assumed to increase in the clockwise
                   direction.

        nodsk:     If set, skyplane disk image points will not be included 
                   in the output points_struct.

      graphic:     If set, the sector is computed in the planetographic
                   sense, i.e., lines of constant azimuth extend along 
                   the local surface normal direction instead of the radial
                   direction.


  OUTPUT:
          dkd:     Disk descriptor in the skyplane, centered on the planet
                   with 0 axis along the skyplane projection of the north 
                   pole.  For use with pg_profile_ring.

         azimuths: Array giving azimuth at each sample.

        altitudes: Array giving altitude at each sample.

    limb_pts_body: Body coordinates of each limb points on planet surface.



 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point, relative to the
      returned disk descriptor, and the user fields 'nrad' and 'nlon' 
      giving the number of points in altitude and azimuth.


 ORIGINAL AUTHOR : 
	Spitale; 8/2006
















































PG_LIMB_SECTOR_LINEAR
---------------------

 PURPOSE:
	Constructs a limb sector outline for use with pg_profile_image, given
	altitude and length bounds.  The sector is rectangular, being tangent 
	to the limb at a given azimuth.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps = pg_limb_sector_line(cd=cd, gbx=gbx, alt, rim, az0)


 ARGUMENTS:
  INPUT:
      alt:	2-elements array giving the lower and upper altitude bounds
		for the sector.

      rim:	2-element array giving the image-coordinate cylidrical coordinates
		of the the ends of the sector.

      az0:	Azimuth of the sector tangent point.

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

          gbx:     Globe descriptor giving the planet about whose limb
                   the scan will be extracted.

           gd:     Generic descriptor containig the above descriptors.

       sample:     Sets the grid sampling in pixels.  Default is one.

         nrim:     Total number of samples in the scan direction.  
                   Determined by the 'sample' keyword by default.

         nalt:     Total number of samples in the altitude direction.  
                   Determined by the 'sample' keyword by default.

      graphic:     If set, the sector is computed in the planetographic
                   sense, i.e., lines of constant azimuth extend along 
                   the local surface normal direction instead of the radial
                   direction.


  OUTPUT:
             rims: Array giving azimuth at each sample.

        altitudes: Array giving altitude at each sample.


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the user fields 'nl' and 'nw' giving the number of points 
      in altitude and r.


 ORIGINAL AUTHOR : 
	Spitale; 1/2009
































































PG_LINEARIZE_IMAGE
------------------


 PURPOSE:
	Reprojects an image onto a linear scale.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_linearize_image(dd, new_cd, cd=cd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing image to be reprojected.

  OUTPUT:
	new_cd:	Camera descriptor corresponding to the reprojected image.


 KEYWORDS:
  INPUT:
	cd:	Camera descriptor describing the image to be reprojected.

	gd:	Generic descriptor containing the above descriptor.

	scale:	2-element array giving the camera scale (radians/pixel) 
		in each direction for the reprojected image.  If not given, the
		scale of the input image is used.

	oaxis:	2-element array giving the image coordinates of the optic axis
		in the reprojected image.  If not given, the center of
		the reprojected image is used.

	size:	2-element array giving the size of the reprojected image.  If
		not given, the size of the input image is used.

	pc_xsize: X-Size of each image piece.  Default is 200 pixels.

	pc_xsize: Y-Size of each image piece.  Default is 200 pixels.

	fcp:	Focal coordinates of known reseau locations.

	scp:	Image coordinates in input image of detected reseau marks
		corresponding to those given by nmp.

	interp:	Type of interpolation to use.  Options are:
		'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.

  OUTPUT:
	image:	The output image, which is also placed in the data descriptor.


 RETURN:
	Data descriptor containing the reprojected image.


 PROCEDURE:
	The input image is divided into pieces and tranformed one piece at 
	a time.  There are two modes of operation: If nmp and scp are
	given, then the image is transformed using them as control points.
	Otherwise, the image is transformed using whatever camera transformation
	is specified in the camera descriptor.


 STATUS:
	Control-point scheme not yet implemented.


 SEE ALSO:
	pg_resfit, pg_resloc


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2002
	




















































PG_MAP
------


 PURPOSE:
	Generates map projections.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_map(dd, md=md, cd=cd, gbx=gbx, sund=sund)
	result = pg_map(dd, gd=gd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing image to be projected.

 KEYWORDS:
  INPUT:
	md:	Map descriptor describing the projection.

	cd:	Camera descriptor describing the image to be projected.

	bx:	Subclass of BODY giving the body to be projected.  Can be
		GLOBE or RING.  Only bodies whose names match that in the
		map descriptor are mapped.

	gbx:	Globe descriptor describing the body to be projected.  
		This argument is kept for compatibility with earlier
		code.  It is recommended that you use the 'bx' argument
		instead.

	dkx:	Disk descriptor describing the body to be projected.  
		This argument is kept for compatibility with earlier
		code.  It is recommended that you use the 'bx' argument
		instead.

	sund:	Star descriptor for the sun.  If given, points behind the
		terminator are excluded.

	gd:	Generic descriptor.  If given, the above descriptor inputs 
		are taken from the corresponding fields of this structure
		instead of from those keywords.

	hide_fn:	String giving the name of a function whose purpose
			is to exclude hidden points from the map.  The only
			function currently packaged is 'pm_hide_ring', which
			takes a ring descriptor as data (see next keyword).

	hide_data_p:	Pointer to data for the hide function.

	aux_names:	Array (naux) giving udata names for additional data
			descriptor planes to reproject.  The dimensions of these
			planes must be the same as the image. 

	pc_xsize, pc_ysize:	The map is generated in pieces of size pc_xsize
				x pc_ysize.   Default is 100 x 100 pixels.

	bounds:		Projection bounds specified as [lat0, lat1, lon0, lon1].

	edge:	Minimum proximity to image edge.  Default is 0.

	roi:	Subscripts in the output map specifying the map region
		to project, instead of the whole thing.

	interp:	Type of interpolation, see image_interp_cam.

	arg_interp:	Interpolation argument, see image_interp_cam.

	offset:	Offset in [lat,lon] to apply to map coordinates before 
		projecting.

	smooth:	If set, the input image is smoothed before reprojection.

	test_factor:	If set, a test map, reduced in size by this factor,
			is projected to determine the roi.  For maps with
			large blank areas, this may speed up the projection
			greatly.


  OUTPUT:
	map:	For convenience, the generated map is returned here as
		well as in the returned data descriptor.


 RETURN:
	Data descriptor containing the output map.  The instrument field is set
	to 'MAP'.  User data arrays are created for the reprojected aux_names
	arrays.


 STATUS:
	Complete


 SEE ALSO:
	pg_mosaic


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	Modified:	Daiana DiNino; 7, 2011 : test_factor
	

























PG_MASK
-------


 PURPOSE:
	Uses the given geometry to compute an image mask for all objects
	in a scene.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	mask = pg_mask(dd, cd=cd, gbx=gbx, dkx=dkx, bx=bx, sund=sund)
	mask = pg_mask(dd, gd=gd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image to be despiked.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Globe descriptors.

	dkx:	Disk descriptors.

	bx:	Body descriptors (i.e. point sources).

	sund:	Star descriptor giving the sun.

	gd:	Generic descriptor containing the above descriptors.

	fgbx,fdkx:	Fractonal amount to increase the radii of each
			descriptor type.

	dgbx,ddkx,dbx:	Absolute amount, in physical units (e.g. meters), to 
			increase the radii of each descriptor type.

	pgbx,pdkx,pbx:	Abolute amount, in pixels, to increase the radii of each
			descriptor type.

  OUTPUT:
	limb_ps:	points_struct giving the computed limb points.

	term_ps:	points_struct giving the computed terminator points.

	disk_ps:	points_struct giving the computed disk points.

	body_ps:	points_struct giving the computed body points.


 RETURN:
	Data descriptor containing a byte image in which pixels corresponding 
	to objects are set to 1.


 STATUS:
	Complete.


 SEE ALSO:
	pg_spikes


 MODIFICATION HISTORY:
 	Written by:	Spitale, 4/2004
	

























































PG_MEASURE
----------


 PURPOSE:
	Allows the user to measure quantities between two points in an 
	image using the mouse in the current graphics window.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_measure, dd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image.  Multiple data 
		descriptors may be given and the pixel values for each will 
		be displayed.  However, descriptors for only one of the data
		descriptors may be given.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	cd:	Camera descriptor.  Must be included for planet and ring
		coordinate, RA/DEC, and photometric output.  A map descriptor
		may be substitued for this argument, in which case ring
		coordinates, RA/DEC, and photometric data are not output.

	gbx:	Object descriptors, subclass of 'GLOBE'.  Must be included for 
		planet coordinate output.

	dkx:	Object descriptors, subclass of 'DISK'.  Must be included for 
		ring coordinate output.

	sund:	Star descriptor specifying the state of the sun.

	gd:	Generic descriptor.  If given, the above object descriptors are
		taken from this structure.

	radec:	If set, right ascension and declination differences with 
		respect to the inertial coordinate system are output for 
		each selected pair. 

	xy:	If set, this is taken as the first point, and the user selects
		only the second point. 

	fn:	Name of a function to be called whenever a ppoint is selected. 
		The function is called as follows:

		value = call_function(fn, p, image, gd=gd, $
                                               format=_format, label=label)

		p is the image coords of the select ed point, image is the 
		input image and gd is a generic descriptor containing the 
		object descriptors.  format and label are outputs used to label
		the returned value.

	silent:	If set, no string is printed, although the 'string' output
		keyword remains valid.


  OUTPUT:
	string:	The string that's printed.  If /silent is specified, this
		string is valid, but not printed.

	values: Array (nfn,2,npoints) giving the numerical results in the order
		that they appear in the output.

	p:	Array (2,2) giving the selected points.


 RETURN:
	NONE


 STATUS:
	Ring photometry is not yet implemented.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 3/2002
	











































PG_MOSAIC
---------


 PURPOSE:
	Combines two or more maps into one.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_mosaic(dds)


 ARGUMENTS:
  INPUT:
	dds:	Array of data descriptors containing the maps to be combined.
		Maps must all be of the same size and data type.

  OUTPUT:
	mosaic:	The mosaic image array.


 KEYWORDS:
  INPUT:
	combine_fn:	Name of function to be called to combine the maps.  
			Default is 'median'.

	wt_fns:		Names of functions to be called to weight the maps.  

	data:		Data to be passed to combine_fn.

	weight:		Array of weights, one for each input dd.

       pc_xsize:	x size of mosaic work pieces.  Smaller pieces save
			memory, but increase run time.

       pc_ysize:	y size of mosaic work pieces.


  OUTPUT:
	mosaic:		Image array giving the output mosiac.


 RETURN:
	Data descriptor containing the mosaic.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale 1/2002
	









PG_MOVE
-------


 PURPOSE:
	Translates and rotates the given points.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_move, object_ps, dxy, dtheta, axis_ps=axis_ps


 ARGUMENTS:
  INPUT:
	object_ps:	Array (n_objects) of points_struct containing the
			image points to be moved.

	dxy:		2-element array specifying the translation as [dx,dy].

	dtheta:		Rotation angle in radians.

  OUTPUT:
	object_ps:	The input points are be modified on return.


 KEYWORDS:
  INPUT:
	axis_ps:	points_struct containing a single image point
			to be used as the axis of rotation.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:
	pg_drag


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	















PG_NORTHANGLE
-------------


 PURPOSE:
	Computes the angle between the image-coordinate y-axis and the 
	projected z-axis of the given body.  Increasing angle corresponds to 
	clockwise rotation in the image. 


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	northangle = pg_northangle(cd=cd, bx=bx)
	northangle = pg_northangle(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	bx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

	gd:	Generic descriptor.  If given, the cd and bx inputs 
		are taken from the cd and bx fields of this structure
		instead of from those keywords.

  OUTPUT: NONE


 RETURN:
	Array (n_objects) of double giving the northangles in radians.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2001
	
















PG_PHOTOM
---------


 PURPOSE:
	Photometric image correction for disk or globe objects.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_photom(dd, cd=cd, gbx=gbx)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing image to correct.


  OUTPUT:
	NONE

 KEYWORDS:
  INPUT:
	cd:	Camera descriptor

	gbx:	Globe descriptor

	dkx:	Disk descriptor

	sund:	Sun descriptor

	gd:	Generic descriptor.  If present, cd, dkx, and gbx are taken 
		from here if contained.

 	outline_ps:	points_struct with image points outlining the 
			region of the image to correct.  To correct the entire
			planet, this input could be generated using pg_limb(). 
			If this keyword is not given, the entire image is used.

	refl_fn:	String naming reflectance function to use.  Default is
			'pht_minneart'.

	refl_parms:	Array of parameters for the photometric function named
			by the 'refl_fn' keyword.

	phase_fn:	String naming phase function to use.  Default is none.

	phase_parms:	Array of parameters for the photometric function named
			by the 'phase_fn' keyword.

  OUTPUT:
	emm_out:	Image emission angles.

	inc_out:	Image incidence angles.

	phase_out:	Image phase angles.


 RETURN:
	Data descriptor containing the corrected image.  The photometric angles
	emm, inc, and phase are placed in the user data arrays with the tags
	'EMM', 'INC', and 'PHASE' respectively.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/2004
	


























































PG_PHOTOM_DISK
--------------


 PURPOSE:
	Photometric image correction for disk objects.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_photom_globe(dd, cd=cd, gbx=gbx)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing image to correct.


  OUTPUT:
	NONE

 KEYWORDS:
  INPUT:
	cd:	Camera descriptor

	dkx:	Disk descriptor

	sund:	Sun descriptor

	gbx:	Globe descriptor for the primary planet.

	gd:	Generic descriptor.  If present, cd and gbx are taken from 
		here if contained.

 	outline_ps:	points_struct with image points outlining the 
			region of the image to correct.  To correct the entire
			disk, this input could be generated using pg_ring(). 
			If this keyword is not given, the entire image is used.
			If two arrays are given, they are taken as the inner
			and outer boundaries.

	refl_fn:	String naming reflectance function to use.  Default is
			'pht_minneart'.

	refl_parms:	Array of parameters for the photometric function named
			by the 'refl_fn' keyword.

	phase_fn:	String naming phase function to use.  Default is none.

	phase_parms:	Array of parameters for the photometric function named
			by the 'phase_fn' keyword.

  OUTPUT:
	emm_out:	Image emission angles.

	inc_out:	Image incidence angles.

	phase_out:	Image phase angles.


 RETURN:
	Data descriptor containing the corrected image.  The photometric angles
	emm, inc, and phase are placed in the user data arrays with the tags
	'EMM', 'INC', and 'PHASE' respectively.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002 (pg_photom)
	 Spitale, 6/2004:	changed to pg_photom_disk
	























































PG_PHOTOM_GLOBE
---------------


 PURPOSE:
	Photometric image correction for globe objects.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_photom_globe(dd, cd=cd, gbx=gbx)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing image to correct.


  OUTPUT:
	NONE

 KEYWORDS:
  INPUT:
	cd:	Camera descriptor

	gbx:	Globe descriptor

	sund:	Sun descriptor

	gd:	Generic descriptor.  If present, cd and gbx are taken from 
		here if contained.

 	outline_ps:	points_struct with image points outlining the 
			region of the image to correct.  To correct the entire
			planet, this input could be generated using pg_limb(). 
			If this keyword is not given, the entire image is used.

	refl_fn:	String naming reflectance function to use.  Default is
			'pht_refl_minneart'.

	refl_parms:	Array of parameters for the photometric function named
			by the 'refl_fn' keyword.

	phase_fn:	String naming phase function to use.  Default is none.

	phase_parms:	Array of parameters for the photometric function named
			by the 'phase_fn' keyword.

  OUTPUT:
	emm_out:	Image emission angles.

	inc_out:	Image incidence angles.

	phase_out:	Image phase angles.


 RETURN:
	Data descriptor containing the corrected image.  The photometric angles
	emm, inc, and phase are placed in the user data arrays with the tags
	'EMM', 'INC', and 'PHASE' respectively.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002 (pg_photom)
	 Spitale, 6/2004:	changed to pg_photom_globe
	



























































PG_POINTS
---------


 PURPOSE:
	Concatenates the given points_struct's into an array of image
	points.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_points(object_ps)


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct.	

 KEYWORDS:
  INPUT: 
	all:	If set, all points are returned, regardless of flag settings.

	name:	If set, points are returned only from points structures
		with the these names.

  OUTPUT: NONE


 RETURN:
	Array (2,n) of image points.


 STATUS:
	Complete


 SEE ALSO:
	pg_vectors


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	




















PG_PROFILE_IMAGE
----------------


 PURPOSE:
	Generates a dn profile along a line in an image.

 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
    result = pg_profile_image(dd, cd=cd, outline_ps)


 ARGUMENTS:
  INPUT:
	  dd:	Data descriptor.

 outline_ps:   points_struct giving the outline of the region to plot,
               as produced by the pg_image_sector.

  OUTPUT:
        NONE

 KEYWORDS:
  INPUT:
	  cd:	Camera descriptor.

         gd:   Optional generic descriptor containing cd.

     interp:   Type of interpolation to use.  Options are:
               'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.

 arg_interp:   Arguments to pass to the interpolation function.


  OUTPUT:
    profile:   The profile.

      sigma:   Array giving the standard deviation at each point in the
		profile.

    distance:  Array giving the distance, in pixels, along the profile.

   image_pts:  Image point for each point along the profile.


 RETURN:
	Two data descriptors: the first contains the profile; the second contains
	the profile sigma.


 MODIFICATION HISTORY:
       Written by:     Spitale, 6/2005
	










PG_PROFILE_RING
---------------


 PURPOSE:
	Generates radial or longitudinal ring profiles from the given image
	using an image outline.

 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
    result = pg_profile_ring(dd, cd=cd, dkx=dkx, gbx=gbx, outline_ps)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

       outline_ps:    points_struct giving the outline of the sector to plot,
                      as produced by the pg_ring_sector.

  OUTPUT:
        NONE

 KEYWORDS:
  INPUT:
	  cd:	Camera descriptor.

        dkx:   Disk descriptor.

	 gbx:   Array  of descriptors of objects which must be a subclass 
               of GLOBE, describing the primary body for dkx.  For each
               timestep, only the first descriptor is used.

         gd:   Generic descriptor, if used, cd and dkx taken from it unless
               overriden by cd and dkx arguments.

  azimuthal:   If set, the plot is longitudinal instead of radial.

       bin:    If set, pixels in sector are binned according to
               radius or longitude rather than dn averaged at equal
               radius or longitude spacing

    interp:    Type of interpolation to use: 'nearest', 'bilinear', 'cubic',
               or 'sinc'.  'sinc' is the default.

 arg_interp:   Arguments to pass to the interpolation function.

   frame_bd:   Subclass of BODY giving the frame against which to 
               measure inclinations and nodes, e.g., a planet 
               descriptor.  One per bx.

    anomaly:   If set, longitudes in outline_ps are interpreted instead
               as anomalies.

  OUTPUT:
    profile:   The profile.

    dsk_pts:	Array of disk coordinates corresponding to each value in the
		returned dn profile.

    im_pts:	Array of image coordinates corresponding to each value in the
		returned dn profile.

      sigma:   Array giving the standard deviation at each point in the
		profile.

      width:   Array giving the width of the scan, in pixels along the 
               averaging direction, at each point in the profile.

         nn:   Number of image samples averaged into each profile point.

 RETURN:
	Two data descriptors: the first contains the profile; the second contains
	the profile sigma.


 PROCEDURE:
	The image points of the sector outline are first calculated.  If 
       /outline is selected then this is output.  If not, then the
       /azimuthal keyword determines if this is a radius or longitude 
       profile.  The radius and longitude spacing for profile is then is 
       determined. If n_lon or n_rad is given, then these are used.  If not,
       then the outline is used to determine the spacing in radius and
       longitude so that the maximum spacing is a pixel.  If oversamp is
       given then the number of samples is multiplied by this factor.
       Then the image is sampled with this radius x longitude grid and
       the dn interpolated with the routine image_interp at each point.
       The dn's are then averaged along the requested profile direction.
       If /bin keyword is selected then the image is not interpolated but
       rather each pixel is binned in a histogram with the calculated
       spacing.


 EXAMPLE:
     lon = [175.,177.]
     rad = [65000000.,138000000.]
     outline_ps = pg_ring_sector(cd=cd, dkx=rd, gbx=pd, rad=rad, lon=lon)
     pg_draw, outline_ps

     profile = pg_profile_ring(dd, cd=cd, dkx=rd, gbx=pd, $
                                          outline_ps, dsk_pts=dsk_pts)
     window, /free, xs=500, ys=300
     plot, dsk_pts[*,0], profile


 MODIFICATION HISTORY:
       Written by:     Vance Haemmerle & Spitale, 6/1998
	Modified to use outline_ps instead of (rad,lon): Spitale 5/2005
	




















PG_PTASSOC
----------


 PURPOSE:
	Associates points between two arrays by searching for the most
	frequent offset between the two.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	assoc_scan_ps = pg_ptassoc(scan_ps, model_ps, assoc_model_ps)


 ARGUMENTS:
  INPUT:
	scan_ps:	points_struct(s) containing first array, typically
			an array of candidate points detected in an image.

	model_ps:	points_struct(s) containing the second array, typically
			an array of computed model points.

  OUTPUT: 
	assoc_model_ps:	points_struct containing the output model points.  
			Each of these points is associated with a point
			in the returned array.  If this argument is not
			present, the model_ps array is overwritten with
			the output model points.


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	points_struct containing an associated scan point for each output
	model point in assoc_model_ps.  


 PROCEDURE:
	Points are associated by searching for the most frequent offset
	between scan points and model points.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 
	pg_cvchisq, pg_ptchisq, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Spitale, 3/2004
	





PG_PTCHISQ
----------


 PURPOSE:
	Computes chi-squared value for given point fit parameters.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	chisq = pg_ptchisq(dxy, dtheta, scan_ps, axis_ps=axis_ps)


 ARGUMENTS:
  INPUT:
	dxy:		2-element vector giving the translation as [dx,dy].

	dtheta:		Rotation in radians.

	scan_ps:	Array (n_points) of points_struct output from
			pg_ptscan containing scanned image points as well as
			other necessary scan data.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	axis_ps:	points_struct containing a single image  point
			to be used as the axis of rotation.

	fix:		Array specifying which parameters to fix as
			[dx,dy,dtheta].

  OUTPUT: NONE


 RETURN:
	Single chi-square values for totality of points.


 RESTRICTIONS:
	The caller is responsible for ensuring that the input parameters are
	consistent with those used with other programs like pg_fit.


 STATUS:
	Complete


 SEE ALSO:
	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff,
	pg_ptchisq, pg_fit, pg_threshold


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 12/1998
	





PG_PTCNTRD
----------


 PURPOSE:
	Attempts to find points of highest correlation with a given model
	centered near given features in an image, then returns the centroid.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_ptcntrd(dd, object_ps)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor

	object_ps: 	Array (n_pts) of points_struct giving the points.
			Only the image coordinates of the points need to be
			specified.

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
       model:          Point spread model to be used in correlation.  If
                       not given a default gaussian is used.

       width:          Width to search around expected point location.  If
                       not given, a default width of 20 pixels is used.

       edge:           Distance from edge from which to ignore points.  If
                       not given, an edge distance of 0 is used.

       ccmin:          If given, points are discarded if the correlation
                       is below this value.

       gdmax:          If given, points are discarded if the gradiant of
                       the correlation function is higher than this value.

  OUTPUT: NONE


 RETURN:
	An array of type points_struct giving the detected position for
       each object.  The correlation coeff values for each detection is
       saved in the data portion of points_struct with tag 'scan_cc'.
       The x and y offset from the given position is also saved.


 SIDE EFFECTS:
	xx


 RESTRICTIONS:
	Currently does not work for multiple time steps.


 PROCEDURE:
	For each visible object, a section of the image of size width +
       the size of the model is extracted and sent to routine ptloc to
       find the pixel offset with the highest correlation with the given
       model. Then call astrolib routine cntrd to return centroid.


 EXAMPLE:
	To find stellar positions with a correlation higher than 0.6...

       star_ps=pg_center(bx=sd, gd=gd) & pg_hide, star_ps, gd=gd, /rm, /globe
       ptscan_ps=pg_ptscan(dd, star_ps, edge=30, width=40, ccmin=0.6)

 SEE ALSO:
	ptscan, pg_ptscan

 STATUS:
	Complete.


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 5/1998
	














































PG_PTFARSCAN
------------


 PURPOSE:
	Attempts to find all occurrences of a model in an image.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_ptfarscan(dd)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
       model:          Point spread model to be used in correlation.  If
                       not given a default gaussian is used.

	wmod:		x, ysize of default gaussian model.

	wpsf:		Half width of default gaussian psf model.

       edge:           Distance from edge from which to ignore points.  If
                       not given, an edge distance of 0 is used.

       gdmax:		If given, the maximum gradiant of correlation coefficient 
			to accept. 

       ccmin:          Minimum correlation to consider in search.  Default
			is 0.8.

       gdmax:          If given, points where the gradient of the
                       correlation function is higher than this value
			are not considered in the search.

	sky:		If set, it is assumed that the image contains only
			point sources and sky.  Any object more than nsig
			standard deviations above the image mean are
			selected as candidates. 

	nsig:		For use with the /sky option, standard deviation 
			threshold for detecting point sources.

	nmax:		Max. number of point sources to return.  If more
			are found, nsig is raised until thiws is satisified.

	smooth:		If given, the input image is smoothed using
			this width before any further processing.

	median:		If given, the input image is filtered using
			a median filter of this width before any further
			processing.

	mask:		If set, an attempt is made to mask out extended
			objects before performing the scan

	extend:		If nonzero, star masks are extended by this
			many pixels in all directions.

	name:		Name to use for the returned points structures.

  OUTPUT: NONE


 RETURN:
	An array of type points_struct giving the detected position for
       each object.  The correlation coeff value for each detection is
       saved in the data portion of points_struct with tag 'scan_cc'.


 SEE ALSO:
	pg_ptscan

 STATUS:
	Complete.


 MODIFICATION HISTORY:
 	Written by:	Spitale 2/2004 
	










































PG_PTSCAN
---------


 PURPOSE:
	Attempts to find points of highest correlation with a given model
	centered near given features in an image.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_ptscan(dd, object_ps)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor

	object_ps: 	Array (n_pts) of points_struct giving the points.
			Only the image coordinates of the points need to be
			specified.

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
       model:          Point spread model to be used in correlation.  If
                       not given a default gaussian is used.

	wmod:		x, ysize of default gaussian model.

	wpsf:		Half-width of default gaussian psf model.

       width:          Width to search around expected point location.  If
                       not given, a default width of 20 pixels is used.

	radius:		Width outside of which to exclude detections whose
			offset varies too far from the most frequent offset.
			Detections with offsets outside this radius receive
			correlation coefficients of zero.

       edge:           Distance from edge from which to ignore points.  If
                       not given, an edge distance of 0 is used.

       ccmin:          If given, points are discarded if the correlation
                       is below this value.

	chisqmax:	Max chisq between the model and the image.

       gdmax:          If given, points are discarded if the gradiant of
                       the correlation function is higher than this value.

	smooth:		If given, the input image is smoothed using
			this width before any further processing.

	median:		If given, the input image is filtered using
			a median filter of this width before any further
			processing.

  OUTPUT: NONE


 RETURN:
	An array of type points_struct giving the detected position for
       each object.  The correlation coeff value for each detection is
       saved in the data portion of points_struct with tag 'scan_cc'.
       The x and y offset from the given position is also saved.


 RESTRICTIONS:
	Currently does not work for multiple time steps, only considers
	one point per given points_struct.


 PROCEDURE:
	For each visible object, a section of the image of size width +
       the size of the model is extracted and sent to routine ptloc to
       find the pixel offset with the highest correlation with the given
       model.


 EXAMPLE:
	To find stellar positions with a correlation higher than 0.6...

       star_ps=pg_center(bx=sd, gd=gd) & pg_hide, star_ps, gd=gd, /rm, /globe
       ptscan_ps=pg_ptscan(dd, star_ps, edge=30, width=40, ccmin=0.6)

 SEE ALSO:
	pg_ptfarscan

 STATUS:
	Complete.


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 5/1998
	Modified:	Spitale 9/2002 -- added twice model width to search
			width.
	





























PG_PTSCAN_COEFF
---------------


 PURPOSE:
	Computes linear least-squares coefficients for a fit to the image
	coordinate offset which matches a point to a feature in an image.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_ptscan_coeff(pts_ps)


 ARGUMENTS:
  INPUT:
       pts_ps:         Array (n_pts) of points_struct output from
                       pg_ptscan containing image points as well as
                       other necessary data.;

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
       axis_ps:        points_struct containing a single image point
                       to be used as the axis of rotation in the fit for
                       every point.

       fix:            Array specifying which parameters to fix in the
                       fit as [dx,dy,dtheta].; 

  OUTPUT: NONE

 RETURN:
       Array (n_pts) of pg_fit_coeff_struct containing coefficients for
       the least-square fit to be input to pg_fit.


 PROCEDURE:
       pg_ptscan_coeff extracts the scan data from the given
       scan_ps structure and uses ipt_coeff to compute the coefficients.
       See the documentation for that routine for details.


 EXAMPLE:
       The following command uses data from pg_ptscan to compute
       least square coefficients for a fit such that only dx and dtheta
       will be allowed to vary:

       optic_ps={points_struct}
       optic_ps=pgs_set_points(optic_ps, points=cam_oaxis(cd))
       ptscan_cf = pg_ptscan_coeff(pts_ps, axis=optic_ps, fix=[1])

       In this call, pts_ps is a points_struct containing the point data
       from pg_ptscan and optic_ps is a points_struct giving the optic axis
       of the camera as computed by cam_oaxis.


 STATUS:
	Complete.


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 5/1998
	































































PG_PUT_CAMERAS
--------------


 PURPOSE:
	Outputs camera descriptors through the translators.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_put_cameras, dd, cd=cd
	pg_put_cameras, dd, gd=gd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	cds:	Camera descriptors to output.

	gd:	Generic descriptor.  If present, camera descriptors are
		taken from the gd.cd field.

	cam_*:		All camera override keywords are accepted.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  

  OUTPUT:
	NONE


 SIDE EFFECTS:
	Translator-dependent.  The data descriptor may be affected.


 PROCEDURE:
	Camera descriptors are passed to the translators.  Any camera
	keywords are used to override the corresponding quantities in the
	output descriptors.


 STATUS:
	Complete


 SEE ALSO:
	pg_put_planets, pg_put_rings, pg_put_stars, pg_put_maps


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	




























































PG_PUT_MAPS
-----------


 PURPOSE:
	Outputs map descriptors through the translators.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_put_maps, dd, md=md
	pg_put_maps, dd, gd=gd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	mds:	Map descriptors to output.

	gd:	Generic descriptor.  If present, map descriptors are
		taken from the gd.md field.

	map_*:		All map override keywords are accepted.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  

  OUTPUT:
	NONE


 SIDE EFFECTS:
	Translator-dependent.  The data descriptor may be affected.


 PROCEDURE:
	Map descriptors are passed to the translators.  Any map
	keywords are used to override the corresponding quantities in the
	output descriptors.


 STATUS:
	Complete


 SEE ALSO:
	pg_put_planets, pg_put_rings, pg_put_stars, pg_put_cameras


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	




























































PG_PUT_PLANETS
--------------


 PURPOSE:
	Outputs planet descriptors through the translators.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_put_planets, dd, pd=pd
	pg_put_planets, dd, gd=gd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	pds:	Planet descriptors to output.

	gd:	Generic descriptor.  If present, planet descriptors are
		taken from the gd.pd field.

	plt_*:		All planet override keywords are accepted.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  

  OUTPUT:
	NONE


 SIDE EFFECTS:
	Translator-dependent.  The data descriptor may be affected.


 PROCEDURE:
	Planet descriptors are passed to the translators.  Any planet
	keywords are used to override the corresponding quantities in the
	output descriptors.


 STATUS:
	Complete


 SEE ALSO:
	pg_put_cameras, pg_put_rings, pg_put_stars, pg_put_maps


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	




























































PG_PUT_RINGS
------------


 PURPOSE:
	Outputs ring descriptors through the translators.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_put_rings, dd, rd=rd
	pg_put_rings, dd, gd=gd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	rds:	Ring descriptors to output.

	gd:	Generic descriptor.  If present, ring descriptors are
		taken from the gd.rd field.

	rng_*:		All ring override keywords are accepted.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  

  OUTPUT:
	NONE


 SIDE EFFECTS:
	Translator-dependent.  The data descriptor may be affected.


 PROCEDURE:
	Ring descriptors are passed to the translators.  Any ring
	keywords are used to override the corresponding quantities in the
	output descriptors.


 STATUS:
	Complete


 SEE ALSO:
	pg_put_planets, pg_put_cameras, pg_put_stars, pg_put_maps


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	




























































PG_PUT_STARS
------------


 PURPOSE:
	Outputs star descriptors through the translators.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_put_stars, dd, sd=sd
	pg_put_stars, dd, gd=gd


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor.

	trs:	String containing keywords and values to be passed directly
		to the translators as if they appeared as arguments in the
		translators table.  These arguments are passed to every
		translator called, so the user should be aware of possible
		conflicts.  Keywords passed using this mechanism take 
		precedence over keywords appearing in the translators table.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	sds:	Star descriptors to output.

	gd:	Generic descriptor.  If present, star descriptors are
		taken from the gd.sd field.

	str_*:		All star override keywords are accepted.

	tr_override:	String giving a comma-separated list of translators
			to use instead of those in the translators table.  If
			this keyword is specified, no translators from the 
			table are called, but the translators keywords
			from the table are still used.  

  OUTPUT:
	NONE


 SIDE EFFECTS:
	Translator-dependent.  The data descriptor may be affected.


 PROCEDURE:
	CameStarra descriptors are passed to the translators.  Any star
	keywords are used to override the corresponding quantities in the
	output descriptors.


 STATUS:
	Complete


 SEE ALSO:
	pg_put_planets, pg_put_rings, pg_put_cameras, pg_put_maps


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	




























































PG_RANGE
--------


 PURPOSE:
	Computes distance between the centers of two bodies.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	range = pg_center(bx1, bx2)


 ARGUMENTS:
  INPUT:
	bx1:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

	bx2:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

  OUTPUT: NONE


 RETURN:
	Array (n_objects) doubles giving the ranges.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2001
	




























PG_RAY
------


 PURPOSE:
	Computes image points on each specified ray.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	ray_ps = pg_ray(cd=cd, r=r, v=v)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	 Array (nt) of camera descriptors.

	bx:	 Array (nt) of body descriptors to be used for transforming
		 the points instead of the camera descriptor.  Use this
		 input if cd is a map.

	r:	 Array (nv,3,nt) of inertial vectors giving the starting
		 point for each ray.

	v:	 Array (nv,3,nt) of inertial unit vectors giving the direction
		 for each ray.

	len:	 Array (nv,nt) giving the length for each ray.  Lengths 
		 default to 1 if not given.

	gd:	 Generic descriptor.  If given, the cd input 
		 is taken from the cd field of this structure
		 instead of from that keyword.

	npoints: Number of points to compute.  Default is 1000.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

	cat:	 If set, all points for each descriptor are concatenated
		 into a single array of nv*npoints points.

  OUTPUT: NONE


 RETURN:
	Array (nt) of points_struct each containing image
	points (2,nv,npoints) and the corresponding inertial vectors 
	(nv,3,npoints).  



 STATUS:
	


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2012
	




























































PG_REFLECTION_DISK
------------------


 PURPOSE:
	Computes image coordinates of given inertial vectors reflected onto
	surface of the given disk with respect to the given observer.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_reflection_disk(object_ps, cd=cd, ods=ods, dkx=dkx)


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	dkx:	Array (n_disks, n_timesteps) of descriptors of objects 
		which must be a subclass of DISK.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the source from which points are projected.  If no observer
		descriptor is given, then the camera descriptor in gd is used.
		Only one observer is allowed.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, disks whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	fov:	 If set reflection points are cropped to within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

  OUTPUT: NONE


 RETURN: NONE
	Array (n_disks,n_objects) of points_struct containing image 
	points and the corresponding inertial vectors.


 STATUS:
	


 SEE ALSO:
	pg_reflection, pg_reflection_globe


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	






























































PG_REPOINT
----------


 PURPOSE:
	Modifies the camera orientation matrix based on the given image
	coordinate translation and rotation.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_repoint, cd=cd, dxy, dtheta, axis_ps=axis_ps
	pg_repoint, gd=gd, dxy, dtheta, axis_ps=axis_ps


 ARGUMENTS:
  INPUT:
	dxy:		Array (2,1,nt) or (2,1) specifying the
			translation as [dx,dy] in pixels.

	dtheta:		Array (nt) specfying the rotation angle in radians.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	 Array (nt) of camera descriptors.

	gd:	 Generic descriptor.  If given, the cd input is taken from the
		 cd field of this structure instead of from that keyword.

	axis_ps: points_struct containing a single image point
		 to be used as the axis of rotation.  Default is the camera
		 optic axis.

	bore_cd:  Array (nt) of camera descriptors from which to copy the 
		  new orientation instead of using dxy, dtheta, and axis_ps.

	bore_rot: If given, the orientation from bore_cd will be rotated
		  using this rotation matrix (3,3) before being copied.

	bore_dxy: Boresight offset in pixels.


  OUTPUT:
	cd:	 If given, the camera descriptor is modified with a new
		 orientation matrix.

	gd:	 If given in this way, the camera descriptor contained in the
		 generic descriptor is modified with a new orientation matrix.


 RETURN: NONE


 SIDE EFFECTS:
	pg_repoint adds its name to the task list of each given camera
	descriptor.


 STATUS:
	Complete


 SEE ALSO:
	pg_fit, pg_drag


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	

























































PG_REPOS
--------


 PURPOSE:
	Modifies the body position based on the given offset and observer.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_repos, bx=bx, dv
	pg_repos, bx=bx, dv, od=od


 ARGUMENTS:
  INPUT:
	dv:		Array (nv,3,nt) specifying the translation vector.
			The components are assumed to be given wrt to the 
			inertial frame unless od is given.  In that case
			dv is interpreted as a vector in the body frame of od.

			For convenience, if dv is given in the nonstandard form
			of a 3-element array, it is reinterpreted as a column 
			vector (1,3).

			If ref_bx is given, then dv is interpreted as a distance
			and the direction is constructed from one of the directional
			keywords below.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	 bx:	   Array (nt) of body descriptors to translate.

	 od:	   Observer descriptor; specifies the body frame for the
		   translation vector.

	 gd:	   Generic descriptor.  If given, the bx and od inputs are 
		   taken from this structure instead of the argument list.

	 ref_bx:   Body descriptor giving reference position for directional
		   keywords.

	toward:    Body should be translated toward ref_bx (default).

	away:      Body should be translated away from ref_bx.

	at:        Body should be placed at the position of ref_bx.

	along:     Index of bx axis along which to translate.


  OUTPUT:
	NONE.


 RETURN: NONE


 SIDE EFFECTS:
	pg_repos modifies bx and adds its name to the task list of each given
	descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 3/2007
	
























































PG_RESFIT
---------


 PURPOSE:
	Computes polynomial coefficients for a camera distortion model by
	comparing detected reseaus with the known focal plane locations.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_resfit, scan_ps, foc_ps, n, cd=cd


 ARGUMENTS:
  INPUT:
	scan_ps:	points_struct containing image coordinates of 
			the scanned reseau candidates as output by pg_resloc.

	foc_ps:		points_struct containing the known focal
			coordinates of the reseau marks.

	n:		Order of polynomial to fit.  Default is 4.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
       cd:		Camera descriptor to be modified.

       gd:		Generic descriptor containing the camera descriptor 
			to be modified.

       range:		Range to use in associating candidate reseaus
			with known reseaus. default is 10 pixels.

	assoc:		If set, the program returns after generating 
			the scan_sub array, but before fitting the polynomial
			coefficients.

	nom_ps:		If given, this points_struct contains image
			coordinates of nominal reseau locations corresponding 
			to each point in foc_ps.  The positions of each mark 
			for which there is no scan_ps match is computed 
			as the nominal position plus an offset determined
			by looking at the differences between neighboring
			scanned marks and their corresponding nominal positions.

	use_nom:	If set, scan_ps will be ignored and nom_ps will be used
			instead.

  OUTPUT:
	res_ps:		points_struct containing the new image
			coordinates of the known reseau marks.

	fcp:		points_struct returning the focal points from
			foc_ps that were able to be associated with a scanned
			reseau.

	scp:		points_struct returning the scanned points from
			scan_ps that were able to be associated with a
			known location.

 RETURN:
	NONE


 PROCEDURE:
	First, candidate reseaus are associated with nominal reseaus by 
	choosing the candidate with the highest correlation coefficient 
	within a given number of pixels surrounding each known reseau.

	Next, coefficients for a polynomial of order n are derived using a
	least-squares fit.


 STATUS:
	Complete


 SEE ALSO:
	pg_resloc, pg_linearize_image, pg_blemish


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2002
	








































PG_RESIDUALS
------------


 PURPOSE:
	Computes residuals value for given curve- or point-fit parameters.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	chisq = pg_residuals(scan_ps)


 ARGUMENTS:
  INPUT:
	scan_ps:	Array (n_curves) of points_struct output from
			pg_cvscan or pg_ptscan containing scan data.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	Array (2,n_curves) of residuals.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale
	

























PG_RESLOC
---------


 PURPOSE:
	Scans an image for candidate reseau marks.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_resloc(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image to scan.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
        edge:  Distance from edge within which points are ignored.

       ccmin:  Minimum correlation coefficient to accept.  Default is 0.8 . 

       gdmax:  Maximum gradiant of correlation coefficient to accept. 
		Default is 0.25

       model:  2-D array giving a model of the reseau image.  Default model
		is an inverted Gaussian.

	nom_ps:	If given, reseau marks are searched for only within the
		given radius about each nominal point.

	radius:	Radius about no_ps to search.  Default is ten pixels.

  OUTPUT:
	NONE


 RETURN:
	Points structure containing the image coordinates of each candidiate
	reseau mark and the corresponding correlation coefficients.  If not 
	marks are found, zero is returned.


 PROCEDURE:
	A correlation map is computed across image.  Candidates reseau marks 
	are identified as local maxima in the correlation map by accepting
	points where the correlation is above the specified threshold and 
	where the gradient of the correlation map is below the specified 
	threshold.


 STATUS:
	Complete


 SEE ALSO:
	pg_resfit, modloc


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1998
	






























































PG_RETARG
---------


 PURPOSE:
	Modifies the camera orientation such that the optic axis points 
	along a given vector, or toward a specified body.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_retarg, cd=cd, bx=bx


 ARGUMENTS:
  INPUT: 
	v:	Inertial vector giving new optic axis direction.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	 cd:	 Camera descriptor to repoint.

	 bx:	 Body descriptor at which to point.

	 gd:	 Generic descriptor.  If given, the cd and bx inputs are 
		 taken from this structure instead of the argument list.

	 toward: Camera should be pointed toward bx (default).

	 away:   Camera should be pointed away from bx.

	along:   Index of bx axis along which to point.


  OUTPUT:
	NONE.


 RETURN: NONE


 SIDE EFFECTS:
	pg_retarg modifies cd and adds its name to the task list of each given
	descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 3/2007
	







PG_RING_SECTOR
--------------

 PURPOSE:
	Allows the user to select a ring sector by clicking and dragging.
	With the left button, the sector is defined along lines of constant 
	radius and longitude.  With the right button, the sides of the sector
	are perpendicular to the projected radial direction.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     rad=pg_ring_sector(cd=cd, dkx=dkx, gbx=gbx)


 ARGUMENTS:
  INPUT:
      NONE

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

	   dkx:     Disk descriptor describing the ring.

          gbx:     Globe descriptor giving the primary for the ring.

           gd:     Generic descriptor containnig the above descriptors.

      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

        slope:     This keyword allows the longitude to vary from the
                   nominal direction as a function of radius as: 
                   lon = slope*(rad - rad0).

       sample:     Sets the grid sampling in pixels.  Default is one.

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

        nodsk:     If set, image points will not be included in the output 
                   points_struct.

    noverbose:     If set, messages are suppressed.

      rad,lon:     If set, these values are used as bounds for the ring 
                   the ring sector instead of pronpting the user. 


  OUTPUT:
       button:     Code of the detected button.


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point and the user fields
      'nrad' and 'nlon' giving the number of points in radius and longitude.


 MODIFICATION HISTORY : 
	J. Spitale ; 5/2005 -- Original pg_ring_sector renamed 
	                       pg_ring_sector_rad; this program created.























































PG_RING_SECTOR_BOX
------------------

 PURPOSE:
	Allows the user to select a box to use with pg_profile_ring.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps = pg_ring_sector_box()
     outline_ps = pg_ring_sector_box(corners)


 ARGUMENTS:
  INPUT:
      corners:	    Array of image points giving the corners of the box.
		    If not given, the user is prompted to select a box. 

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

    noverbose:     If set, messages are suppressed.

       sample:     Grid sampling, default is 1.


  OUTPUT:
       button:     Code of the detected button.


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.


 ORIGINAL AUTHOR : J. Spitale ; 6/2005












PG_RING_SECTOR_BOX_OBLIQUE
--------------------------

 PURPOSE:
	Allows the user to select an oblique box to use with pg_profile_ring.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_ring_sector_box_oblique()
     outline_ps=pg_ring_sector_box_oblique(corners)


 ARGUMENTS:
  INPUT:
      corners:	    Array of image points giving the four corners of the box.
		    If not given, the user is prompted to select a box. 


  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

        slope:     This keyword allows the longitude to vary from the
                   perpendicular direction as a function of radius as: 
                   lon = slope*(rad - rad0).

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

    noverbose:     If set, messages are suppressed.

       sample:     Grid sampling, default is 1.


  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point and the user fields
      'nrad' and 'nlon' giving the number of points in radius and longitude.


 ORIGINAL AUTHOR : J. Spitale ; 9/2006





PG_RING_SECTOR_BOX_ORTHO
------------------------

 PURPOSE:
	Allows the user to select a box to use with pg_profile_ring.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps = pg_ring_sector_box_ortho()
     outline_ps = pg_ring_sector_box_ortho(corners)


 ARGUMENTS:
  INPUT:
      corners:	    Array of image points giving the corners of the box.
		    If not given, the user is prompted to select a box. 

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

    noverbose:     If set, messages are suppressed.

       sample:     Grid sampling, default is 1.


  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.


 ORIGINAL AUTHOR : J. Spitale ; 6/2005












PG_RING_SECTOR_OBLIQUE
----------------------

 PURPOSE:
	Allows the user to select a ring sector by clicking and dragging.
	The top and bottom of the sector are defined along lines of constant 
	radius, while the sides are perpendicular to the image-projected
	radial direction.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_ring_sector_oblique(cd=cd, dkx=dkx, gbx=gbx)


 ARGUMENTS:
  INPUT:
      NONE

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

	   dkx:     Disk descriptor describing the ring.

          gbx:     Globe descriptor giving the primary for the ring.

           gd:     Generic descriptor containnig the above descriptors.

      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

        slope:     This keyword allows the longitude to vary from the
                   perpendicular direction as a function of radius as: 
                   lon = slope*(rad - rad0).

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

    noverbose:     If set, messages are suppressed.

       sample:     Grid sampling, default is 1.

        nodsk:     If set, image points will not be included in the output 
                   points_struct.

  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point and the user fields
      'nrad' and 'nlon' giving the number of points in radius and longitude.


 ORIGINAL AUTHOR : J. Spitale ; 5/2005





























































PG_RING_SECTOR_PERP
-------------------

 PURPOSE:
	Allows the user to select a ring sector by clicking and dragging.
	The top and bottom of the sector are defined along lines of constant 
	radius, while the sides are perpendicular to the image-projected
	radial direction.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_ring_sector_perp(cd=cd, dkx=dkx, gbx=gbx)


 ARGUMENTS:
  INPUT:
            p:     Corners of the sector.  If not given, the user selects
                   them by hand.

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

	   dkx:     Disk descriptor describing the ring.

          gbx:     Globe descriptor giving the primary for the ring.

           gd:     Generic descriptor containnig the above descriptors.

      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

       sample:     Sets the grid sampling in pixels.  Default is one.

        slope:     This keyword allows the longitude to vary from the
                   perpendicular direction as a function of radius as: 
                   lon = slope*(rad - rad0).

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

        nodsk:     If set, image points will not be included in the output 
                   points_struct.

    noverbose:     If set, messages are suppressed.


  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point and the user fields
      'nrad' and 'nlon' giving the number of points in radius and longitude.


 ORIGINAL AUTHOR : J. Spitale ; 5/2005



























































PG_RING_SECTOR_RAD
------------------

 PURPOSE:
	Allows the user to select a ring sector by clicking and dragging.
	The sector is defined along lines of constant radius and longitude.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_ring_sector_rad(cd=cd, dkx=dkx, gbx=gbx)


 ARGUMENTS:
  INPUT:
      NONE

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

	   dkx:     Disk descriptor describing the ring.

          gbx:     Globe descriptor giving the primary for the ring.

           gd:     Generic descriptor containing the above descriptors.

      win_num:     Window number of IDL graphics window in which to select
                   box, default is current window.

      restore:     Do not leave the box in the image.

           p0:     First corner of box.  If set, then the routine immediately 
                   begins to drag from that point until a button is released.

        color:     Color to use for rectangle, default is !color.

       sample:     Sets the grid sampling in pixels.  Default is one.

        slope:     This keyword allows the longitude to vary as a function 
                   of radius as: lon = slope*(rad - rad0).

 xor_graphics:     If set, the sector outline is drawn and erased using xor
                   graphics instead of a pixmap.

    noverbose:     If set, messages are suppressed.

        nodsk:     If set, image points will not be included in the output 
                   points_struct.


  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point and the user fields
      'nrad' and 'nlon' giving the number of points in radius and longitude.


 ORIGINAL AUTHOR : pg_ring_sector -- J. Spitale ; 8/94
 Modified: Haemmerle, 6/98
 renamed -- Spitale; 5/2005





























































PG_RING_SECTOR_RADLON
---------------------

 PURPOSE:
	Constructs a ring sector outline for use with pg_profile_ring given
	radius and longitude bounds.
 
 CATEGORY:
       NV/PG

 CALLING SEQUENCE:
     outline_ps=pg_ring_sector_radlon(cd=cd, dkx=dkx, gbx=gbx, rad, lon)


 ARGUMENTS:
  INPUT:
      rad:	2-element array giving the lower and upper radial bounds
		for the sector.

      lon:	2-elements array giving the lower and upper longitude bounds
		for the sector in radians.

  OUTPUT:
	NONE



 KEYWORDS:
  INPUT: 
           cd:     Camera descriptor.

	   dkx:     Disk descriptor describing the ring.

          gbx:     Globe descriptor giving the primary for the ring.

           gd:     Generic descriptor containnig the above descriptors.

       sample:     Sets the grid sampling in pixels.  Default is one.

         nlon:     Total number of samples in the longitude direction.  
                   Determined by the 'sample' keyword by default.

         nrad:     Total number of samples in the radial direction.  
                   Determined by the 'sample' keyword by default.

        slope:     This keyword allows the longitude to vary as a function 
                   of radius as: lon = slope*(rad - rad0).

        nodsk:     If set, image points will not be included in the output 
                   points_struct.

  OUTPUT:
         NONE


 RETURN: 
      points_struct containing points on the sector outline.  The point
      spacing is determined by the sample keyword.  The points structure
      also contains the disk coordinate for each point and the user fields
      'nrad' and 'nlon' giving the number of points in radius and longitude.


 ORIGINAL AUTHOR : 
	Spitale; 5/2005


PG_RM_DISK
----------


 PURPOSE:
	Hides the given points with respect to each given disk and observer
	at all given time steps.  Points are hidden whether they lie in
	front of or behind the disk.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_rm_disk, object_ps, cd=cd, od=od, dkx=dkx, gbx=gbx
	pg_rm_disk, object_ps, gd=gd, od=od


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

	hide_ps:	Array (n_disks, n_timesteps) of points_struct 
			containing the hidden points.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	dkx:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of DISK.

	gbx:	Array  of descriptors of objects which must be a subclass 
		of GLOBE, describing the primary body for dkx.  For each
		timestep, only the first descriptor is used.

	od:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the observer from which points are hidden.  If no observer
		descriptor is given, the camera descriptor is used.

	gd:	Generic descriptor.  If given, the cd and dkx inputs 
		are taken from the cd and dkx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, objects whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	cat:	If set, the hide_ps points are concatentated into a single
		points_struct.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The flags arrays in object_ps are modified.


 PROCEDURE:
	For each object in object_ps, hidden points are computed and
	PGS_INVISIBLE_FLAG in the points_struct is set.  No points are
	removed from the array.


 EXAMPLE:
	The following command hides all points which are directly in front of 
	or behind the rings as seen by the camera:

	pg_rm_disk, object_ps, cd=cd, dkx=rd

	In this call, rd is a ring descriptor, and cd is a camera descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	7/2004:		Added gbx input; Spitale
	












































PG_RM_GLOBE
-----------


 PURPOSE:
	Hides the given points with respect to each given globe and observer
	at all given time steps.  Points are hidden whether the lie in front 
	of or behind the globe.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_rm_globe, object_ps, cd=cd, od=od, gbx=gbx
	pg_rm_globe, object_ps, gd=gd, od=od


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

	hide_ps:	Array (n_disks, n_timesteps) of points_struct 
			containing the hidden points.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.

	od:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the observer from which points are hidden.  If no observer
		descriptor is given, the camera descriptor is used.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, objects whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	cat:	If set, the hide_ps points are concatentated into a single
		points_struct.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The flags arrays in object_ps are modified.


 PROCEDURE:
	For each object in object_ps, hidden points are computed and
	PGS_INVISIBLE_FLAG in the points_struct is set.  No points are
	removed from the array.


 EXAMPLE:
	The following command hides all points which are directly in front 
	of or behind the planet as seen by the camera:

	pg_rm_globe, object_ps, cd=cd, gbx=pd

	In this call, pd is a planet descriptor, and cd is a camera descriptor.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	

















































PG_SELECT
---------


 PURPOSE:
	Allows the user to select objects in an image using the mouse.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	region = pg_select(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	noverbose: 	If set, turns off the notification that cursor
			movement is required.

	psym: 		Plotting symbol to use for plotting points.

	one:		If set, the routine will exit after selecting one point.

	number:		If set, points will be labeled with numbers.

	region:		If set, the user selects a region in the image.
			This is the default.

	points:		If set, the user selects points.

  OUTPUT: 
	cancelled:	Set if routine is caused to return by the cancel button.


 RETURN:
	Array of subscripts of all image points which lie within the selected
	region.


 STATUS:
	Complete


 SEE ALSO:
	pg_trim


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	







PG_SELECT_POINTS
----------------


 PURPOSE:
	Allows the user to select points in an image using the mouse.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	region = pg_select_points(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	noverbose: 	If set, turns off the notification that cursor
			movement is required.

	psym: 		Plotting symbol to use for the points.

	one:		If set, the routine will exit after selecting one point.

	number:		If set, each point will be labeled with a number.

	color:		Color to use for graphics overlays.

	ps_output:	If set, a points structure is returned instead
			of a points array.

	p0:		Initial point, instead of user selection.

  OUTPUT: 
	cancelled:	Set if routine is caused to return by the cancel button.


 RETURN:
	Array of image points (2,n).


 EXAMPLE:

  To print the coordinates of each point as the user selects them, use:

   can=0 & while(NOT can) do print, pg_select_points(dd, /one, /nov, can=can)


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2001
	



PG_SELECT_REGION
----------------


 PURPOSE:
	Allows the user to select regions in an image using the mouse.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	region = pg_select_region(dd)


 ARGUMENTS:
  INPUT:
	dd:	Data descriptor containing the image.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	noverbose: 	If set, turns off the notification that cursor
			movement is required.

	color:		Color to use for graphics overlays.


	p0:		First point of line.  If set, then the routine
			immediately begins to drag from that point until a
			button is released.

	select_button:	Index of button to use as the select button instead
			of the left button (1).

	end_button:	Index of button to use as the end button instead
			of the right button (4).

	cancel_button:	Index of mouse button to be used as a cancel
			button instead of left+middle, (3).

	points:		If set, the selected points are returned instead
			of enclosed indices.

	autoclose:	If set, the region is automaticaly closed when the 
			end button is pressed.

	box:		If set, a rectanguar region is selected.


  OUTPUT: NONE


 RETURN:
	Array of subscripts of all image points which lie within the selected
	region.


 STATUS:
	Complete


 SEE ALSO:
	pg_trim


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	




























































PG_SHADOW
---------


 PURPOSE:
	Computes image coordinates of given inertial vectors projected onto
	surface of the given disks and globes with respect to the given
	observer.  Returns only the closest shadow point for each objoect 
	point.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_shadow, object_ps, cd=cd, ods=ods, dkx=dkx, gbx=gbx


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_globes, n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.

	dkx:	Array (n_disks, n_timesteps) of descriptors of objects 
		which must be a subclass of DISK.

	bx:	Array (n_disks, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the source from which points are projected.  If no observer
		descriptor is given, then the sun descriptor in gd is used.
		Only one observer is allowed.

	gd:	Generic descriptor.  If given, the cd, dkx, gbx, and bx inputs 
		are taken from the corresponding fields of this structure
		instead of from those keywords.

	  All other keywords are passed directly to pg_shadow_globe
	  and pg_shadow_disk and are documented with those programs.

  OUTPUT: NONE


 RETURN: 
	Array (n_disks,n_objects) of points_struct containing image 
	points and the corresponding inertial vectors.


 STATUS:
	


 SEE ALSO:
	pg_shadow_disk, pg_shadow_globe, pg_shadow_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	





























































PG_SHADOW_DISK
--------------


 PURPOSE:
	Computes image coordinates of given inertial vectors projected onto
	surface of the given disk with respect to the given observer.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_shadow_disk(object_ps, cd=cd, ods=ods, dkx=dkx)


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	dkx:	Array (n_disks, n_timesteps) of descriptors of objects 
		which must be a subclass of DISK.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the source from which points are projected.  If no observer
		descriptor is given, then the sun descriptor in gd is used.
		Only one observer is allowed.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, disks whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	fov:	 If set shadow points are cropped to within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

   backshadow:	 If set, only backshadows (shadows cast between the object and
 		 observer) are returned.

	both:	 If set, both shadows and backshadows are returned.

	all:	 If set, all points are returned, even if invalid.

  OUTPUT: NONE


 RETURN: 
	Array (n_disks,n_objects) of points_struct containing image 
	points and the corresponding inertial vectors.


 STATUS:
	


 SEE ALSO:
	pg_shadow, pg_shadow_globe, pg_shadow_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	























































PG_SHADOW_GLOBE
---------------


 PURPOSE:
	Computes image coordinates of the given inertial vectors projected onto
	surface of the given globe with respect to the given observer.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_shadow_globe(object_ps, cd=cd, od=od, gbx=gbx)


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	gbx:	Array (n_globes, n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the source from which points are projected.  If no observer
		descriptor is given, then the sun descriptor in gd is used.
		Only one observer is allowed.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	reveal:	 Normally, disks whose opaque flag is set are ignored.  
		 /reveal suppresses this behavior.

	fov:	 If set shadow points are cropped to within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

   backshadow:	 If set, only backshadows (shadows cast between the object and
 		 observer) are returned.

	both:	 If set, both shadows and backshadows are returned.

	all:	 If set, all points are returned, even if invalid.

	iterate: If set, the quadratic equation is solved by iteration 
		 instead of direct evaluation of the quadratic formula.

	nosolve: If set, shadow points are not computed.  

	dbldbl:	 If set, double-double precision is used to compute the
		 discriminant.

  OUTPUT: NONE


 RETURN: 
	Array (n_globes,n_objects) of points_struct containing image 
	points and the corresponding inertial vectors.


 STATUS:
	


 SEE ALSO:
	pg_shadow, pg_shadow_disk, pg_shadow_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	















































PG_SHADOW_POINTS
----------------


 PURPOSE:
	Determines whether each given point is shadowed by the given object.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_shadow_points, object_ps, cd=cd, od=od, bx=bx


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct containing inertial vectors
			to shadow.

  OUTPUT: 
	shadow_ps:	Array of points_struct containing the shadowed
			points.


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	bx:	Array (nbx, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY describing the shadowing
		bodies.

	od:	Array (n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.  These objects are used
		as the source from which points are projected.  If no observer
		descriptor is given, then the sun descriptor in gd is used.
		Only one observer is allowed.

	gd:	Generic descriptor.  If given, the cd and bx inputs 
		are taken from the corresponding fields of this structure
		instead of from those keywords.

	fov:	 If set shadow points are cropped to within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.

   backshadow:	 If set, only backshadows (shadows cast between the object and
 		 observer) are considered.

	both:	 If set, both shadows and backshadows are returned.

	edge:	 If set, only points near the edge of the shadow are returned.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	Shadowed points are flagged as invisible.


 STATUS:
	


 SEE ALSO:
	pg_shadow, pg_shadow_globe, pg_shadow_disk


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2012
	





















































PG_SHIFT
--------


 PURPOSE:
	Shifts the given image by a non-integer offset and adjusts the camera
	pointing accordingly.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_shift, dd, cd=cd, dxy


 ARGUMENTS:
  INPUT:
	dd:	Array of data descriptors giving images to shift.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array of camera descripors, one for each input image.

	dxy:	Array (2,np) of shifts for each input image.

	gd:	Generic descriptor containing the camera and body
		descriptors or an array of generic descriptors, one for each
		input image.


  OUTPUT: NONE


 SIDE EFFECTS:
	The given data and camera descriptors are modified: the images are
	shifted and the camera descriptor optic axes are changed accordingly.


 STATUS:
	xx


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/2008
	
















PG_SPIKES
---------


 PURPOSE:
	Locates spurious features like cosmic-ray hits.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_spikes(dd)


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor containing the image to be despiked.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	nsig:		Number of standard deviations above the local
			mean data value to flag for removal.  Default is 2.

	grad:		Minimum data value gradient to use when searching
			for clusters of hot pixels.  Default is 5.

	umask:		Byte image of the same size as the input image
			in which nonzero pixel values indicate locations
			where spikes should not be flagged.

	extend:		Number of pixels away from masked pixels before
			locations may be flagged as spikes.

	scale:		Typical size of objects to be flagged.  Default is 10.

	edge:		Regions closer than this to the edge of the image
			will be ignored.  Default is 10.

	local:		Multiplier that determines the width of the region 
			over which the local mean and standard deviation are
			taken.  That width is local * scale.  Default is 5.

	allpix:		If set, all pixels in the spike region are returned
			instead of of the centroids.

  OUTPUT:
	NONE


 RETURN:
	points_struct containing the detected spike points.


 PROCEDURE:

	Clusters of hot pixels of size 'scale' are identified by looking 
	for regions bounded by large gradients.  Each cluster is then
	examined for pixels whose values are larger than nsig standard
	deviations above the local mean.


 STATUS:
	Complete


 SEE ALSO:
	pg_despike, pg_mask


 EXAMPLE:
	dd = nv_read(filename)
	spike_ps = pg_spikes(dd)
	dd1 = pg_despike(dd, spike_ps)


 MODIFICATION HISTORY:
 	Written by:	Spitale, 4/2005
	
















































PG_STATION
----------


 PURPOSE:
	Computes image points for given station descriptors.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	station_ps = pg_station(gd=gd)


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	cd:	Array (n_timesteps) of camera descriptors.

	std:	Array (n_objects, n_timesteps) of descriptors of objects 
		that must be a subclass of STATION.

	gbx:	Array (n_xd, n_timesteps) of descriptors of objects 
		that must be a subclass of GLOBE.

	dkx:	Array (n_xd, n_timesteps) of descriptors of objects 
		that must be a subclass of DISK.

	bx:	Array (n_xd, n_timesteps) of descriptors of objects 
		that must be a subclass of BODY, instead of gbx or dkx.  

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  One per bx.

	gd:	Generic descriptor.  If given, the cd and gbx inputs 
		are taken from the cd and gbx fields of this structure
		instead of from those keywords.

	fov:	 If set points are computed only within this many camera
		 fields of view.

	cull:	 If set, points structures excluded by the fov keyword
		 are not returned.  Normally, empty points structures
		 are returned as placeholders.


  OUTPUT: NONE


 RETURN:
	Array (n_objects) of points_struct containing image points and
	the corresponding inertial vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/2012
	































































PG_STEREO_SPLIT
---------------


 PURPOSE:
	Produces two camera descriptors whose positions are offset
	in the +/-x image directions for computing stereo overlays.
	


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	cds = pg_stereo_split(cd=cd)


 ARGUMENTS:
  NONE


 KEYWORDS:
  INPUT:
	cd:		Camera descriptor to be split.

	separation:	stereo separation for the new camera descriptors.

  OUTPUT:
	NONE


 RETURN:
	Array containing two camera descriptors.


 STATUS:
	xx


 MODIFICATION HISTORY:
 	Written by:	Spitale; 7/29/2005
	























PG_STRIP
--------


 PURPOSE:
	Plots the portion of an image between two chosen points.


 CATEGORY:
       COM/PG


 CALLING SEQUENCE:
       pg_strip, im


 ARGUMENTS:
  INPUT:
       im:		The two-dimensional array from which the 
			plotted strip will be extracted.

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
       width:		An odd integer giving the width in pixels of the 
			extracted strip (default=5).  This width is rebinned
			to a single pixel for plotting.

	nw:		When set, each plot is done in a new window.

	nomarks:	Suppresses the marks that show the locations of 
			the chosen points, which are difficult to 
			entirely erase.

	xs:		Specifies the x-dimension of the window, in pixels.
			Default is 400.

	ys:		Specifies the y-dimension of the window, in pixels.
			Default is 300.

  OUTPUT:
       NONE


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Tiscareno, 7/00













PG_STR_LIMIT_MAG
----------------


 PURPOSE:
	Removes stars whose visual magnitude falls outside the given minimum
	and maximum values.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_str_limit_mag(sd, max=max, min=min)


 ARGUMENTS:
  INPUT:
	sd:	Array of star descriptors.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	max:	Maximum visual magnitude.

	min:	Minimum visual magnitude.

  OUTPUT:
	NONE


 RETURN:
	Array of star descriptors whose visual magnitudes fall within the
	specified range.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 1998
	



















PG_SUB_BODY
-----------


 PURPOSE:
	Computes surface coordinates of sub-body point.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	range = pg_sub_body(gbx=gbx, bx=bx, gd=gd)


 KEYWORD:
  INPUT:
	gbx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of GLOBE.  

	bx:	Array (n_objects, n_timesteps) of descriptors of objects 
		which must be a subclass of BODY.

	gd:	Generic descriptor.

  OUTPUT: NONE


 RETURN:
	Array (n_objects,3) of surface coordinate vectors.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2001
	


























PG_THRESHOLD
------------


 PURPOSE:
	Excludes points whose associated data lie outside of specified
	thresholds by setting the PGS_INVISIBLE_MASK.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_threshold, object_ps, tag=tag, max=max, min=min


 ARGUMENTS:
  INPUT:
	object_ps:	Array (n_objects) of points_struct giving the
			points to be thresholded.

  OUTPUT:
	object_ps:	Modified array of points_struct.  PGS_INVISIBLE_MASK
			is set for all excluded points.


 KEYWORDS:
  INPUT:
	tag:		Tag name for user data array to threshold.  Default
			is 'scan_cc'.

	max:		Upper threshold - values greater than this will be
			excluded.

	min:		Lower threshold - values less than this will be
			excluded.

	relative:	If set, the max and min arguments will be taken as 
			fractions of the maximum value in the array.

  OUTPUT: NONE


 RETURN: NONE


 SIDE EFFECTS:
	The input argument object_ps is modified.


 RESTRICTIONS:
	xx


 PROCEDURE:
	The thresholding is performed by cc_threshold.  See the documentation
	for that routine for details.


 EXAMPLE:
	xx


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 6/1998
	





























































PG_TIEPOINTS
------------


 PURPOSE:
       Computes tiepoint image offsets.


 CATEGORY:
       NV/PG


 CALLING SEQUENCE:
       tie_ps = pg_tiepoints(cd=cd, bx=bx, body_pts=body_pts, ps)


 ARGUMENTS:
  INPUT:
   ps:         points_struct containing the image points.

 KEYWORDS:
  INPUT:
         cd:	Camera descriptor.

         bx:	Body descriptor; can be GLOBE or RING.

        gbx:	Globe descriptor for each globe in image instead of
		specifying bx.

        dkx:	Disk descriptor for each globe in image instead of
		specifying bx.

         gd:	Generic descriptor.  If given, the above descriptor inputs 
               are taken from the corresponding fields of this structure
               instead of from those keywords.

   body_pts:	Array of np column vectors giving the body-frame coordinates 
		for each tie point.  If not given, then the given geometry
		is used to compute it.


  OUTPUT:
   body_pts: 	Array of np column vectors giving the body-frame coordinates 
		for each tie point.  If this keyword is given as an input,
		then no output is generated.

 EXAMPLE:
  1) Manually select a set of tiepoints in a set of images and fit
     a pointing offset:

	ndd = n_elements(dd)
	for i=0, ndd-1 do ps[i] = pg_select_points(dd[i], /ps)

	body_pts = 0
	for i=0, ndd-1 do $
	 begin &$
	  tie_ps = pg_tiepoints(cd=cd[i], bx=pd[i], ps[i], body_pts=body_pts) &$
	  tpcoeff = pg_ptscan_coeff(tie_ps, fix=[2]) &$
	  dxy = pg_fit(tpcoeff) &$
	  pg_repoint, dxy, 0d, cd=cd[i] &$
	 end
	
     In the above example, the first image is used as a reference; 
     because body_pts is initially undefined, those points are computed
     for the first image, but not subsequently.  Instead, the subsequent
     images will have a nonzero offset stored in the tie_ps structure,
     which are then used by pg_ptscan_coeff to compute fit coefficients.


 STATUS:
       Complete


 MODIFICATION HISTORY:
       Written by:     Spitale, 8/2006

























































PG_TO_DISK
----------


 PURPOSE:
       Converts image coordinates to disk plane coordinates.  Input
       array can be array of image points or a points_struct.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
       result = pg_to_disk(image_points, cd=cd, dkx=dkx) 
       result = pg_to_disk(image_points, gd=gd)


 ARGUMENTS:
  INPUT:
        image_points:     Array (n_points) of image points (x,y) or
                          array of type points_struct.

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
                  cd:     Array (n_timesteps) of camera descriptors.

                 dkx:     Array (n_objects, n_timesteps) of descriptors of
                          objects that must be a subclass of DISK.

                  gd:     Generic descriptor.  If given, the cd and dkx
                          inputs are taken from the cd and dkx fields of 
                          this structure instead of from those keywords.

                  ps:     If set, image_points is treated as a structure
                          of type points_struct.

  OUTPUT:
        NONE

 RETURN:
	Array (n_points) of disk points (radius and longitude).

 STATUS:
	Completed.


 SEE ALSO:
	pg_to_surface


 MODIFICATION HISTORY:
 	Written by:	Haemmerle,  5/1998
	









PG_TO_SURFACE
-------------


 PURPOSE:
       Converts image coordinates to surface coordinates.  Input
       array can be array of image points or a points_struct.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
       result = pg_to_surface(image_points, cd=cd, gbx=gbx) 
       result = pg_to_surface(image_points, gd=gd)


 ARGUMENTS:
  INPUT:
        image_points:     Array (n_points) of image points (x,y) or
                          array of type points_struct.

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
                  cd:     Array (n_timesteps) of camera descriptors.

                 gbx:     Array (n_objects, n_timesteps) of descriptors of
                          objects that must be a subclass of GLOBE.

                  gd:     Generic descriptor.  If given, the cd and gbx
                          inputs are taken from the cd and gbx fields of 
                          this structure instead of from those keywords.

                  ps:     If set, image_points is treated as a structure
                          of type points_struct.

  OUTPUT:
        NONE


 RETURN:
	Array (n_points) of surface points.


 STATUS:
	Complete


 SEE ALSO:
	pg_to_disk


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	






PG_TRIM
-------


 PURPOSE:
	For each given object, excludes points contained in the given region
	by setting the PGS_INVISIBLE_MASK.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	pg_trim, dd, object_ps, region


 ARGUMENTS:
  INPUT:
	dd:		Data descriptor containing the image.

	object_ps:	Array (n_objects) of points_struct containing the
			image points to be trimmed.

	region:		Array of subscripts of image points to be trimmed.

  OUTPUT:
	object_ps:	The input points are be modified on return.


 KEYWORDS:
  INPUT: 
	mask:		Mask to use instead of PGS_INVISIBLE_MASK.

	off:		If set, the masked flag bit will be turned off.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:
	pg_select


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	













PG_VECTORS
----------


 PURPOSE:
	Concatenates the given points_struct's into an array of inertial
	vectors.


 CATEGORY:
	NV/PG


 CALLING SEQUENCE:
	result = pg_vectors(object_ps)


 ARGUMENTS:
  INPUT:
	object_ps:	Array of points_struct.	



 RETURN:
	Array (2,n) of image points.


 STATUS:
	Complete


 SEE ALSO:
	pg_points


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	




























