									12/05/15
TOOLS Program Reference
=======================

 Summary
 -------
  - ABCORR
	Performs stellar aberration and light-travel-time corrections.

  - ADD_CORE_TASK
       Adds a task name to the task list of the CORE superclass.

  - CD_TO_RADEC_TWIST
       Computes Euler angles representing the orientation of a given
	camera descriptor.

  - DSK_CAT
	Concatenates the given disk descriptors into one descriptor encompassing
	the entire system.

  - DSK_CAT_BY_NAME
	Concatenates the given disk descriptors into one descriptor 
	encompassing all of the named descriptors.

  - DSK_GET_PERP
	Computes vectors in the direction perpendicular to the azimuthal
	direction at a point on a disk.

  - DSK_IMAGE_BOUNDS
	Determines disk coordinate ranges visible in an image described
	by a given camera descriptor.

  - DSK_PROJECTED_RESOLUTION
	Computes the resolution (actually scale) components at a point on a 
	disk in a given camera.

  - DSK_RADIAL_RESOLUTION
	Computes the radial resolution at a point on a disk in a 
	given camera.

  - FOOTPRINT
	Computes the footprint of a camera on a given body.

  - GET_BODY_TIME
       Return time associated with a body descriptor

  - GET_CORE_NAME
       Returns the object name associated with an object descriptor

  - GET_CORE_TASKS
       Returns the tasks associated with an object descriptor

  - GET_CORE_USER
       Returns the user associated with an object descriptor

  - GET_DISK_REF
	Produces inertial unit vectors corresponding to the projection
	of the given body 2-axis direction into the given disk plane.

  - GET_IMAGE_BORDER_PTS
	Computes points around the edge of an image.

  - GET_IMAGE_PROFILE
	Extracts a profile from a rectangular, but not necessarily axis-aligned, 
	image region using interpolation.

  - GET_IMAGE_PROFILE_OUTLINE
	Generates an outline of an oblique rectangular image region.

  - GET_IMAGE_VECTOR
	Projects inertial vectors into an image.

  - GET_LIMB_PROFILE_OUTLINE
       Generates an outline of a limb sector.

  - GET_LIMB_PROFILE_OUTLINE_LINEAR
       Generates an outline of a rectangular limb sector.

  - GET_OBJECT_BY_NAME
	Selects from a list of descriptors based on their name.

  - GET_PRIMARY
	Attempts to determine the primary planet from a list of descriptors
	based on their names and proximity to the observer.

  - GET_PROFILE_RING_OUTLINE
       Generates an outline of a ring sector.

  - GET_RING_PROFILE
       Generates a ring profile in radius or longitude.

  - GET_RING_PROFILE_BIN
       Generates a ring profile in radius or longitude using binning.

  - GET_RING_PROFILE_N
       Calculate the number of points in radius and longitude for
       a ring profile.

  - GET_RING_PROFILE_OUTLINE_OBLIQUE
       Generates an outline of an oblique ring sector.

  - GET_RING_PROFILE_OUTLINE_PERP
       Generates an outline of a ring sector perpendicular to the 
	image-projected radial direction.

  - GET_SOLAR_REF
	Produces inertial unit vectors corresponding to the projection
	of the sun direction into the given disk plane.

  - GLB_IMAGE_BOUNDS
	Determines globe coordinate ranges visible in an image described
	by a given camera descriptor.

  - ILLUMINATION_FRACTION
	Assuming the body gbx is a sphere, this routine computes the fraction of 
	its disk that appears illuminated by the source sund, as seen from the
	inertial position vectors v.

  - IMAGE_ANSA
	Computes ring ansa longitudes.

  - IMAGE_ANSA_FAR
	Computes ring ansa longitudes assuming observer is very far from the 
	rings.

  - IMAGE_AZIMUTH_POS
	Computes azimuth angle of projection of inertial position vector v 
	into the image plane. 

  - IMAGE_AZIMUTH_POS
	Computes azimuth angle of projection of inertial vector v 
	into the image plane. 

  - IMAGE_CELESTIAL_NORTHANGLE
	Computes the image azimuth (see image_azimuth.pro) of celestial north.

  - IMAGE_INTERP_CAM
       Extracts a region from an image using the desired interpolation,
	accouting for the camera point-spread function is applicable.

  - IMAGE_NORTHANGLE
	Computes the image azimuth (see image_azimuth.pro) of the north 
	direction on the surface of the given body at the specified pixel 
	location p.

  - IMAGE_SHIFT
	Shifts an image by a specified (non-integer) amount using 
	interpolation.  If applicable, the camera pont-spread function 
	is accounted for in the interpolation.

  - IMPACT_PARAM
	Computes the impact parameter of a vector originating at the 
	given camera, relative to the given planet object.

  - IN_IMAGE
	Determines which input points lie within an image described by the
	given camera descriptor.

  - LTCORR
	Performs a light-travel-time correction.

  - MAP_UNITS_DISK
	Computes units for a map descriptor given pixel scales for
	the map center.

  - MASK_GLOBE
	Computes an image mask for a globe.

  - MINMAX_LATLON
	Computes latitide/longitude ranges visible in a given camera.

  - PHASE_CORRECTION
	Assuming body gbx is a sphere, this routine computes the correction
	in pixels needed to obtain its true image center given a measurement 
	of its center of light.

  - PIXEL_GRID
	Generates grid lines aligned with the image window.

  - PLOT_INERTIAL
       Plots inertial vectors on a camera image.

  - PROJECT_MAP
       Reprojects images.

  - RADEC_ANGLE
	Computes angles between vectors specified in the radec system.

  - RADEC_IMAGE_BOUNDS
	Determines radec coordinate ranges visible in an image described
	by a given camera descriptor.

  - RADEC_TO_ORIENT
	Computes orientation matrices such that the optic axis (axis 1) 
	points in the direction of the given radec and the image y direction 
	(axis 2) points toward celestial north (inertial [0,0,1]).

  - RADEC_TWIST_TO_CD
       Computes a camera orietation matrix from thegiven Euler angles.

  - RAY_POINTS
       Computes points along rays.

  - RAY_SUB_POINT_GRAPHIC
	Iterates to find the point on the surface of the globe where the 
	given ray is closest to the surface.

  - RINGPLANE_RADIAL_BOUNDS
	Finds ringplane radial bounds by projecting the camera FOV on 
	the ringplane.  

  - SET_CORE_NAME
       Sets the object name associated with an object descriptor

  - STELLAB
	Corrects body positions for stellar aberration.

  - STELLAB_POS
	Corrects positions for stellar aberration.

  - STELLAB_RADEC
	Corrects positions given in the radec system for stellar 
	aberration.

  - STEREO_SPLIT
       Splits a given camera descriptor into a stereo pair.

  - SUB_LATLON
	Computes sub-observer latitude and longitude on a globe.

  - SURFACE_TO_DEGREES
       Converts angular part of surface vectors from radians to degrees

  - TARGET_ALTAZ
	Computes altitude/azimuth of a target relative to a point on or near the
	surface of a globe.




























ABCORR
------


 PURPOSE:
	Performs stellar aberration and light-travel-time corrections.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       abcorr, obs_bx, targ_bx, c=c


 ARGUMENTS:
  INPUT:
	obs_bx:	Any subclass of BODY describing the observer.

	obs_bx:	Array(nt) of any subclass of BODY describing the targets.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	c:	Speed of light.

	iterate:	If set, then the lt correction routine will iterate 
			to refine its solution.

	epsilon:	Stopping criterion for the lt correction: maximum 
			allowable timing error.  Default is 1d-7.

  OUTPUT: NONE


 RETURN: NONE



 MODIFICATION HISTORY:
       Written by:     Spitale






















ADD_CORE_TASK
-------------


 PURPOSE:
       Adds a task name to the task list of the CORE superclass.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       add_core_task, ods, task


 ARGUMENTS:
  INPUT:
        ods:   Object descriptor

       task:   Name of task

  OUTPUT:
       NONE

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale



































CD_TO_RADEC_TWIST
-----------------


 PURPOSE:
       Computes Euler angles representing the orientation of a given
	camera descriptor.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       cd_to_radec_twist, cd, ra=ra, dec=dec, twist=twist


 ARGUMENTS:
  INPUT:
            cd:       Array (nv,3,nt) of camera descriptors.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT:
       ra:	Right ascension relative to the inertial frame.

	dec:	Declination relative to the inertial frame.

	twist:	Twist angle relative to the inertial frame.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale

























DSK_CAT
-------


 PURPOSE:
	Concatenates the given disk descriptors into one descriptor encompassing
	the entire system.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       dkx_cat = dsk_cat(dkx)


 ARGUMENTS:
  INPUT:
	dkx:	Array (nt) of any subclass of DISK.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	A descriptor of the same class as dkx whose semimajor axes
	encompass the all of the input disks.


 MODIFICATION HISTORY:
       Written by:     Spitale




























DSK_CAT_BY_NAME
---------------


 PURPOSE:
	Concatenates the given disk descriptors into one descriptor 
	encompassing all of the named descriptors.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       dkx_cat = dsk_cat_by_name(dkx, names)


 ARGUMENTS:
  INPUT:
	dkx:	Array (nt) of any subclass of DISK.

	names:	Array of names of disks to concatenate.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	A descriptor of the same class as dkx whose semimajor axes
	encompass the all of the named input disks.


 MODIFICATION HISTORY:
       Written by:     Spitale


























DSK_GET_PERP
------------


 PURPOSE:
	Computes vectors in the direction perpendicular to the azimuthal
	direction at a point on a disk.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       dir = dsk_get_perp(cd, dkx, p, frame_bd=frame_bd)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	dkx:	Any subclass of DISK.

	p:	Point on the disk n inertial coordinates.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: NONE


 RETURN: 
	Array (nv,3) of inertial direction vectors.


 MODIFICATION HISTORY:
       Written by:     Spitale























DSK_IMAGE_BOUNDS
----------------


 PURPOSE:
	Determines disk coordinate ranges visible in an image described
	by a given camera descriptor.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       dsk_image_bounds, cd, dkx, frame_bd, $
	        radmin=radmin, radmax=radmax, lonmin=lonmin, lonmax=lonmax


 ARGUMENTS:
  INPUT:
	cd:	Camera descripor.

	dkx:	Any subclass of DISK.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	np:	Number of border points to compute.

	slop:	Number of pixels by which to expand the image in each
		direction.

	plane:	If set, the sma field in dkx is ignored, so an infinite
		disk is considered.


  OUTPUT: 
	radmin:	Minimum disk radius in image.

	radmax:	Maximum disk radius in image.

	lonmin:	Minimum disk longitude in image.

	lonmax:	Maximum disk longitude in image.

	border_pts_im:	Array (2,np) of points along the edge of the image.

	status:	-1 if no disk in the image, 0 otherwise.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale





DSK_PROJECTED_RESOLUTION
------------------------


 PURPOSE:
	Computes the resolution (actually scale) components at a point on a 
	disk in a given camera.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       res = dsk_projected_resolution(dkx, cd, p, scale)


 ARGUMENTS:
  INPUT:
	dkx:	Any subclass of DISK.

	cd:	Camera descriptor.

	p:	Point on the dkx in inertial coordinates.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: 
	rad:	Pixel scale in the radial direction.

	lon:	Pixel scale in the longitude direction.

	perp:	Pixel scale in the direction perpendicular to the 
		projected longitude direction.
	
	rr:	Intercept radius.


 RETURN: 
	Radial resolution on dkx at r, computed as the length of a
	segment bisecting the intersection ellipse in the radial direction.


 MODIFICATION HISTORY:
       Written by:     Spitale, usning an approach suggested by M. Tiscareno

















DSK_RADIAL_RESOLUTION
---------------------


 PURPOSE:
	Computes the radial resolution at a point on a disk in a 
	given camera.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       res = dsk_radial_resolution(dkx, cd, r, scale)


 ARGUMENTS:
  INPUT:
	dkx:	Any subclass of DISK.

	cd:	Camera descriptor.

	r:	Point on the dkx in inertial coordinates.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Radial resolution on dkx at r, computed as te length of a
	segment bisecting the intersection ellipse in the radial direction.


 MODIFICATION HISTORY:
       Written by:     Spitale

























FOOTPRINT
---------


 PURPOSE:
	Computes the footprint of a camera on a given body.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       surface_pts = footprint(cd, bx)


 ARGUMENTS:
  INPUT:
	cd:		Camera descripor.

	bx:		Body descriptor; globe or disk.

	frame_bd:	Body descriptor giving the reference frame if bx is 
			a disk.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	corners:	Array(2,2) giving corers of image region to consider.

	slop:		Number of pixels by which to expand the image in each
			direction.

	image_pts:	Array (2,np) of points along the edge of the image.

	sample:		Sampling rate; default is 1 pixel.


  OUTPUT: 
	image_pts:	Footprint points in the image frame.

	body_pts:	Footprint points in the body frame.

       valid:  	Indices of valid output points.

 RETURN: 
	Array nv,3,nt of surface points.


 MODIFICATION HISTORY:
       Written by:     Spitale		5/2014













GET_BODY_TIME
-------------


 PURPOSE:
       Return time associated with a body descriptor


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_body_time(ods)


 ARGUMENTS:
  INPUT:
            ods:       An array of Object descriptors

  OUTPUT:
       NONE

 RETURN:
       An array of times.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


































GET_CORE_NAME
-------------


 PURPOSE:
       Returns the object name associated with an object descriptor


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_core_name(ods)


 ARGUMENTS:
  INPUT:
            ods:       An array of Object descriptors

  OUTPUT:
       NONE

 RETURN:
       An array of names.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


































GET_CORE_TASKS
--------------


 PURPOSE:
       Returns the tasks associated with an object descriptor


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_core_tasks(ods)


 ARGUMENTS:
  INPUT:
            ods:       An array of Object descriptors

  OUTPUT:
       NONE

 RETURN:
       An array of tasks.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


































GET_CORE_USER
-------------


 PURPOSE:
       Returns the user associated with an object descriptor


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_core_user(ods)


 ARGUMENTS:
  INPUT:
            ods:       An array of Object descriptors

  OUTPUT:
       NONE

 RETURN:
       An array of users.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


































GET_DISK_REF
------------


 PURPOSE:
	Produces inertial unit vectors corresponding to the projection
	of the given body 2-axis direction into the given disk plane.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       dkx_cat = get_disk_ref(dkx, bx)


 ARGUMENTS:
  INPUT:
	dkx:	Array (nt) of any subclass of DISK.

	bx:	Array (nt) of any subclass of BODY.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array (1,3,nt) of inertial unit vectors.


 MODIFICATION HISTORY:
       Written by:     Spitale



























GET_IMAGE_BORDER_PTS
--------------------


 PURPOSE:
	Computes points around the edge of an image.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       border_pts_im = get_image_border_pts(cd)


 ARGUMENTS:
  INPUT:
	cd:	Camera descripor.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	corners:	Array(2,2) giving corners of image region to border

	center:		Array (2) giving the center of the image to use
			instead of the optic axis.

	crop:		Number of pixels by which to shrink the image border in 
			each direction.

	sample:		Sampling rate; default is 1 pixel.

	aperture:	If set, a circular aperture with a diameter equal to the
			logest dimension of the image is used.  (not complete)


  OUTPUT: NONE


 RETURN: 
	Array (2,np) of image points on the image border.  np is computed
	such that points are spaced by one pixel.


 MODIFICATION HISTORY:
       Written by:     Spitale

















GET_IMAGE_PROFILE
-----------------


 PURPOSE:
	Extracts a profile from a rectangular, but not necessarily axis-aligned, 
	image region using interpolation.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       profile = get_image_profile(image, cd, p, nl, nw, sample)


 ARGUMENTS:
  INPUT:
	image:	Image array.

	cd:	Camera descriptor.

	p:	Array (2,2) of image points giving the start and end points
		for the scan.

	nl:	Number of samples along the scan.

	nw:	Number of samples across the scan.


  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	interp:		Type of interpolation, see image_interp_cam.

	arg_interp:	Interpolation argument, see image_interp_cam.

  OUTPUT: 
	image_pts:	Array (2,nl) of image points along the center of
			the scan.

	distance:	Array (nl) giving the distance along the scan.

	sigma:		Standard deviation across the profile at each sample
			along the profile.


 RETURN: 
	Array (nl) containing the profile.


 MODIFICATION HISTORY:
       Written by:     Spitale










GET_IMAGE_PROFILE_OUTLINE
-------------------------


 PURPOSE:
	Generates an outline of an oblique rectangular image region.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       profile = get_image_profile_outline(points, point, nw=nw, nl=nl)


 ARGUMENTS:
  INPUT:
	points:	Array (2,2) of image points defining corners at opposite ends
		on one side of the sector.

	point:	Image point defining and third corner.


  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	nl:	Number of samples along the scan.

	nw:	Number of samples across the scan.

  OUTPUT: NONE


 RETURN: 
       Array of image points defining the outline of the sector.


 MODIFICATION HISTORY:
       Written by:     Spitale
























GET_IMAGE_VECTOR
----------------


 PURPOSE:
	Projects inertial vectors into an image.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       p = get_image_vector(cd, v)


 ARGUMENTS:
  INPUT:
	cd:	Array (nt) of camera descriptors.

	v:	Array (nv,3,nt) of vectors in the inertial frame.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array (2,nv,nt) of image vectors.


 MODIFICATION HISTORY:
       Written by:     Spitale




























GET_LIMB_PROFILE_OUTLINE
------------------------


 PURPOSE:
       Generates an outline of a limb sector.

 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
	result = get_limb_profile_outline(cd, gbx, points)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Globe descriptor.

	points:	Array (2,2) of image points defining opposite corners
		of the sector.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE 

  OUTPUT:
	inertial:	Inertial vectors corresponding to the limb sector 
			outline points.

	dkd:	Disk descriptor corresponding to the skyplane.


 RETURN:
       Array of image points defining the outline of the sector.


 MODIFICATION HISTORY:
       Written by:     Spitale, 8/2006





















GET_LIMB_PROFILE_OUTLINE_LINEAR
-------------------------------


 PURPOSE:
       Generates an outline of a rectangular limb sector.

 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
	result = get_limb_profile_outline_linear(cd, gbx, points)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Globe descriptor.

	points:	Array (2,2) of image points defining opposite corners
		of the sector.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE 

  OUTPUT:
	inertial:	Inertial vectors corresponding to the limb sector 
			outline points.


 RETURN:
       Array of image points defining the outline of the sector.


 MODIFICATION HISTORY:
       Written by:     Spitale, 1/2009























GET_OBJECT_BY_NAME
------------------


 PURPOSE:
	Selects from a list of descriptors based on their name.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       xd = get_object_by_name(xds, name)


 ARGUMENTS:
  INPUT:
	xds:	Array of any subclass of CORE.

	name:	Name to select.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array descriptors whose CORE name field matches the given name.
	If no matches are found, 0 is returned.


 MODIFICATION HISTORY:
       Written by:     Spitale



























GET_PRIMARY
-----------


 PURPOSE:
	Attempts to determine the primary planet from a list of descriptors
	based on their names and proximity to the observer.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       gbx0 = get_primary(bx, gbx)


 ARGUMENTS:
  INPUT:
	bx:	Array (nt) of any subclass of BODY, describing the observer.

	gbx:	Array (nd,nt) of any subclass of GLOBE, specifying a 
		system of globe objects.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: 
	rx:	Any subclass of RING.
	
	planets:	Array of names of objects to consider as planets.
			Default is the planets of the Solar System, or the
			primary planet of rx, if provided.

  OUTPUT: NONE


 RETURN: 
	GLOBE descriptor for the selected primary. 


 MODIFICATION HISTORY:
       Written by:     Spitale





















GET_PROFILE_RING_OUTLINE
------------------------


 PURPOSE:
       Generates an outline of a ring sector.

 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
    result = get_profile_ring_outline(cd, dkd, lon, rad, inertial=inertial)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	dkx:	Disk descriptor.

	points:	Array (2,2) of image points defining corners of the sector.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	lon:	Array of disk longitudes for sector

	rad:	Array of disk radii for sector

	nrad:	Number of points in the radial direction.

	nlon:	Number of points in the longitudinal direction.

  OUTPUT:
	inertial:	Inertial vectors corresponding to the ring sector 
			outline points.


 RETURN:
       Output is set of image points (x,y) defining the outline of the
       ring sector.

 MODIFICATION HISTORY:
       Written by:     Vance Haemmerle & Joe Spitale, 6/1998


















GET_RING_PROFILE
----------------


 PURPOSE:
       Generates a ring profile in radius or longitude.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_ring_profile(image, cd, dkd, lon, rad)

 ARGUMENTS:
  INPUT:
           image:      The image to scan

              cd:      Camera descriptor

             dkd:      Disk descriptor

             lon:      Array of longitudes at which to sample image

             rad:      Array of radii at which to sample image

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
       azimuthal:      If set, a longitudinal scan is done instead.

  OUTPUT:
       NONE


 RETURN:
       An array of averaged dn values that match the given rad or
       match the given lon if /azimuthal selected.


 PROCEDURE:
       The profile is calculated by applying a grid of (radius, longitude)
       given by rad and lon on a ring sector, interpolating the dn in
       the image, and averaging along a direction to give a radius profile,
       or a longitudinal profile.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Haemmerle, 6/1998










GET_RING_PROFILE_BIN
--------------------


 PURPOSE:
       Generates a ring profile in radius or longitude using binning.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_ring_profile_bin(image, cd, dkd, dlon, rad)

 ARGUMENTS:
  INPUT:
           image:      The image to scan

              cd:      Camera descriptor

             dkd:      Disk descriptor

            dlon:      Array of disk longitudes of which to sample image

             rad:      Array of disk radii of which to sample image

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
       azimuthal:      If set, a longitudinal scan is done instead.

  OUTPUT:
       NONE


 RETURN:
       An array of averaged dn values that match the given rad or
       match the given dlon if /azimuthal selected.


 PROCEDURE:
       A ring sector polygon is calculated from the given dlon and rad
       arrays.  All the pixels of the image within this polygon are
       binned in an equally-spaced histogram in radius or longitude.

 RESTRICTIONS:
       The dlon and rad arrays are treated as equally spaced, that is,
       the binsize is calculated by dividing the spacing in radius by
       number of points minus one.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Haemmerle, 6/1998






GET_RING_PROFILE_N
------------------


 PURPOSE:
       Calculate the number of points in radius and longitude for
       a ring profile.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = get_ring_profile_n(outline_pts, cd, dkd, lon, rad)


 ARGUMENTS:
  INPUT:
       outline_pts:    Outline sector image points which are the result
                       of calling get_ring_profile_outline()

                cd:    Camera descriptor

               dkd:    Disk descriptor

              lon:    Equally spaced longitude array

               rad:    Equally spaced radius array

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
          oversamp:    Oversample factor compared to regular calculation of
                       radius and longitude spacing which would put maximum
                       spacing at 1 pixel.

  OUTPUT:
       NONE


 RETURN:
       Array containg n_rad and n_lon to be used by get_ring_profile() or
       get_ring_profile_bin().


 PROCEDURE:
       Routine goes along the radial and longitudinal edges of a ring
       profile sector and calculates the minimum spacing between the
       points in image space, then derives the n_rad and n_lon points
       to make the minimum spacing 1 pixel.  If the oversamp parameter
       is given, the numbers are multiplied by this factor.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Haemmerle, 6/1998




GET_RING_PROFILE_OUTLINE_OBLIQUE
--------------------------------


 PURPOSE:
       Generates an outline of an oblique ring sector.

 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
	result = get_ring_profile_outline_oblique(cd, dkx, points, point)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Globe descriptor.

	points:	Array (2,2) of image points defining corners at opposite ends
		on one side of the sector.

	point:	Image point defining and third corner.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

	nrad:	Number of points in the radial direction.

	nlon:	Number of points in the longitudinal direction.

  OUTPUT: NONE


 RETURN:
       Array of image points defining the outline of the sector.


 MODIFICATION HISTORY:
       Written by:     Spitale, 8/2006

















GET_RING_PROFILE_OUTLINE_PERP
-----------------------------


 PURPOSE:
       Generates an outline of a ring sector perpendicular to the 
	image-projected radial direction.

 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
	result = get_ring_profile_outline_perp(cd, dkx, points)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Globe descriptor.

	points:	Array (2,2) of image points defining corners of the sector.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

	nrad:	Number of points in the radial direction.

	nlon:	Number of points in the longitudinal direction.

  OUTPUT: NONE


 RETURN:
       Array of image points defining the outline of the sector.


 MODIFICATION HISTORY:
       Written by:     Spitale, 8/2006



















GET_SOLAR_REF
-------------


 PURPOSE:
	Produces inertial unit vectors corresponding to the projection
	of the sun direction into the given disk plane.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       v = get_solar_ref(dkx, sund)


 ARGUMENTS:
  INPUT:
	dkx:	Array (nt) of any subclass of DISK.

	sund:	Array (nt) of any subclass of STAR representing the sun.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array (1,3,nt) of inertial vectors.


 MODIFICATION HISTORY:
       Written by:     Spitale




























GLB_IMAGE_BOUNDS
----------------


 PURPOSE:
	Determines globe coordinate ranges visible in an image described
	by a given camera descriptor.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       glb_image_bounds, cd, gbx, $
	        latmin=latmin, latmax=latmax, lonmin=lonmin, lonmax=lonmax


 ARGUMENTS:
  INPUT:
	cd:	Camera descripor.

	gbx:	Any subclass of GLOBE.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	corners:	Array(2,2) giving corers of image region to consider.

	slop:	Number of pixels by which to expand the image in each
		direction.


  OUTPUT: 
	latmin:	Minimum latitude in image.

	latmax:	Maximum latitude in image.

	lonmin:	Minimum longitude in image.

	lonmax:	Maximum longitude in image.

	border_pts_im:	Array (2,np) of points along the edge of the image.

	status:	-1 if no globe in the image, 0 otherwise.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale












ILLUMINATION_FRACTION
---------------------


 PURPOSE:
	Assuming the body gbx is a sphere, this routine computes the fraction of 
	its disk that appears illuminated by the source sund, as seen from the
	inertial position vectors v.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       v = illumination_fraction(gbx, sund, v)


 ARGUMENTS:
  INPUT:
	gbx:	Any subclass of GLOBE.

	sund:	Any subclass of STAR representing the sun.

	v:	Array (nv,3) Inertial positions of viewer.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array (nv) giving the illumination fraction for each gbx.


 MODIFICATION HISTORY:
       Written by:     Spitale
























IMAGE_ANSA
----------


 PURPOSE:
	Computes ring ansa longitudes.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       lons = image_ansa(cd, rd, radius)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	dkx:	Any subclass of DISK.

	radius:	Disk radius at which to compute ansa.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: 
	image_pts:	Image points corresponding to each ansa longitude
			at the given radius.


 RETURN: 
	Array (2) of longitudes


 MODIFICATION HISTORY:
       Written by:     Spitale

























IMAGE_ANSA_FAR
--------------


 PURPOSE:
	Computes ring ansa longitudes assuming observer is very far from the 
	rings.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       lons = image_ansa_far(cd, rd)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	dkx:	Any subclass of DISK.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array (2) of longitudes


 MODIFICATION HISTORY:
       Written by:     Spitale




























IMAGE_AZIMUTH_POS
-----------------


 PURPOSE:
	Computes azimuth angle of projection of inertial position vector v 
	into the image plane. 


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       v = image_azimuth_pos(cd, v)


 ARGUMENTS:
  INPUT:
	cd:	Any subclass of GLOBE.

	v:	Inertial position vector.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Image azimuth.  When the image is displayed with (0,0) at 
	the top-left, the azimuth angle is measured counterclockwise from 
	"up".


 MODIFICATION HISTORY:
       Written by:     Spitale

























IMAGE_AZIMUTH_POS
-----------------


 PURPOSE:
	Computes azimuth angle of projection of inertial vector v 
	into the image plane. 


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       v = image_azimuth_pos(cd, v)


 ARGUMENTS:
  INPUT:
	cd:	Any subclass of GLOBE.

	v:	Inertial vector.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Image azimuth.  When the image is displayed with (0,0) at 
	the top-left, the azimuth angle is measured counterclockwise from 
	"up".


 MODIFICATION HISTORY:
       Written by:     Spitale

























IMAGE_CELESTIAL_NORTHANGLE
--------------------------


 PURPOSE:
	Computes the image azimuth (see image_azimuth.pro) of celestial north.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = image_celestial_northangle(cd)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	orient:	Orientation matrix to use instead of cd.

  OUTPUT: NONE


 RETURN:
       Angle in radians.



 MODIFICATION HISTORY:
       Written by:     Spitale





























IMAGE_INTERP_CAM
----------------


 PURPOSE:
       Extracts a region from an image using the desired interpolation,
	accouting for the camera point-spread function is applicable.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = image_interp_cam(image, grid_x, grid_y, args)


 ARGUMENTS:
  INPUT:
	image:	An array of image point arrays.

	grid_x:	The grid of x positions for interpolation

	grid_y:	The grid of y positions for interpolation

	args:	Arguments to pass to the interpolation function.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	cd:	Camera descriptor.

	interp:	Type of interpolation to use.  Options are:
		'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.

	k:	"Half-width" of the convolution window.  The
		window actually covers the central pixel, plus
		k pixel in each direction.  Default is 3, which
		gives a 7x7 window.

	kmax:	Maximum value for k.

  OUTPUT: NONE


 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.



 MODIFICATION HISTORY:
       Written by:     Spitale












IMAGE_NORTHANGLE
----------------


 PURPOSE:
	Computes the image azimuth (see image_azimuth.pro) of the north 
	direction on the surface of the given body at the specified pixel 
	location p.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = image_northangle(cd, gbx, p)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Any subclass of GLOBE.

	p:	Array (2) giving the image point.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: 
	valid:	Indicates whether the result has a solution.  -1 if no
		solution, 1 otherwise.


 RETURN:
       Angle in radians.



 MODIFICATION HISTORY:
       Written by:     Spitale






















IMAGE_SHIFT
-----------


 PURPOSE:
	Shifts an image by a specified (non-integer) amount using 
	interpolation.  If applicable, the camera pont-spread function 
	is accounted for in the interpolation.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = image_shift(image, dx, dy)


 ARGUMENTS:
  INPUT:
	image:	2-D array giving the image.

	dx:	Offset in the x direction.

	dy:	Offset in the y direction.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	cd:	Camera descriptor.

  OUTPUT: NONE


 RETURN:
       Shifted image.



 MODIFICATION HISTORY:
       Written by:     Spitale























IMPACT_PARAM
------------


 PURPOSE:
	Computes the impact parameter of a vector originating at the 
	given camera, relative to the given planet object.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       B = impact_param(cd, pd)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	pd:	Planet descriptor.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	p:	Image point specifying te ray to project.  If not given, 
		the camera optic axis is used.

  OUTPUT: NONE


 RETURN:
       Shifted image.



 MODIFICATION HISTORY:
       Written by:     Spitale

























IN_IMAGE
--------


 PURPOSE:
	Determines which input points lie within an image described by the
	given camera descriptor.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       sub = in_image(cd, p)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	p:	Array (2,nv) of image points.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
       Subscripts of points that lie in the image.  -1 if there are none.



 MODIFICATION HISTORY:
       Written by:     Spitale



























LTCORR
------


 PURPOSE:
	Performs a light-travel-time correction.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       ltcorr, obs_bx, targ_bx, c=c


 ARGUMENTS:
  INPUT:
	obs_bx:	Any subclass of BODY describing the observer.

	obs_bx:	Array(nt) of any subclass of BODY describing the targets.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	c:	Speed of light.

	iterate:	If set, then the routine will iterate to refine
			the solution.

	epsilon:	Stopping criterion: maximum allowable timing error.
			Default is 1d-7.

  OUTPUT: NONE


 RETURN: NONE



 MODIFICATION HISTORY:
       Written by:     Spitale






















MAP_UNITS_DISK
--------------


 PURPOSE:
	Computes units for a map descriptor given pixel scales for
	the map center.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       v = map_units_disk(md, resrad=resrad, reslon=reslon)


 ARGUMENTS:
  INPUT:
	md:	Map descriptor.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	resrad:	Scale (length/pixel) in radial direction.

	reslon:	Scale (radians/pixel) in longitude direction.

  OUTPUT: NONE


 RETURN: 
	Array (2) giving the map units.


 MODIFICATION HISTORY:
       Written by:     Spitale



























MASK_GLOBE
----------


 PURPOSE:
	Computes an image mask for a globe.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = mask_globe(cd, gbx)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Any subclass of GLOBE.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	slop:	Fractional amount by which to increase the globe
		radii before computing the mask.

	oversample:	Factor by wich to oversample the grid to reduce
			aliasing.

  OUTPUT: NONE


 RETURN:
       Angle in radians.



 MODIFICATION HISTORY:
       Written by:     Spitale























MINMAX_LATLON
-------------


 PURPOSE:
	Computes latitide/longitude ranges visible in a given camera.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       minmax_latlon, cd, gbx, dkx, frame_bd=frame_bd


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	gbx:	Globe descriptor.

	dkx:	Disk descriptor, for hiding points.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

	slop:	Amount by which to expand image border for search.

  OUTPUT: 
	latmin:	Southernmost latitude visible.

	latmax:	Northernmost latitude visible.

	lonmin:	Westernmost longitude visible.

	lonmax:	Easternmost longitude visible.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale
















PHASE_CORRECTION
----------------


 PURPOSE:
	Assuming body gbx is a sphere, this routine computes the correction
	in pixels needed to obtain its true image center given a measurement 
	of its center of light.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       dxy = phase_correction(cd, gbx, sund)


 ARGUMENTS:
  INPUT:
	cd:	Any subclass of DISK.

	gbx:	Any subclass of GLOBE.

	sund:	STAR descriptor representing the sun.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN: 
	Array (2) giving the phase correction offset.


 MODIFICATION HISTORY:
       Written by:     Spitale

























PIXEL_GRID
----------


 PURPOSE:
	Generates grid lines aligned with the image window.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       grid_pts = pixel_grid()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	spacing:	Distance in pixels between grid lines.

	np:	Number of points on each grid line.

	wnum:	Window number for determining grid size.  If not set,
		the current grapics window is used.

  OUTPUT: NONE


 RETURN:
       Angle in radians.



 MODIFICATION HISTORY:
       Written by:     Spitale

























PLOT_INERTIAL
-------------


 PURPOSE:
       Plots inertial vectors on a camera image.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       plot_inertial, cd, v, r


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	v:	Inertial vectors giving origins of vectors to plot.  If only one
		vector, this will be used as the origin for all of the plotted
		vectors.

	r:	Inertial vectors giving the vectors to plot, starting at
		the given origins.

  OUTPUT:
       NONE

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 7/2002






























PROJECT_MAP
-----------


 PURPOSE:
       Reprojects images.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = project_map(image, md=md, cd=cd, bx=bx, sund=sund, $
                            pc_xsize, pc_ysize, $
                            hide_fn=hide_fn, hide_data_p=hide_data_p)

 ARGUMENTS:
  INPUT:
          image:     Array (xsize,ysize,nplanes) giving the image(s) to
		      reproject.

       pc_xsize:     x size of map workspace

       pc_ysize:     y size of map workspace

	bounds:	      Projection bounds specified as [lat0, lat1, lon0, lon1].


  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
	md:	Map descriptor.

	cd:	Camera descriptor.

	bx:	Body descriptor.  If two descriptors given, then the
		first is used with the cd input and the second is used with 
		the map input.

	sund:	Star descriptor for the sun.  If not given, the dark side
		is mapped.  If two descriptors given, then the
		first is used with the cd input and the second is used with 
		the map input.

	hide_fn:	Array of hide functions, e.g. 'pm_hide_ring'

	hide_data_p:	Array of hide data pointers, e.g. nv_ptr_new(rd)

	offset:	Offset in [lat,lon] to apply to map coordinates before 
		projecting.

	interp:	Type of interpolation, see image_interp_cam.

	arg_interp:	Interpolation argument, see image_interp_cam.

	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.  This argument is passed through to
			the hide functions in case a disk descriptor is
			used.  It really ought to be hidden in hide_data_p.

	roi:	Subscripts in the output map specifying the map region
		to project, instead of the whole thing.

	edge:	Number of pixels to exclude from edge of the input image.

	smooth:	If set, the input image is smoothed before reprojection.

 OUTPUT:
	NONE


 RETURN:
       Array (xsize,ysize,nplanes) giving the reprojected image(s).


 MODIFICATION HISTORY:
       Written by:     Spitale, 6/1998



















































RADEC_ANGLE
-----------


 PURPOSE:
	Computes angles between vectors specified in the radec system.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       angle = radec_angle(radec1, radec2)


 ARGUMENTS:
  INPUT:
	radec1:	Array (nv,3,nt) giving the radec representation of the 
		first vector.

	radec2:	Array (nv,3,nt) giving the radec representation of the 
		second vector.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
       Array (nv,nt) of angles between the input vectors.



 MODIFICATION HISTORY:
       Written by:     Spitale


























RADEC_IMAGE_BOUNDS
------------------


 PURPOSE:
	Determines radec coordinate ranges visible in an image described
	by a given camera descriptor.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       radec_image_bounds, cd, $
	        ramin=ramin, ramax=ramax, decmin=decmin, decmax=decmax


 ARGUMENTS:
  INPUT:
	cd:	Camera descripor.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	corners:	Array(2,2) giving corers of image region to consider.

	slop:	Number of pixels by which to expand the image in each
		direction.


  OUTPUT: 
	ramin:	Minimum RA in image.

	ramax:	Maximum RA in image.

	decmin:	Minimum DEC in image.

	decmax:	Maximum DEC in image.

	border_pts_im:	Array (2,np) of points along the edge of the image.

	status:	-1 if no globe in the image, 0 otherwise.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale














RADEC_TO_ORIENT
---------------


 PURPOSE:
	Computes orientation matrices such that the optic axis (axis 1) 
	points in the direction of the given radec and the image y direction 
	(axis 2) points toward celestial north (inertial [0,0,1]).


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       M = radec_to_orient(radec)


 ARGUMENTS:
  INPUT:
	radec:	Array (nt) giving the radec representations of the 
		pointing vectors.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
       Array (3,3,nt) of orientation matrices.



 MODIFICATION HISTORY:
       Written by:     Spitale



























RADEC_TWIST_TO_CD
-----------------


 PURPOSE:
       Computes a camera orietation matrix from thegiven Euler angles.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       radec_twist_to_cd, ra, dec, twist, cd=cd


 ARGUMENTS:
  INPUT:
       ra:	Right ascension relative to the inertial frame.

	dec:	Declination relative to the inertial frame.

	twist:	Twist angle relative to the inertial frame.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: 
	cd:	Array (nt) of initial camera descriptors.  This 
		argument must contain a valid camera descriptor
		upon calling this routine.

  OUTPUT:
	cd:	Array (nt) of camera descriptors with new
		orientations.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale






















RAY_POINTS
----------


 PURPOSE:
       Computes points along rays.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       ray_pts = ray_points(r, v, np, dp)


 ARGUMENTS:
  INPUT:
       r:	Array (nt) of inertial ray origins.

       v:	Array (nt) of inertial ray directions, of unit length.

	np:	Number of points to compute on each ray.

	dp:	Point spacing.

  OUTPUT:
       NONE


 KEYOWRDS:
  INPUT: 
	cd:	Optional array (nt) of camera descriptors.

  OUTPUT: NONE

 RETURN: 
	If no camera descriptor is given, an array (np,3,nt) of inertial
	position vectors is returned.  If cd is given, an array (2,np,nt)
	of image points is returned.


 MODIFICATION HISTORY:
       Written by:     Spitale






















RAY_SUB_POINT_GRAPHIC
---------------------


 PURPOSE:
	Iterates to find the point on the surface of the globe where the 
	given ray is closest to the surface.

 CATEGORY:
	NV/LIB/TOOLS


 CALLING SEQUENCE:
    result = ray_sub_point_graphic(gbx, v, r)


 ARGUMENTS:
  INPUT:
	gbx:	Any subclass of GLOBE.

	v:	Array (nv,3) giving the ray origins in the BODY frame.

	r:	Array (nv,3) giving the ray directions in the BODY frame.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	normal:	Array (nv,3) of surface normals at each closest
	approach.


 RETURN: 
	Array (nv,3) of closest approach poitns in the BODY frame.


 MODIFICATION HISTORY:
       Written by:     Spitale
	
























RINGPLANE_RADIAL_BOUNDS
-----------------------


 PURPOSE:
	Finds ringplane radial bounds by projecting the camera FOV on 
	the ringplane.  


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = ringplane_radial_bounds(cd, dkx, frame_bd=frame_bdp)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

	dkx:	Any subclass of DISK.

  OUTPUT:  NONE


 KEYOWRDS:
  INPUT: 
	frame_bd:	Subclass of BODY giving the frame against which to 
			measure inclinations and nodes, e.g., a planet 
			descriptor.

  OUTPUT: NONE


 RETURN:
       Array (2) giving the minimum and maximum disk radii visible 
	to the camera.



 MODIFICATION HISTORY:
       Written by:     Spitale























SET_CORE_NAME
-------------


 PURPOSE:
       Sets the object name associated with an object descriptor


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       set_core_name, ods, name


 ARGUMENTS:
  INPUT:
            ods:       An array of Object descriptors

            name:      string giving the new name

  OUTPUT:
       NONE

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale



































STELLAB
-------


 PURPOSE:
	Corrects body positions for stellar aberration.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       stellab, obs_bx, targ_bx


 ARGUMENTS:
  INPUT:
	obs_bx:		Array (nt) of any subclass of BODY describing 
			the observer.

	targ_bx:	Array (nt) of any subclass of BODY describing 
			the target.  The position of this body is modified. 

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	c:	Speed of light.

  OUTPUT: NONE


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale



























STELLAB_POS
-----------


 PURPOSE:
	Corrects positions for stellar aberration.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       new_pos = stellab_pos(pos, vel)


 ARGUMENTS:
  INPUT:
	pos:	Array (nv,3) of target inertial position vectors to be 
		corrected.

	vel:	Array (nv,3) of observer inertial velocity vectors.
		Note observer is assumed to be at the origin.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	c:	Speed of light.

  OUTPUT: 
	axis:	Array (nv,3) of rotation axes corresponding to each 
		correction.

	theta:	Array (nv) of rotation angles corresponding to each 
		correction.


 RETURN: 
	Array (nv,3) of corrected position vectors.


 MODIFICATION HISTORY:
       Written by:     Spitale





















STELLAB_RADEC
-------------


 PURPOSE:
	Corrects positions given in the radec system for stellar 
	aberration.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       new_radec = stellab_radec(radec, vel)


 ARGUMENTS:
  INPUT:
	radec:	Array (nv,3) of target inertial position vectors to be 
		corrected, given in the radec system.

	vel:	Array (nv,3) of observer inertial velocity vectors.
		Note observer is assumed to be at the origin.

  OUTPUT:  NONE


 KEYWORDS:
  INPUT: 
	c:	Speed of light.

  OUTPUT: NONE


 RETURN: 
	Array (nv,3) of corrected position vectors in the radec system.


 MODIFICATION HISTORY:
       Written by:     Spitale

























STEREO_SPLIT
------------


 PURPOSE:
       Splits a given camera descriptor into a stereo pair.


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       cds = stereo_split(cd, sep=sep)


 ARGUMENTS:
  INPUT:
	cd:	Camera descriptor.

  OUTPUT: NONE


 KEYOWRDS:
  INPUT: 
       sep:	Separation distance of output descriptors.

  OUTPUT: NONE

 RETURN: 
	Array (2) giving the left and right camera descriptors.
	Each descriptor is cloned from the input descripor, and has
	been translated +/- sep/2 in the camara body 0-axis direction.


 MODIFICATION HISTORY:
       Written by:     Spitale





























SUB_LATLON
----------


 PURPOSE:
	Computes sub-observer latitude and longitude on a globe.

 CATEGORY:
	NV/LIB/TOOLS


 CALLING SEQUENCE:
    result = sub_latlon(gbx, v, sublat, sublon)


 ARGUMENTS:
  INPUT:
	gbx:	Array (nt) of any subclass of GLOBE.

	v:	Array (nv,3,nt) giving the observer position in the BODY frame.

  OUTPUT:
	sublat:	Array (nv,nt) of latitude of sub-observer point on gbx.

	sublon:	Array (nv,nt) of longitude of sub-observer point on gbx.


 KEYWORDS:
  INPUT:
	graphic:   If set, use planetographic coordinates.

  OUTPUT:
	body_pt:	Array (nv,3,nt) giving the sub-observer point in 
			BODY coordinates.

	surf_pt:	Array (nv,3,nt) giving the sub-observer point in 
			SURFACE coordinates.


 RETURN: NONE


 MODIFICATION HISTORY:
       Written by:     Spitale
	





















SURFACE_TO_DEGREES
------------------


 PURPOSE:
       Converts angular part of surface vectors from radians to degrees


 CATEGORY:
       NV/LIB/TOOLS


 CALLING SEQUENCE:
       result = surface_to_degrees(v)


 ARGUMENTS:
  INPUT:
              v:       An array of surface vectors (nv,3,nt).

  OUTPUT:
       NONE

 RETURN:
       Array of vectors (nv,3,nt)

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale		11/12/01


































TARGET_ALTAZ
------------


 PURPOSE:
	Computes altitude/azimuth of a target relative to a point on or near the
	surface of a globe.

 CATEGORY:
	NV/LIB/TOOLS


 CALLING SEQUENCE:
    result = target_altaz(bx, gbx, lat, lon, alt)


 ARGUMENTS:
  INPUT:
	bx:	Array (nt) of any subclass of BODY giving the target.

	gbx:	Array (nt) of any subclass of GLOBE.

	lat:	Latitude of observer wrt gbx.

	lon:	Longitude of observer wrt gbx.

	alt:	Altitude of observer wrt gbx.

  OUTPUT:
        NONE

 KEYWORDS:
  INPUT:
	  cd:	Camera descriptor.

         gd:   Optional generic descriptor containing cd.

  OUTPUT:
    profile:   The profile.

      sigma:   Array giving the standard deviation at each point in the
		profile.

    distance:  Array giving the distance, in pixels, along the profile.


 RETURN:
	Vector from observer to target in the altaz system.


 MODIFICATION HISTORY:
       Written by:     Spitale
	













