psym = 1
symsize = 0.5

;====================================================
; load and display image
;====================================================
 file = '../demo/data/n1350122987.2'
 dd=nv_read(file, im, label, /silent)
 ctmod, top=top
 tvim, im, zoom=0.45, /order, /new

;====================================================
; get descriptors and compute limb
;====================================================
cd = pg_get_cameras(dd)
pd = pg_get_planets(dd, od=cd, plt_name=['JUPITER'])

bd = cam_body(cd)

limb_ps = pg_limb(cd=cd, gbx=pd)
pg_draw, limb_ps, color=ctyellow()

;====================================================
; generate image-space grid
;====================================================
s = size(im)
xsize = s[1] && ysize = s[2]

;n = 20
n = 100
dx = xsize / n
dy = ysize / n

p0 = dblarr(2,n,n)

for i=0, n-1 do for j=0, n-1 do p0[*,i,j] = [dx*(i+0.5), dy*(j+0.5)]
p0 = reform(p0, 2,n*n, /over)

plots, p0, psym=psym, symsize=symsize

;====================================================
; convert to inertial view vectors
;====================================================
r0 = bod_body_to_inertial(bd, $
      cam_focal_to_body(cd, $
        cam_image_to_focal(cd, p0)))
v = clget(cd, 'POS')##make_array(n*n,val=1d)

;====================================================
; compute corrected view vectors
;====================================================
r1 = grel_correct(v, r0, pd[0], c=3d8, G=6.67d-11, test=cd, scale=1000d)

;====================================================
; convert back to image points
;====================================================
p1 = reform(inertial_to_image(cd, r1), 2,n*n, /over)

plots, p1, col=ctred(), psym=psym, symsize=symsize
stop
for i=0, n*n-1 do $
   plots, [p0[0,i],p1[0,i]], [p0[1,i],p1[1,i]], psym=-3, col=ctblue()

