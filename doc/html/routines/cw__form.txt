CW__FORM

 PURPOSE:
	CW__FORM is a compound widget that simplifies creating
	small forms which contain text, numeric fields, buttons, 
	lists and droplists.  Event handling is also simplified.

 CATEGORY:
	Compound widgets.

 CALLING SEQUENCE:
	widget = CW__FORM([Parent,] Desc)

 INPUTS:
       Parent:	The ID of the parent widget.  Omitted for a top level 
		modal widget.

 Desc: A string array describing the form.  Each element of the
	string array contains two or more comma-delimited fields.  The
	character '\' may be used to escape commas that appear within fields.
	To include the backslash character, escape it with a second
	backslash.  Field names are case insensitive.

	The fields are defined as follows:

 Field 1: Depth: the digit 0, 1, 2, or 3.  0 continues the current
	level, 1 begins a new level, 2 denotes the last element of the
	current level, and 3 both begins a new level and is the last entry of
	the current level.  Nesting is used primarily with row or column 
	bases for layout.  See the example below.
 Field 2: Item type: BASE, BUTTON, DROPLIST, FLOAT, INTEGER, LABEL, LIST,
		or TEXT.
	The items return the following value types:
	BUTTON - For single buttons, 0 if clear, 1 if set.
		For multiple buttons, also called button groups, that are
		exclusive, the index of the currently set button is returned.
		For non-exclusive button groups, the value is an array
		with an element for each button, containing 1
		if the button is set, 0 otherwise.
	DROPLIST, LIST - a 0 based index indicating which item is selected.
	FLOAT, INTEGER, TEXT - return their respective data type.

 Field 3: Initial value.  Omitted for bases.
	For BUTTON and DROPLIST items, the value field contains one
		or more item names, delimited by the | character.
	For FLOAT, INTEGER, LABEL, and TEXT items the value field contains the
		initial value of the field.

 Fields 4 and following: Keywords or Keyword=value pairs that specify
	optional attributes or options.  Keywords are case insensitive
	and an optional leading '/' character is discarded.
	Possibilities include:

	COLUMN	If present, specifies column layout for bases or multiple
		buttons.
	EXCLUSIVE  If present makes an exclusive set of buttons.  The
		default is nonexclusive.
	EVENT=<name> specifies the name of a user-written event function that
		is called whenever the element is changed.  The function
		is called with one parameter, the event structure.  It may
		return an event structure or zero to indicate that no
		further event processing is desired.
	FONT=<font name>  If present, the font for the item is specified.
	FRAME:	If present, a frame is drawn around the item.  May be used
		with all items.
	LABEL_LEFT=<label>  annotate a button or button group with a label
		placed to the left of the buttons.  Valid with BUTTON,
		DROPLIST, FLOAT, INTEGER, LIST and TEXT items.
	LABEL_TOP=<label> annotate a button or button group with a label
		placed at the top of the buttons.  Valid with BUTTON,
		DROPLIST, FLOAT, INTEGER, LIST and TEXT items.
	LEFT, CENTER, or RIGHT   Specifies alignment of label items.
	QUIT	If present, when the user activiates this entry when it
		is activated as a modal widget, the form is destroyed
		and its value returned as the result of CW__FORM.  For non-
		modal form widgets, events generated by changing this item
		have their QUIT field set to 1.
	ROW	If present, specifies row layout for bases or multiple
		buttons.
	SCROLL:	If present, the base will have a scrollbar.
	SET_VALUE  Sets the initial value of button groups or droplists.
	TAG=<name>   the tag name  of this element.  The widget's value
		is a structure corresponding to the form.  Each form item
		has a corresponding tag-value pair in the widget's value.
		Default = TAGnnn, where nnn is the index of the item
		in the Desc array.
	WIDTH=n Specifies the width, in characters, of a TEXT, INTEGER,
		or FLOAT item.
	ALL_EVENTS Determines whether all events or just end-of-line events 
	           are generated for TEXT, INTEGER, or FLOAT items.
	
 KEYWORD PARAMETERS:
	COLUMN:		  If set the main orientation is vertical, otherwise
			  horizontal.
	IDS:		  A named variable into which the widget id of
				each widget corresponding to an element
				in desc is stored.
	tags:		  A named variable into which the structure tag of
				each widget corresponding to an element
				in desc is stored.  
	TITLE:		  The title of the top level base.  Not used
			  if a parent widget is supplied.
	UVALUE:		  The user value to be associated with the widget.
       UNAME:            The user name to be associated with the widget.

 OUTPUTS:
       If Parent is supplied, the result is the ID of the base containing
	the form.  If Parent is omitted, the form is realized as a modal
	top level widget. The function result is then a structure containing
	the value of each field in the form when the user finishes.

	This widget has a value that is a structure with a tag/value pair
	for each field in the form.  WIDGET_CONTROL, id, GET_VALUE=v may
	be used to read the current value of the form.  WIDGET_CONTROL, id,
	SET_VALUE={ Tagname: value, ..., Tagname: value} sets the values
	of one or more tags.

 SIDE EFFECTS:
	Widgets are created.

 RESTRICTIONS:
	
 EXAMPLES:

	**** Define a form, with a label, followed by two vertical button
	groups one non-exclusive and the other exclusive, followed by a text
	field, and an integer field, followed lastly by OK and Done buttons.
	If either the OK or Done buttons are pressed, the form is exited.
	

		; String array describing the form
	desc = [ $
	    '0, LABEL, Centered Label, CENTER', $
		; Define a row base on a new depth.  All elements until a depth
		; of two are included in the row.
 	    '1, BASE,, ROW, FRAME', $
 	    '0, BUTTON, B1|B2|B3, LABEL_TOP=Nonexclusive:, COLUMN, ' + $
               'TAG=bg1, ' + $
               'SET_VALUE=[1\, 0\, 1]', $   ; set first and third buttons
		; This element terminates the row.
 	    '2, BUTTON, E1|E2|E2, EXCLUSIVE,LABEL_TOP=Exclusive,COLUMN, ' + $
               'TAG=bg2, ' + $
               'SET_VALUE=1', $   ; set second button
 	    '0, TEXT, , LABEL_LEFT=Enter File name:, WIDTH=12, TAG=fname', $
	    '0, INTEGER, 0, LABEL_LEFT=File size:, WIDTH=6, TAG=fsize', $
	    '1, BASE,, ROW', $
	    '0, BUTTON, OK, QUIT,FONT=*helvetica-medium-r-*-180-*,TAG=OK', $
	    '2, BUTTON, Cancel, QUIT']

    To use the form in a modal manner:
	  a = CW__FORM(desc, /COLUMN)
	  help, /st,a
    When the form is exited, (when the user presses the OK or Cancel buttons), 
	the following structure is returned as the function's value:
		BG1             INT       Array(3)  (Set buttons = 1, else 0)
		BG2             INT              1  (Exclusive: a single index)
		FNAME           STRING    'test.dat' (text field)
		FSIZE           LONG               120 (integer field)
		OK              LONG                 1 (this button was pressed)
		TAG8            LONG                 0 (this button wasn't)
	Note that if the Cancel button is pressed, the widget is exited with
	the OK field set to 0.

  *****************

    To use CW__FORM inside another widget:
	    a = widget_base(title='Testing')
	    b = cw__form(a, desc, /COLUMN)
	    WIDGET_CONTROL, a, /real
	    xmanager, 'Test', a
	In this example, an event is generated each time the value of
	the form is changed.  The event has the following structure:
	   ID              LONG                <id of CW__FORM widget>
	   TOP             LONG                <id of top-level widget>
	   HANDLER         LONG                <internal use>
	   TAG             STRING    'xxx'	; name of field that changed
	   VALUE           INT       xxx	; new value of changed field
	   QUIT            INT              0	; quit flag
    The event handling procedure (in this example, called TEST_EVENT), may use
	the TAG field of the event structure to determine which field
	changed and perform any data validation or special actions required.
	It can also get and set the value of the widget by calling
	WIDGET_CONTROL.
    A simple event procedure might be written to monitor the QUIT field
	of events from the forms widget, and if set, read and save the
	widget's value, and finally destroy the widget.

    To set or change a field within the form from a program, use a the
	WIDGET_CONTROL procedure:
	   	WIDGET_CONTROL, b, SET_VALUE={FNAME: 'junk.dat'}
	This statement sets the file name field of this example.

 MODIFICATION HISTORY:
	January, 1995.  DMS, Written.
       June, 1996.     MLR, allowed SET_VALUE to be specified in the
                       description string for DROPLIST widgets.
	July, 2002.	Spitale, copied from cw_form.
	July, 2002.	Spitale, added 'tags' keyword.
	July, 2002.	Spitale, added 'all_events' keyword.
	July, 2002.	Spitale, noted lameness of 'goto' statement in
			cw__form_build
	Dec., 2002.	Spitale, added 'TAG' keyword functionality for bases 
			and labels.
	Dec., 2002.	Spitale, added 'SCROLL' keyword for bases.
