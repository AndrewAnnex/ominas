    OPENSOURCE MODULAR IMAGE NAVIGATION AND ANALYSIS SOFTWARE (OMINAS)

				OVERVIEW
		--------------------------------------
                             Version 1.0
		--------------------------------------



Introduction
============

OMINAS is an IDL-based software environment for the reduction and analysis 
of data taken by any space-based or Earth-based system.  It was written by 
Joseph Spitale under the direction of Carolyn Porco.  Other contributers 
include Vance Haemmerle, Matthew Tiscareno, John Weiss, and Daiana DiNino.  
Funding for its initial development was provided through the Cassini mission.

Functional requirements
-----------------------

 OMINAS development is guided by the following functional requirements:

 1. Portability OMINAS should operate on as many UNIX-based platforms as
		possible.  

		This requirement is easily (though not trivially) met using
		IDL.  To date, OMINAS has been tested on Alpha/OSF, Sun/Solaris
		PC/Linux, and Mac/OS X.  However, note that a specific OMINAS 
		configuration (see Architecture below) may contain platform 
		dependencies, like compiled code.

		Note that it is desirable for OMINAS to remain backward
		compatible to the earliest possible IDL version so that 
		users are not forced to upgrade.


 2. Speed	OMINAS computational routines must be as fast as possible.

		Although this requirement is the most difficult to meet using
		IDL, through the use of massive array operations most existing
		routines in OMINAS operate at an acceptable speed, often
		comparable to analogous code written in C.


 3. Modularity	OMINAS obeys object-oriented software concepts, so that
		it is highly modular and relatively easy to modify.  

		Although IDL directly provides for an object-oriented
		architecture, that functionality is not used by OMINAS in 
		order to better comply with the requirement (2) above.  
		This issue is discussed in more detail in the OMINAS geometry
		library description.


 4. Generality	OMINAS itself does not contain any code that is dependent
		upon the particular instrument that generated the input data, 
		or upon the organization of the file in which the data resides.

		Because IDL compiles code dynamically, this requirement is met
		in OMINAS by allowing for external "user"-written configuration
		code that contains all of the specifics of a particular data
		source.


 5. Scripting	OMINAS maintains a lowest-level user interface that operates 
		from a command line so that analyses may be constructed as
		command scripts.  Such a capability is necessary in order for
		jobs to be performed in batch mode with no user intervention.
		Moreover, such a capability must not prevent the addition of 
		a more user-friendly graphical interface.

		OMINAS contains a command level user interface known as PG, which 
		consists of a number of IDL programs.  Those programs may be
		combined into IDL batch files and run autonomously.  There is
		also a graphical interface call GRIM (GRaphical Interface to
		Minas).


		
Architecture
------------

 The following diagram illustrates the relationships among the various
 components of an OMINAS installation.

	          OMINAS core	
      * * * * * * * * * * * * * * * * * * 
      * Graphical interface		*
      *	+---------------------------+	*
      *	| 	grim, brim	    |	*
      *	+-------------|-------------+	*	   OMINAS
      *		      |			*      configuration
      *	Command level |	..............  *     * * * * * * * *
      *	+-------------|-:-----------+:  *     *		    *
      *	|tvim	pg_..	:nv_read <============> I/O <==========> data files:
      *	|	 / \	:nv_write   |:  *     *		    *	 VICAR, FITS, ..
      *	+------/-----\--:-----------+:  *     *		    *
      *	     /	       \:	     :  *     *		    *
      *	+--/--------+	:\	     :  *     *		    *
      *	|objects    |	:nv_get_value <=======> translators <==> ancilliary data:
      *	|cam,plt, ..|	:nv_put_value:  *     *		    *	 SPICE, SEDR, ..
      *	+--\--------+	./............  *     * * * * * * * *
      *	     \	       /      NV	*    Mission-dependent
      *	       +------+      		*
      *	       | util |			*
      *	       +------+			*
      * * * * * * * * * * * * * * * * * *
	      Mission-independent


 The core OMINAS code is completely independent of the source of the data and
 the type of file in which it is stored.  Those details are configured based
 on the intended purpose of a particular OMINAS installation.  For example, the
 Cassini ISS installation contains configuration code that reads and writes
 VICAR image files and SPICE kernels.  

 The separation between the data processing and I/O is maintained by a
 portion of the OMINAS system called NV.  NV uses application-specific
 configuration tables to determine how to transform ancillary data from 
 external sources into the standard data objects recognized in OMINAS.

 The OMINAS object library defines and manipulates the the basic data objects
 used to describe the various geometric  entities -- cameras, planets, rings,
 etc., -- of interest to the user.  

 The typical OMINAS user will operate at the command level, which consists of the
 image display program tvim, the NV I/O commands nv_read and nv_write, and a set
 of programs based on the underlying object library and utility routines
 referred to as PG.  

 The graphical interface to OMINAS is called GRIM.  Although it's designed to be
 used along with the command line like a fancy TVIM, GRIM may be used on its own.



