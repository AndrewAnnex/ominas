									12/05/15
UTIL Program Reference
======================

 Summary
 -------
  - ACTIVITY
       Computes the activity in an image.

  - AMOEBA
	Multidimensional minimization of a function FUNC(X), where
	X is an N-dimensional vector, using the downhill simplex
	method of Nelder and Mead, 1965, Computer Journal, Vol 7, pp 308-313.

	This routine is based on the AMOEBA routine, Numerical
	Recipes in C: The Art of Scientific Computing (Second Edition), Page
	411, and is used by permission.

  - APPEND_ARRAY
	Concatenates two arrays; even if one is undefined or "unset".
	This routine is intended to be used as a replacement for the 
	syntax: result = [array1, array2], except that neither array 
	requires checking.

  - ARRTRIM
	Trims all elements matching the given item from an array.  Options 
	are to trim all matching elements, just leading elements, just
	trailing elements, or both leading and trailing elements.

  - B1950_TO_J2000
	Transforms vectors from B1950 to J2000 coordinates, or vis-versa.

  - CAT_POINTS
       To concatenate arrays of image points.

  - CAT_VECTORS
       To concatenate arrays of column vectors

  - CC_THRESHOLD
       To threshold points by correlation coefficient.

  - CENTRIC_TO_GRAPHIC
	Converts planetocentric surface coordinates to planetographic.

  - CENTRIC_TO_GRAPHIC_LAT
	Converts planetocentric latitudes to planetographic latitudes.

  - CLIP
	Return array with first value clipped off.

  - COMPLEMENT
       Determines the complement of an array of subscripts.

  - COMPRESS_LIST
       To compress a list to n elements, removing elements with a value
       of -1.

  - CORRELATE_POINTS
	Searches for offset dxy that translates a set of model points so as 
	to obtain the maximum correlation with a set of base points.

  - COVARIANCE
	Computes a covariance matrix for the problem specified by the input
	matrix.

  - CROSS_COMPARE
       To cross compare two lists generating two sets of indicies which
       cross compare their elements.

  - CROSS_CORRELATE_2D
       Calculates the correlation coefficient between an image and
       a model.

  - CURSOR_MOVE
       Moves an array of points by using the cursor and then to output
       the change from the original position when finished.  In moving
       the cursor, the mouse buttons control the motion:  LEFT to translate,
       MIDDLE to rotate, RIGHT to accept.

  - CW__ANIMATE
	This widget displays an animated sequence of images using
	X-windows Pixmaps. This is a compound widget, based on the
	XINTERANIMATE procedure, with the following advantages:
		- It can be included in other applications.
		- Multiple copies can be run simultaneously.

	The speed and direction of the display can be adjusted using
	the widget interface.

  - CW__BGROUP
   CW__BGROUP is a compound widget that simplifies creating
   a base of buttons. It handles the details of creating the
   proper base (standard, exclusive, or non-exclusive) and filling
   in the desired buttons. Events for the individual buttons are
   handled transparently, and a CW__BGROUP event returned. This
   event can return any one of the following:
       - The Index of the button within the base.
       - The widget ID of the button.
       - The name of the button.
       - An arbitrary value taken from an array of User values.

  - CW__FORM
	CW__FORM is a compound widget that simplifies creating
	small forms which contain text, numeric fields, buttons, 
	lists and droplists.  Event handling is also simplified.

  - CW__PDMENU
	CW__PDMENU is a compound widget that simplifies creating
	pulldown menus. It has a simpler interface than the XPDMENU
	procedure, which it is intended to replace. Events for the
	individual buttons are handled transparently, and a CW__PDMENU
	event returned. This event can return any one of the following:
               - The Index of the button within the base.
               - The widget ID of the button.
               - The name of the button.
		- The fully qualified name of the button. This allows
		  different sub-menus to contain buttons with the same
		  name in an unambiguous way.

	In this modified program, cw__pdmenu, the name given for the event
	handler for each button widget is used as the X resource anme as well.

  - C_CORRELATE_2D
       Calculates the correlation coefficient between an image and
       a model.

  - DECRAPIFY
       Circumvents a quirk of idl, returns first value of input if number
       of elements in array is 1.

  - DEGEN
       Removes degenerate trailing dimensions.

  - DELETE_FILE
	Deletes the specified file.

  - D_UNDEFINED
       Output the largest usable double floating value.

  - EXTERNAL_POINTS
       Output subscripts of points outside the given bounds.

  - FDELETE
	Delete files.

  - FILL_ARRAY
       Like the idl function make_array, but more flexible.

  - FINDFILE0
       Same as findfile, but expands the '~' symbol..

  - FINDFILE1
       A more flexible version of the IDL routine findfile.

  - FIXED_ARRAY
	Creates and array of fixed length by either truncating the given array
	or padding it with zeroes or null characters.

  - GAUSS2D_FIT
x = long(x[0])		;Retrieve X and Y vectors
y = long(x[1])

ilt = n_elements(a) eq 7	;TRUE if angle present.
f tilt then begin		;Rotate?
   xp = (x[2:nx+1]-a[4]) # replicate(1.0, ny)	;Expand X values
   yp = replicate(1.0, nx) # (x[nx+2:*]-a[5])	;expand Y values
   s = sin(A[6]) & c = cos(A[6])
   t =  xp * (c/a[2]) - yp * (s/a[2])
   yp = xp * (s/a[3]) + yp * (c/a[3])
   xp = temporary(t)
ndif else begin
   xp = (x[2:nx+1]-a[4]) # replicate(1.0/a[2], ny)	;Expand X values
   yp = replicate(1.0/a[3], nx) # (x[nx+2:*]-a[5])	;expand Y values
   s = 0.0 & c = 1.0
ndelse

 = nx * ny
 = reform(exp(-0.5 * (xp^2 + yp^2)), n)	;Exp() term, Make it 1D
 = a[0] + a[1] * u

f n_params(0) le 3 then return ;need partial?  No.

DER = FLTARR(n, n_elements(a))	;YES, make partial array.
DER[*,0] = 1.0			;And fill.
der[*,1] = u
 = a[1] * u			;Common term for the rest of the partials
der[*,2] = u * xp^2 / a[2]
der[*,3] = u * yp^2 / a[3]
der[*,4] = u * (c/a[2] * xp + s/a[3] * yp)
der[*,5] = u * (-s/a[2] * xp + c/a[3] * yp)
f tilt then pder[*,6] = -u * xp * yp * (a[2]/a[3]-a[3]/a[2])
ND



unction gauss2d_fit, z, a, x, y, NEGATIVE = neg, TILT=tilt, chisq=chisq
+
 NAME:
	GAUSS2D_FIT

 	Fit a 2 dimensional elliptical gaussian equation to rectilinearly
	gridded data.
		Z = F(x,y) where:
 		F(x,y) = A0 + A1*EXP(-U/2)
	   And the elliptical function is:
		U= (x'/a)^2 + (y'/b)^2
	The parameters of the ellipse U are:
	   Axis lengths are 2*a and 2*b, in the unrotated X and Y axes,
		respectively.
	   Center is at (h,k).
	   Rotation of T radians from the X axis, in the CLOCKWISE direction.
	   The rotated coordinate system is defined as:
		x' = (x-h) * cos(T) - (y-k) * sin(T)  <rotate by T about (h,k)>
		y' = (x-h) * sin(T) + (y-k) * cos(T)

	The rotation is optional, and may be forced to 0, making the major/
	minor axes of the ellipse parallel to the X and Y axes.

	The coefficients of the function, are returned in a seven
	element vector:
	a(0) = A0 = constant term.
	a(1) = A1 = scale factor.
	a(2) = a = width of gaussian in X direction.
	a(3) = b = width of gaussian in Y direction.
	a(4) = h = center X location.
	a(5) = k = center Y location.
	a(6) = T = Theta the rotation of the ellipse from the X axis
		in radians, counterclockwise.

  - GAUSS2_FUNCT
	Evaluate function for gauss2fit.
 CALLING SEQUENCE:
	FUNCT,X,A,F,PDER
 INPUTS:
	X = values of independent variables, encoded as: [nx, ny, x, y]
	A = parameters of equation described below.
 OUTPUTS:
	F = value of function at each X(i,j), Y(i,j).
	Function is:
		F(x,y) = A0 + A1*EXP(-U/2)
		where: U= (yp/A2)^2 + (xp/A3)^2

	  If A has 7 elements a rotation of the ellipse is present and:
		xp = (x-A4) * cos(A6) - (y-A5) * sin(A6)
		yp = (x-A4) * sin(A6) + (y-A5) * cos(A6)
	  If A has 6 elements, A6 (theta) is 0, the major and minor axes
	  of the ellipse are parallel to the XY axes, and:
		xp = (x-A4)   and   yp = (x-A5)

 Optional output parameters:
	PDER = (n_elements(z),6 or 7) array containing the
		partial derivatives.  pder(i,j) = derivative
		at ith point w/respect to jth parameter.
 PROCEDURE:
	Evaluate the function and then if requested, eval partials.

 MODIFICATION HISTORY:
	WRITTEN, DMS, RSI, June, 1995.

  - GAUSS_2D
       Generates an array containing a 2-dimensional gaussian

  - GETHOST
	Determines the host machine type.

  - GET_DOC_PURPOSE
       To extract the purpose from header documentation

  - GET_JULIANDATE
       To obtain the Julian Date

  - GET_PATH
	Obtains a path list from a specified path variable using the 
	same syntax used for IDL paths.

  - GET_USERNAME
       To obtain the username of the person running the function

  - GRAPHIC_TO_CENTRIC
	Converts planetographic surface coordinates to planetocentric.

  - GRAPHIC_TO_CENTRIC_LAT
	Converts planetographic latitudes to planetocentric latitudes.

  - HIST_2D
	Return the density function (histogram) of two variables.

  - IMAGE_GRADIENT
       To calculate the image gradiant.

  - IMAGE_INTERP
       Extracts a region from an image using the desired interpolation.

  - IMAGE_INTERP_CUBIC
       Extracts a region from an image using cubic interpolation.

  - IMAGE_INTERP_MEAN
       Extracts a region from an image using averaging interpolation.

  - IMAGE_INTERP_POLY
       Extracts a region from an image using Lagrange polynomial
	interpolation.

  - IMAGE_INTERP_SINC
       Extracts a region from an image using sinc interpolation.

  - IMAGE_INTERP_SINC
       Extracts a region from an image using sinc interpolation.

  - IMAGE_MEDIAN
	Produces an image in which each pixel is the median of the corresponding
	pixels in the input images.

  - IMAGE_MEDIAN
	Produces an image in which each pixel is the median of the corresponding
	pixels in the input images.

  - INTERNAL_POINTS
       Output subscripts of points inside the given bounds.

  - JUP_CONVERT_LONGITUDE
	Convert among Jupiter's I, II, and III longitude systems.

  - LOCMOD
       Finds points in the image at which the correlation with the
       given model is high.

  - MAKE_ARRAY1
       Same as IDL function, make_array, but if n=1 it returns a scalar.

  - MBFIT
	Performs a simultaneous least square fit using the given coefficients.

  - MFACT
       Computes the factorial of each element of x

  - MODLOC
       Finds points in the image at which the correlation with the
       given model is high.

  - NMAX
       Finds maximum values within many arrays.

  - NMIN
       Finds minimum values within many arrays.

  - NNWHERE
       Finds subscripts where an element in the first array matches
       elements in the second input array.

  - NTRACE
       Computes the traces of square matrices

  - NV_PTR_FREE_RECURSE
	Frees the given pointer and all pointers pointed to by it.

  - NWHERE
       Finds subscripts where an element in the first array matches
       elements in the second input array.

  - N_WHERE
       Finds subscripts where an element in the first array matches
       elements in the second input array.  This routine differs
	from nwhere in that 1) it works as advertised, and 2) it uses
	array operations for a faster search.  Also, this routine
	works only for numeric types.

  - PERIM_INTERP
	Interpolates within given ellipses in an image.

  - POLY_TRANSFORM
       Transforms an array of points given a polynomial transformation

  - POWER_MATRIX
       Constructs an array of n x n matrices such that the (i,j)th element
       of the kth matrix is:
                                  i    j
                   M(i,j,k) = p(k) q(k)

  - PROD
       Computes the product of the elements of the given array.

  - PRODUCT
       Computes the slow product of the elements of the given array.
	This routine gives better results te prod for input arrays of integer
	types with smal numbers of elements.

  - PTLOC
       To locate a point in an image that best fits a psf model.

  - PTR_COPY_RECURSE
	Copies data from the given pointer and from all pointers pointed to 
	by it.

  - RA_TO_XYZ
	Convert array of RA and DEC to an array of 1x3 position vectors 

  - READ_CSV
	Reads a CSV file.

  - READ_TXT_FILE
	Reads a text file, parsing some basic directives and removing
	comments.

  - READ_TXT_TABLE
	Reads a text file composed of rows and columns into an array.

  - REDUCE_DIM
       Converts an array to a 1d array.

  - REMCHAR
       Removes a character from a string

  - RM_LIST_ITEM
	Remove the item with index i from the given list and return the
	new list.  If the index is not in the list, then return the original
	list unchanged.

  - SAT_CONVERT_LONGITUDE
	Convert among Saturn's I, II, and III longitude systems.

  - SIGN
       Return the sign of the operand

  - SPLIT_FILENAME
	Divides a path in to directory and filename.

  - STRNPOS
       Finds every occurrence of the given character token within the given 
	string.

  - STRNPOS
       Finds first occurrence of a character other than the given character 
	token within the given string.

  - STRNUMBER
      Function to determine if a string is a valid numeric value.

 CALLING SEQUENCE:
      result = strnumber( st, [val, /HEX] )

 INPUTS:
      st - any IDL scalar string

 OUTPUTS:
      1 is returned as the function value if the string st has a
      valid numeric value, otherwise, 0 is returned.

 OPTIONAL OUTPUT:
      val - (optional) value of the string.  real*8

 OPTIONAL INPUT KEYWORD:
       /HEX - If present and nonzero, the string is treated as a hexadecimal
             longword integer.

 EXAMPLES:
      IDL> res = strnumber(' ',val)
           returns res=0 (not a number) and val is undefined

      IDL> res = strnumber('0.2d', val)
           returns res=1 (a valid number), and val = 0.2000d
              
 NOTES:
      (1) STRNUMBER was modified in February 1993 to include a special test for 
      empty or null strings, which now returns a 0 (not a number).    Without
      this special test, it was found that a empty string (' ') could corrupt
      the stack.

       (2) STRNUMBER will return a string such as '23.45uyrg' as a valid 
      number (=23.45) since this is how IDL performs the type conversion.  If
      you want a stricter definition of valid number then use the VALID_NUM
      function.
 HISTORY:
      version 1  By D. Lindler Aug. 1987
      test for empty string, W. Landsman          February, 1993
      Converted to IDL V5.0   W. Landsman   September 1997
      Hex keyword added.  MRG, RITSS, 15 March 2000.

  - STRUCT_SUB
	Creates a new structure whise fields are the same as those in the 
	given structure except for the specified substitutions.

  - STR_EXT
       Extracts the substring which is delimited by the given tokens.

  - STR_NSPLIT
       Splits the string into substrings delimited by the given token.

  - STR_SPLIT
       Splits the string into two substrings delimited by the given token.

  - TAG_EXISTS
	Determines whether a structure contains a given field.

  - TRANS_SOLVE
	Solves the transcendental equation x = f(x) using iteration.

  - TRIM_EXTERNAL_POINTS
       Trim external points from an array of image points.

  - TRIM_REGION
       Trim points outside a defined region.

  - TVDRAG
	Allows user to drag a given image across a background image.

  - TVLINE
	Returns device coordinates of the beginning and end points of a user
	selected line.

  - TVPATH
	Returns device coordinates of vertices on a curve selected by the user.

  - TVREC
	Returns device coordinates of the upper left and lower right corner 
	of a user-selected box.

  - VALID_INDEX
       Determines if an index into an array is valid

  - VFACT
       Computes the factorial of each element of x

  - VTAYLOR
       Evaluates a taylor series using the given t=0 derivatives, dv, at
       each time t=dt.

  - WRITE_BIN_FILE
	Writes data to a binary file.

  - WRITE_TXT_FILE
	Writes text to a file.

  - XBOUND
       Return y values of points bounding with x values

  - XINTERANIMATE1
	Display an animated sequence of images using X-windows Pixmaps.
	The speed and direction of the display can be adjusted using
	the widget interface.

  - XYZ_TO_RA
	Convert an array of position vectors [x, y, z] to RA and DEC

  - ZFILL
	Replace tagged (default=0) values in array with mean of box
	around pixel.















































ACTIVITY
--------


 PURPOSE:
       Computes the activity in an image.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = activity(image)


 ARGUMENTS:
  INPUT:
       image:  Input image.


  OUTPUT:
       NONE

 KEYWORDS:
  INPUT: 
	NONE


  OUTPUT:
       NONE


 RETURN:
       The image activity at each pixel, computed as

		activity = |dn_00 - dn_22| + |dn_20 - dn_02|,

	where the pixel coordinates (i,j) are defined by

			(0,0) (1,0) (2,0)
			(0,1) (1,1) (2,1)
			(0,2) (1,2) (2,2)

	in a 3x3 box centered at a given image location.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale;  4/2002













AMOEBA
------

 PURPOSE:
	Multidimensional minimization of a function FUNC(X), where
	X is an N-dimensional vector, using the downhill simplex
	method of Nelder and Mead, 1965, Computer Journal, Vol 7, pp 308-313.

	This routine is based on the AMOEBA routine, Numerical
	Recipes in C: The Art of Scientific Computing (Second Edition), Page
	411, and is used by permission.

 CATEGORY:
	Function minimization/maximization. Simplex method.

 CALLING SEQUENCE:
	Result = AMOEBA(Ftol, ....)
 INPUTS:
    FTOL:  the fractional tolerance to be achieved in the function
	value.  e.g. the fractional decrease in the function value in the
	terminating step.  This should never be less than the
	machine's single or double precision.
 KEYWORD PARAMETERS:
    FUNCTION_NAME: a string containing the name of the function to
	be minimized.  If omitted, the function FUNC is minimized.
	This function must accept an Ndim vector as its only parameter and
	return a scalar single or double precision floating point value as its
	result. 
    FUNCTION_VALUE: (output) on exit, an Ndim+1 element vector
	containing the function values at the simplex points.  The first
	element contains the function minimum. 
    NCALLS: (output) the of times the function was evaluated. 
    NMAX: the maximum number of function evaluations allowed
	before terminating.  Default = 5000.
    P0: Initial starting point, an Ndim element vector.  The starting
	point must be specified using either the keyword SIMPLEX, or P0 and
	SCALE.  P0 may be either single or double precision floating.
	For example, in a 3-dimensional problem, if the initial guess
	is the point [0,0,0], and it is known that the function's
	minimum value occurs in the interval: -10 <
	X(0) < 10, -100 < X(1) < 100, -200 < X(2) < 200, specify: P0=[0,0,0],
	SCALE=[10, 100, 200]. 
    SCALE: a scalar or Ndim element vector contaiing the problem's
	characteristic length scale for each dimension.
	SCALE is used with P0 to form an initial (Ndim+1) point simplex.
	If all dimensions have the same	scale, specify a scalar.
    SIMPLEX: (output and/or optional input) On input, if P0 and SCALE
	are not set, SIMPLEX contains the Ndim+1 vertices, each of
	Ndim elements, of starting simplex, in either single or double
	precision floating point, in an (Ndim, Ndim+1) array. On output,
	SIMPLEX contains the simplex, of dimensions (Ndim, Ndim+1), enclosing
	the function minimum.  The first point, Simplex(*,0), corresponds to
	the function's minimum.

 OUTPUTS:
   Result: If the minimum is found, an Ndim vector, corresponding to
	the Function's minimum value is returned.  If a function minimum
	within the given tolerance, is NOT found in the given number of
	evaluations, a scalar value of -1 is returned.

 COMMON BLOCKS:
	None.

 SIDE EFFECTS:
	None.

 PROCEDURE:
	This procedure implements the Simplex method, described in
	Numerical Recipes, Section 10.4.  See also the POWELL procedure.

	Advantages:  requires only function evaluations, not
	derivatives, may be more reliable than the POWELL method.
	Disadvantages: not as efficient as Powell's method, and usually
	requires more function evaluations.

	Results are performed in the mode (single or double precision)
	returned by the user-supplied function.  The mode of the inputs P0,
	SCALE, or SIMPLEX, should match that returned by the function. The
	mode of the input vector supplied to the user-written function, is
	determined by P0, SCALE, or SIMPLEX.

 EXAMPLE:
	Use Amoeba to find the slope and intercept of a straight line fitting
	a given set of points minimizing the maximum error:

	The function to be minimized returns the maximum error,
	given p(0) = intercept, and p(1) = slope:
 FUNCTION FUNC, p
 COMMON FUNC_XY, x, y
 RETURN, MAX(ABS(y - (p(0) + p(1) * x)))
 END

	Put the data points into a common block so they are accessible to the
	function: 
 COMMON FUNC_XY, x, y
	Define the data points:
   x = findgen(17)*5
   y = [ 12.0,  24.3,  39.6,  51.0,  66.5,  78.4,  92.7, 107.8, 120.0, $
        135.5, 147.5, 161.0, 175.4, 187.4, 202.5, 215.4, 229.9]

	Call the function.  Fractional tolerance = 1 part in 10^5, 
	Initial guess = [0,0], and the minimum should be found within
	a distance of 100 of that point: 
   r = AMOEBA(1.0e-5, SCALE=1.0e2, P0 = [0, 0], FUNCTION_VALUE=fval)

	Check for convergence:
   if n_elements(r) eq 1 then message,'AMOEBA failed to converge'
	Print results.
   print, 'Intercept, Slope:', r, 'Function value (max error): ', fval(0)
Intercept, Slope:      11.4100      2.72800
Function value:       1.33000

 MODIFICATION HISTORY:
	DMS, May, 1996.	Written.


















APPEND_ARRAY
------------


 PURPOSE:
	Concatenates two arrays; even if one is undefined or "unset".
	This routine is intended to be used as a replacement for the 
	syntax: result = [array1, array2], except that neither array 
	requires checking.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = append_array(array1, array2)


 ARGUMENTS:
  INPUT:
	array1:	First array.  If undefined, the second array is returned.

	array2:	Second array.  If undefined, the first array is returned.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	Concatentated array.


 STATUS:
	Complete



 MODIFICATION HISTORY:
 	Written by:	Spitale
	

















ARRTRIM
-------


 PURPOSE:
	Trims all elements matching the given item from an array.  Options 
	are to trim all matching elements, just leading elements, just
	trailing elements, or both leading and trailing elements.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = arrtrim(arr, code, match)


 ARGUMENTS:
  INPUT:
	arr:		Array to be trimmed.

	code:		Option code, 0 = trailing, 1=leading, 2=both, 3=all.
			(See above).

	match:		Object to be trimmed out of the array.  If not defined,
			the null string '' will be matched.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	The updated array.  If there is only one item in the array,
	it wil be returned unchanged.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/1995
	

















B1950_TO_J2000
--------------


 PURPOSE:
	Transforms vectors from B1950 to J2000 coordinates, or vis-versa.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = b1950_to_j2000(v)


 ARGUMENTS:
  INPUT:

	      v:	An array of (n,3) column vectors in B1950
			(or J2000 if /reverse is used)


  OUTPUT: NONE


 KEYWORDS:
  INPUT: 

	reverse:	If set, then J2000 to B1950 is done.

  OUTPUT: NONE


 PROCEDURE:
	Multiplies the input vector by a transformation matrix.  The
  transformation matrix from B1950 to J2000 was defined using the
  December 20, 1984 memo from Mert Davies (Rand) to Larry Soderblom (USGS)


 RETURN:
	An array of vectors in the other coordinate system.


 RESTRICTIONS:
	Output array is double precision.


 STATUS:
	Complete.


 MODIFICATION HISTORY:
 	Written by:	Haemmerle, 1/1999
	











CAT_POINTS
----------


 PURPOSE:
       To concatenate arrays of image points.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = cat_points(ps)


 ARGUMENTS:
  INPUT:
       ps:     An array of image point arrays.

  OUTPUT:
       NONE

 RETURN:
       Concatenated array of image points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

































CAT_VECTORS
-----------


 PURPOSE:
       To concatenate arrays of column vectors


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = cat_vectors(ps)


 ARGUMENTS:
  INPUT:
       ps:     An array of vector arrays.

  OUTPUT:
       NONE

 RETURN:
       Concatenated array of column vectors.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

































CC_THRESHOLD
------------


 PURPOSE:
       To threshold points by correlation coefficient.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = cc_threshold(cc, min=min, max=max)


 ARGUMENTS:
  INPUT:
        cc:    An array of image point arrays.

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
       min:    Minimum cc for threshold

       max:    Maximum cc for threshold

  relative:    If set, uses the maximum of the smoothed cc array,
               and min and max are relative to this maximum.

  OUTPUT:
       NONE

 RETURN:
       Subscripts into the cc array that are between the input minimum
       and maximum.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale



















CENTRIC_TO_GRAPHIC
------------------


 PURPOSE:
	Converts planetocentric surface coordinates to planetographic.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = centric_to_graphic(radii, latlon)


 ARGUMENTS:
  INPUT:
	radii:	Array (3,nt) of Ellipsoid radii.

	latlon:	Array (2,nv,nt) giving the planetocentric latitudes and
		longitudes.

  OUTPUT: NONE


 KEYWORDS: NONE


 RETURN:
	Planetocentric coordinates.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/2014
	


























CENTRIC_TO_GRAPHIC_LAT
----------------------


 PURPOSE:
	Converts planetocentric latitudes to planetographic latitudes.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = centric_to_graphic_lat(a, b, lat)


 ARGUMENTS:
  INPUT:
	a:	Polar radius.

	b:	Equatorial radius.

	lat:	Planetographic latitudes.

  OUTPUT: NONE


 KEYWORDS: NONE


 RETURN:
	Planetocentric latitudes.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2002
	

























CLIP
----


 PURPOSE:
	Return array with first value clipped off.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = clip(array)


 ARGUMENTS:
  INPUT:
	array:	array to be operated on


 RETURN:
	If arr is a vector, returns it with the first element clipped off.


 MODIFICATION HISTORY:
 	Written by:	Tiscareno
	






































COMPLEMENT
----------


 PURPOSE:
       Determines the complement of an array of subscripts.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = complement(array, sub)


 ARGUMENTS:
  INPUT:
       array:  An array, to find the range of subscripts.

         sub:  An array of subscripts.

  OUTPUT:
       NONE

 RETURN:
       An array of subscripts giving the complement of the input subscripts.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale































COMPRESS_LIST
-------------


 PURPOSE:
       To compress a list to n elements, removing elements with a value
       of -1.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = compress_list(list, n)


 ARGUMENTS:
  INPUT:
       list:   List to compress.

          n:   Size of the compressed list.

  OUTPUT:
       NONE

 RETURN:
       The resulting list contains n elements, the first of which are those
       elements of list which are not -1.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale






























CORRELATE_POINTS
----------------


 PURPOSE:
	Searches for offset dxy that translates a set of model points so as 
	to obtain the maximum correlation with a set of base points.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = correlate_points(base_pts, model_pts)


 ARGUMENTS:
  INPUT:
	base_pts:	Array (2,nbase) of points to remain stationary. 

	model_pts:	Array (2,nmodel) of points to be offset.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	bin:		Initial point density bin size.  Default is 100.  See
			procedure below.

	nsamples:	Number of samples in each direction in the grid search. 
			See image_correlate.

	show:		If set, the grid search is displayed.  See
			image_correlate.

	xsize,ysize:	Dimensions of image from which points were extracted.

	max_density:	Maximum model point density.  Default = 5.

  OUTPUT:
	NONE


 RETURN:
	2-element array giving the offset [dx,dy] that shifts the model points
	so as to obtain the maxmimum correlation between the two sets of points.


 PROCEDURE:
	The points are fit by using image_correlate to align point-density maps
	of the two arrays of points using a successively smaller bin size,
	starting with that given by the 'bin' keyword.  The search grid is
	narrowed as the bin size is reduced.  The procedure is repeated until
	the bin size falls below one pixel.


 STATUS:
	Complete, but simulated annealing might be a better approach in some
	cases.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 4/2002
	

































































COVARIANCE
----------


 PURPOSE:
	Computes a covariance matrix for the problem specified by the input
	matrix.


 CATEGORY:
	UTIL/ICV


 CALLING SEQUENCE:
	result = covariance(M)


 ARGUMENTS:
  INPUT:
	M:	Array (3,3,n) of coefficient matrices as computed by 
		icv_coeff or ipt_coeff, as input to mbfit.  Coefficients from
		the two sources may be mixed.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	status:	0 is successful, -1 otherwise.


 RETURN:
	Covariance matrix.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2002
	


























CROSS_COMPARE
-------------


 PURPOSE:
       To cross compare two lists generating two sets of indicies which
       cross compare their elements.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       cross_compare, list1, list2, indices1=indices1, indices2=indices2


 ARGUMENTS:
  INPUT:
       list1:  First list.

       list2:  Second list.

  OUTPUT:
	NONE

 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
    indices1:  Each element of indices1 gives the index of the list2
               element which matches that element of list1, or -1.

    indices2:  visa verse as above but with list1


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale























CROSS_CORRELATE_2D
------------------


 PURPOSE:
       Calculates the correlation coefficient between an image and
       a model.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = c_correlate_2d(image, model)


 ARGUMENTS:
  INPUT:
       image:  Two dimensional image.

       model:  The model to correlelate with the image (sm[1] x sm[2])

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
       NONE

  OUTPUT:
       sigma:  The sigma of the image in a box of size sm[1] x sm[2]
               around each point

        mean:  The mean of the image in a box of size sm[1] x sm[2]
               around each point


 RETURN:
       The array of correlation coefficients.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


















CURSOR_MOVE
-----------


 PURPOSE:
       Moves an array of points by using the cursor and then to output
       the change from the original position when finished.  In moving
       the cursor, the mouse buttons control the motion:  LEFT to translate,
       MIDDLE to rotate, RIGHT to accept.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       cursor_move, cx, cy, xpoints, ypoints, sub_xpoints, sub_ypoints, $
                        dx=dx, dy=dy, dtheta=dtheta


 ARGUMENTS:
  INPUT:
            cx:        x position of center of rotation.

            cy:        y position of center of rotation.

       xpoints:        x positions of array of points to display

       ypoints:         y positions of  rray of points to display

   sub_xpoints:        Sub-sampled x points to display.

   sub_ypoints:        Sub-sampled y points to display.

  KEYWORDS:

      symbol:          symbol to use for marking points, default is period

      star_sub:	If given, these subscripts (into the sub-sampled arrays)
			determine points that should be plotted using
			star_symbol.

  OUTPUT:
            dx:        Change in x in pixels.

            dy:        Change in y in pixels.

        dtheta:        Change in rotation angle in radians.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale











CW__ANIMATE
-----------

 PURPOSE:
	This widget displays an animated sequence of images using
	X-windows Pixmaps. This is a compound widget, based on the
	XINTERANIMATE procedure, with the following advantages:
		- It can be included in other applications.
		- Multiple copies can be run simultaneously.

	The speed and direction of the display can be adjusted using
	the widget interface.

 CATEGORY:
	Image display, compound widgets.

 CALLING SEQUENCE:
	To initially create:
		widget = CW__ANIMATE(PARENT, SIZEX, SIZEY, NFRAMES)

	To reinitialize when another animation is loaded:
		CW__ANIMATE_INIT, ANIMATEBASE, SIZEX, SIZEY, NFRAMES

	To load a single image:
		CW__ANIMATE_LOAD, WIDGET, IMAGE = IMAGE, FRAME = FRAME_INDEX

	To load a single image that is already displayed in an existing window:

		CW__ANIMATE_LOAD, WIDGET, FRAME = FRAME_INDEX, $
			WINDOW = [WINDOW_NUMBER [, X0, Y0, SX, SY]]

	(This technique is much faster than reading back from the window.)

	To display the animation after all the images have been loaded:

		CW__ANIMATE, WIDGET [, RATE]

	To get a copy of the vector of Pixmaps being used by the widget.
	If this routine is called, the widget does not destroy the pixmaps
	when it is destroyed. The user can then provide them to a later
	call to CW__ANIMATE to re-use them while skipping the Pixmap creation
	and rendering step:

		CW__ANIMATE_GETP, widget, PIXMAPS

 INPUTS:
   CW__ANIMATE:
		PARENT:	 The ID of the parent widget.
		SIZEX:	 The width of the displayed image.
		SIZEY:	 The height of the displayed image.
		NFRAMES: The number of frames in the animation sequence.

   CW__ANIMATE_INIT:
		ANIMATEBASE: The ID of the base animation widget.
		SIZEX:	 The width of the displayed image.
		SIZEY:	 The height of the displayed image.
		NFRAMES: The number of frames in the animation sequence.

  	CW__ANIMATE_LOAD:
		WIDGET:	 The ID of the widget (as created with CW__ANIMATE)
			 into which the image should be loaded.

   CW__ANIMATE_RUN:
		WIDGET:	 The ID of the widget (as created with CW__ANIMATE)
			 into which the image should be loaded.
		RATE:	 A value between 0 and 100 that represents the
			 speed of the animation as a percentage of the
			 maximum display rate. The fastest animation has
			 a value of 100 and the slowest  has a value of 0.
			 The default animation rate is 100.
       STOP:    If this keyword is set, the animation is stopped.
       NFRAMES: Specifies the number of frames to animate, must
                        <= the number specified in CW__ANIMATE().

 KEYWORD PARAMETERS:
   	CW__ANIMATE:
		PIXMAPS: This keyword provides the new widget with a vector
			 of pre-existing pixmap (off screen window) IDs.
			 This vector is usually obtained from a call to
			 CW__ANIMATE_GETP applied to a previous animation
			 widget.
		UVALUE:  A user supplied value to be stored in the widget's
			 user value field.
               UNAME:   A user supplied string name to be stored in the
                        widget's user name field.
               NO_KILL: If NOT set, an "End Animation" button is added to the
			 animation base.  If set the button is not added.
		OPEN_FUNC: A user supplied string that specifies a callback
			 function name. When a value is specified for this
			 keyword, an "Open..." pushbutton is added to the
			 window.  When the "Open..." pushbutton is clicked
			 the OPEN_FUNC function is called to load new
			 animation data.
		INFO_FILE: A filename containing text to be displayed by
                        XDISPLAYFILE when user selects the help button.

   	CW__ANIMATE_INIT:
		PIXMAPS: This keyword provides the new widget with a vector
			 of pre-existing pixmap (off screen window) IDs.
			 This vector is usually obtained from a call to
			 CW__ANIMATE_GETP applied to a previous animation
			 widget.

   	CW__ANIMATE_LOAD:
		CYCLE:   If set, cycle. Normally, frames are displayed
			 going either forward or backwards. If CYCLE is
			 set, reverse direction after the last frame in
			 either direction is displayed.
		FRAME: 	 The frame number to be loaded. This is a value
			 between 0 and NFRAMES. If not supplied, frame 0
		  	 is loaded.
		IMAGE:   The image to be loaded.
		ORDER:   Set this keyword to display images from the top
			 down instead of the default bottom up. This keyword
			 is only used when loading images with the IMAGE
			 keyword.
		TRACK:   If set, the frame slider tracks the current frame.
			 Default is not to track.
		WINDOW:  When this keyword is specified, an image is copied
			 from an existing window to the animation pixmap.
			 When using X windows, this technique is much faster
			 than reading from the display and then loading with
			 the IMAGE keyword.

			 The value of this parameter is either an IDL window
			 number (in which case the entire window is copied),
			 or a vector containing the window index and the
			 rectangular bounds of the area to be copied. For
			 example:
			 WINDOW = [Window_Number, X0, Y0, Sx, Sy]

      		XOFFSET: The horizontal offset, in pixels from the left of
			 the frame, of the image in the destination window.

      		YOFFSET: The vertical offset, in pixels from the bottom of
			 the frame, of the image in the destination window.

 OUTPUTS:
	No explicit outputs.

 SIDE EFFECTS:
	If the widget is realized before calls to CW__ANIMATE_LOAD, the frames
	are displayed as they are loaded. This provides the user with an
	indication of how things are progressing.

	When the widget is destroyed, it destroys the pixmaps used in the
	animation, unless they were previously obtained via CW__ANIMATE_GETP
       and the KILL_ANYWAY keyword was not set.

	The only event returned by this widget indicates that the user
	has pressed the DONE button. The parent application should use
	this as a signal to kill the animation widget via WIDGET_CONTROL.

 RESTRICTIONS:
	If more than one animation widget is running at a time, they
	will fight for resources and run slower.

 PROCEDURE:
	When initialized, this procedure creates pixmaps containing the
	frames of the animation sequence. Once the images are loaded,
	they are displayed by copying the images from the pixmap or buffer
	to the visible draw widget.

 EXAMPLE:
	Assume the following event handler procedure exists:
		PRO EHANDLER, EV
		  WIDGET_CONTROL, /DESTROY, EV.TOP
		end

	Enter the following commands to open the file ABNORM.DAT (a series
	of images of a human heart) and load the images it contains into
	an array H:

		OPENR, 1, FILEPATH('abnorm.dat', SUBDIR = 'images')
		H = BYTARR(64, 64, 16)
		READU, 1, H
		CLOSE, 1
		H = REBIN(H, 128, 128, 16)

	Create an instance of the animation widget at load the frames:

		base = widget_base()
		animate = CW__ANIMATE(base, 128, 128, 16)
		WIDGET_CONTROL, /REALIZE, base
		for i=0,15 do CW__ANIMATE_LOAD, animate, FRAME=i, IMAGE=H[*,*,I]

	Start the animation:

		CW__ANIMATE_RUN, animate
		XMANAGER, "CW__ANIMATE Demo", base, EVENT_HANDLER = "EHANDLER"

	Pressing the DONE button kills the application.

 MODIFICATION HISTORY:
	AB, June 1992		Heavily based on the XINTERANIMATE procedure.
	SR, September 1992	Fixed a problem when a paused animation's
				frame selection was moved and the resulting
				frame change ended up in another animation.
	SR, November  1992	Fixed a problem when a single paused animation
				would fail when the frame selection slider
				event tried to set do a bad drawing window.
	DMS/AB, March, 1993	Got rid of state caching. Got rid of
				XMANAGER background tasks in favor of new
				"WIDGET_CONTROL,timer=" feature.
	ACY, October 1993	Set RETAIN=2 for draw widget to prevent
				clipping by an overlapping window when
				loading frames.
   DMS, Dec, 1993   Added STOP and NFRAMES keywords to CW__ANIMATE_RUN.
                    Added KILL_ANYWAY keyword to CW__ANIMATE_GETP.
   WSO, Jan, 1995   Added OPEN_FUNC keyword and updated UI.
   ACY, Jan, 1997   Added INFO_FILE keyword to allow user-supplied
                    files for help text
   JLP, Jan, 2000   Allow TrueColor images as input to CW__ANIMATE_LOAD.

   Spitale 5/2012   Get rid of MPEG crap, replace with PNG.

















































CW__BGROUP
----------

 PURPOSE:
   CW__BGROUP is a compound widget that simplifies creating
   a base of buttons. It handles the details of creating the
   proper base (standard, exclusive, or non-exclusive) and filling
   in the desired buttons. Events for the individual buttons are
   handled transparently, and a CW__BGROUP event returned. This
   event can return any one of the following:
       - The Index of the button within the base.
       - The widget ID of the button.
       - The name of the button.
       - An arbitrary value taken from an array of User values.

 CATEGORY:
   Compound widgets.

 CALLING SEQUENCE:
       Widget = CW__BGROUP(Parent, Names)

   To get or set the value of a CW__BGROUP, use the GET_VALUE and
   SET_VALUE keywords to WIDGET_CONTROL. The value of a CW__BGROUP
   is:

       -----------------------------------------------
       Type        Value
       -----------------------------------------------
       normal      None
       exclusive       Index of currently set button
       non-exclusive   Vector indicating the position
               of each button (1-set, 0-unset)
       -----------------------------------------------


 INPUTS:
       Parent:     The ID of the parent widget.
   Names:      A string array, containing one string per button,
           giving the name of each button.

 KEYWORD PARAMETERS:

   BUTTON_UVALUE:  An array of user values to be associated with
           each button and returned in the event structure.
   COLUMN:     Buttons will be arranged in the number of columns
           specified by this keyword.
   EVENT_FUNCT:    The name of an optional user-supplied event function
           for buttons. This function is called with the return
           value structure whenever a button is pressed, and
           follows the conventions for user-written event
           functions.
   EXCLUSIVE:  Buttons will be placed in an exclusive base, with
           only one button allowed to be selected at a time.
   FONT:       The name of the font to be used for the button
           titles. If this keyword is not specified, the default
           font is used.
   FRAME:      Specifies the width of the frame to be drawn around
           the base.
   IDS:        A named variable into which the button IDs will be
           stored, as a longword vector.
   LABEL_LEFT: Creates a text label to the left of the buttons.
   LABEL_TOP:  Creates a text label above the buttons.
   MAP:        If set, the base will be mapped when the widget
           is realized (the default).
   NONEXCLUSIVE:   Buttons will be placed in an non-exclusive base.
           The buttons will be independent.
   NO_RELEASE: If set, button release events will not be returned.
   RETURN_ID:  If set, the VALUE field of returned events will be
           the widget ID of the button.
   RETURN_INDEX:   If set, the VALUE field of returned events will be
           the zero-based index of the button within the base.
           THIS IS THE DEFAULT.
   RETURN_NAME:    If set, the VALUE field of returned events will be
           the name of the button within the base.
   ROW:        Buttons will be arranged in the number of rows
           specified by this keyword.
   SCROLL:     If set, the base will include scroll bars to allow
           viewing a large base through a smaller viewport.
   SET_VALUE:  The initial value of the buttons. This is equivalent
           to the later statement:

           WIDGET_CONTROL, widget, set_value=value

   SPACE:      The space, in pixels, to be left around the edges
           of a row or column major base. This keyword is
           ignored if EXCLUSIVE or NONEXCLUSIVE are specified.
   UVALUE:     The user value to be associated with the widget.
   UNAME:      The user name to be associated with the widget.
   XOFFSET:    The X offset of the widget relative to its parent.
   XPAD:       The horizontal space, in pixels, between children
           of a row or column major base. Ignored if EXCLUSIVE
           or NONEXCLUSIVE are specified.
   XSIZE:      The width of the base.
   X_SCROLL_SIZE:  The width of the viewport if SCROLL is specified.
   YOFFSET:    The Y offset of the widget relative to its parent.
   YPAD:       The vertical space, in pixels, between children of
           a row or column major base. Ignored if EXCLUSIVE
           or NONEXCLUSIVE are specified.
   YSIZE:      The height of the base.
   Y_SCROLL_SIZE:  The height of the viewport if SCROLL is specified.

 OUTPUTS:
       The ID of the created widget is returned.

 SIDE EFFECTS:
   This widget generates event structures with the following definition:

       event = { ID:0L, TOP:0L, HANDLER:0L, SELECT:0, VALUE:0 }

   The SELECT field is passed through from the button event. VALUE is
   either the INDEX, ID, NAME, or BUTTON_UVALUE of the button,
   depending on how the widget was created.

 RESTRICTIONS:
   Only buttons with textual names are handled by this widget.
   Bitmaps are not understood.

 MODIFICATION HISTORY:
   15 June 1992, AB
   7 April 1993, AB, Removed state caching.
   6 Oct. 1994, KDB, Font keyword is not applied to the label.
       10 FEB 1995, DJC  fixed bad bug in event procedure, getting
                         id of stash widget.
   11 April 1995, AB Removed Motif special cases.
   Feb, 2012.	Spitale, copied from cw_bgroup.







CW__FORM
--------

 PURPOSE:
	CW__FORM is a compound widget that simplifies creating
	small forms which contain text, numeric fields, buttons, 
	lists and droplists.  Event handling is also simplified.

 CATEGORY:
	Compound widgets.

 CALLING SEQUENCE:
	widget = CW__FORM([Parent,] Desc)

 INPUTS:
       Parent:	The ID of the parent widget.  Omitted for a top level 
		modal widget.

 Desc: A string array describing the form.  Each element of the
	string array contains two or more comma-delimited fields.  The
	character '\' may be used to escape commas that appear within fields.
	To include the backslash character, escape it with a second
	backslash.  Field names are case insensitive.

	The fields are defined as follows:

 Field 1: Depth: the digit 0, 1, 2, or 3.  0 continues the current
	level, 1 begins a new level, 2 denotes the last element of the
	current level, and 3 both begins a new level and is the last entry of
	the current level.  Nesting is used primarily with row or column 
	bases for layout.  See the example below.
 Field 2: Item type: BASE, BUTTON, DROPLIST, FLOAT, INTEGER, LABEL, LIST,
		or TEXT.
	The items return the following value types:
	BUTTON - For single buttons, 0 if clear, 1 if set.
		For multiple buttons, also called button groups, that are
		exclusive, the index of the currently set button is returned.
		For non-exclusive button groups, the value is an array
		with an element for each button, containing 1
		if the button is set, 0 otherwise.
	DROPLIST, LIST - a 0 based index indicating which item is selected.
	FLOAT, INTEGER, TEXT - return their respective data type.

 Field 3: Initial value.  Omitted for bases.
	For BUTTON and DROPLIST items, the value field contains one
		or more item names, delimited by the | character.
	For FLOAT, INTEGER, LABEL, and TEXT items the value field contains the
		initial value of the field.

 Fields 4 and following: Keywords or Keyword=value pairs that specify
	optional attributes or options.  Keywords are case insensitive
	and an optional leading '/' character is discarded.
	Possibilities include:

	COLUMN	If present, specifies column layout for bases or multiple
		buttons.
	EXCLUSIVE  If present makes an exclusive set of buttons.  The
		default is nonexclusive.
	EVENT=<name> specifies the name of a user-written event function that
		is called whenever the element is changed.  The function
		is called with one parameter, the event structure.  It may
		return an event structure or zero to indicate that no
		further event processing is desired.
	FONT=<font name>  If present, the font for the item is specified.
	FRAME:	If present, a frame is drawn around the item.  May be used
		with all items.
	LABEL_LEFT=<label>  annotate a button or button group with a label
		placed to the left of the buttons.  Valid with BUTTON,
		DROPLIST, FLOAT, INTEGER, LIST and TEXT items.
	LABEL_TOP=<label> annotate a button or button group with a label
		placed at the top of the buttons.  Valid with BUTTON,
		DROPLIST, FLOAT, INTEGER, LIST and TEXT items.
	LEFT, CENTER, or RIGHT   Specifies alignment of label items.
	QUIT	If present, when the user activiates this entry when it
		is activated as a modal widget, the form is destroyed
		and its value returned as the result of CW__FORM.  For non-
		modal form widgets, events generated by changing this item
		have their QUIT field set to 1.
	ROW	If present, specifies row layout for bases or multiple
		buttons.
	SCROLL:	If present, the base will have a scrollbar.
	SET_VALUE  Sets the initial value of button groups or droplists.
	TAG=<name>   the tag name  of this element.  The widget's value
		is a structure corresponding to the form.  Each form item
		has a corresponding tag-value pair in the widget's value.
		Default = TAGnnn, where nnn is the index of the item
		in the Desc array.
	WIDTH=n Specifies the width, in characters, of a TEXT, INTEGER,
		or FLOAT item.
	ALL_EVENTS Determines whether all events or just end-of-line events 
	           are generated for TEXT, INTEGER, or FLOAT items.
	
 KEYWORD PARAMETERS:
	COLUMN:		  If set the main orientation is vertical, otherwise
			  horizontal.
	IDS:		  A named variable into which the widget id of
				each widget corresponding to an element
				in desc is stored.
	tags:		  A named variable into which the structure tag of
				each widget corresponding to an element
				in desc is stored.  
	TITLE:		  The title of the top level base.  Not used
			  if a parent widget is supplied.
	UVALUE:		  The user value to be associated with the widget.
       UNAME:            The user name to be associated with the widget.

 OUTPUTS:
       If Parent is supplied, the result is the ID of the base containing
	the form.  If Parent is omitted, the form is realized as a modal
	top level widget. The function result is then a structure containing
	the value of each field in the form when the user finishes.

	This widget has a value that is a structure with a tag/value pair
	for each field in the form.  WIDGET_CONTROL, id, GET_VALUE=v may
	be used to read the current value of the form.  WIDGET_CONTROL, id,
	SET_VALUE={ Tagname: value, ..., Tagname: value} sets the values
	of one or more tags.

 SIDE EFFECTS:
	Widgets are created.

 RESTRICTIONS:
	
 EXAMPLES:

	**** Define a form, with a label, followed by two vertical button
	groups one non-exclusive and the other exclusive, followed by a text
	field, and an integer field, followed lastly by OK and Done buttons.
	If either the OK or Done buttons are pressed, the form is exited.
	

		; String array describing the form
	desc = [ $
	    '0, LABEL, Centered Label, CENTER', $
		; Define a row base on a new depth.  All elements until a depth
		; of two are included in the row.
 	    '1, BASE,, ROW, FRAME', $
 	    '0, BUTTON, B1|B2|B3, LABEL_TOP=Nonexclusive:, COLUMN, ' + $
               'TAG=bg1, ' + $
               'SET_VALUE=[1\, 0\, 1]', $   ; set first and third buttons
		; This element terminates the row.
 	    '2, BUTTON, E1|E2|E2, EXCLUSIVE,LABEL_TOP=Exclusive,COLUMN, ' + $
               'TAG=bg2, ' + $
               'SET_VALUE=1', $   ; set second button
 	    '0, TEXT, , LABEL_LEFT=Enter File name:, WIDTH=12, TAG=fname', $
	    '0, INTEGER, 0, LABEL_LEFT=File size:, WIDTH=6, TAG=fsize', $
	    '1, BASE,, ROW', $
	    '0, BUTTON, OK, QUIT,FONT=*helvetica-medium-r-*-180-*,TAG=OK', $
	    '2, BUTTON, Cancel, QUIT']

    To use the form in a modal manner:
	  a = CW__FORM(desc, /COLUMN)
	  help, /st,a
    When the form is exited, (when the user presses the OK or Cancel buttons), 
	the following structure is returned as the function's value:
		BG1             INT       Array(3)  (Set buttons = 1, else 0)
		BG2             INT              1  (Exclusive: a single index)
		FNAME           STRING    'test.dat' (text field)
		FSIZE           LONG               120 (integer field)
		OK              LONG                 1 (this button was pressed)
		TAG8            LONG                 0 (this button wasn't)
	Note that if the Cancel button is pressed, the widget is exited with
	the OK field set to 0.

  *****************

    To use CW__FORM inside another widget:
	    a = widget_base(title='Testing')
	    b = cw__form(a, desc, /COLUMN)
	    WIDGET_CONTROL, a, /real
	    xmanager, 'Test', a
	In this example, an event is generated each time the value of
	the form is changed.  The event has the following structure:
	   ID              LONG                <id of CW__FORM widget>
	   TOP             LONG                <id of top-level widget>
	   HANDLER         LONG                <internal use>
	   TAG             STRING    'xxx'	; name of field that changed
	   VALUE           INT       xxx	; new value of changed field
	   QUIT            INT              0	; quit flag
    The event handling procedure (in this example, called TEST_EVENT), may use
	the TAG field of the event structure to determine which field
	changed and perform any data validation or special actions required.
	It can also get and set the value of the widget by calling
	WIDGET_CONTROL.
    A simple event procedure might be written to monitor the QUIT field
	of events from the forms widget, and if set, read and save the
	widget's value, and finally destroy the widget.

    To set or change a field within the form from a program, use a the
	WIDGET_CONTROL procedure:
	   	WIDGET_CONTROL, b, SET_VALUE={FNAME: 'junk.dat'}
	This statement sets the file name field of this example.

 MODIFICATION HISTORY:
	January, 1995.  DMS, Written.
       June, 1996.     MLR, allowed SET_VALUE to be specified in the
                       description string for DROPLIST widgets.
	July, 2002.	Spitale, copied from cw_form.
	July, 2002.	Spitale, added 'tags' keyword.
	July, 2002.	Spitale, added 'all_events' keyword.
	July, 2002.	Spitale, noted lameness of 'goto' statement in
			cw__form_build
	Dec., 2002.	Spitale, added 'TAG' keyword functionality for bases 
			and labels.
	Dec., 2002.	Spitale, added 'SCROLL' keyword for bases.



























































CW__PDMENU
----------

 PURPOSE:
	CW__PDMENU is a compound widget that simplifies creating
	pulldown menus. It has a simpler interface than the XPDMENU
	procedure, which it is intended to replace. Events for the
	individual buttons are handled transparently, and a CW__PDMENU
	event returned. This event can return any one of the following:
               - The Index of the button within the base.
               - The widget ID of the button.
               - The name of the button.
		- The fully qualified name of the button. This allows
		  different sub-menus to contain buttons with the same
		  name in an unambiguous way.

	In this modified program, cw__pdmenu, the name given for the event
	handler for each button widget is used as the X resource anme as well.
	


 CATEGORY:
	Compound widgets.

 CALLING SEQUENCE:
	widget = CW__PDMENU(Parent, Desc)

 INPUTS:
       Parent:	The ID of the parent widget.
	Desc:	An array of strings or structures.  Each element contains
		a menu description with two fields, a flag field, and
		the name of the item.  If a structure, each element
		is defined as follows:
			{ CW__PDMENU_S, flags:0, name:'' }

		The name tag gives the name of button. The flags
		field is a two-bit bitmask that controls how the button is
		interpreted:

		    Value	   Meaning
		    -------------------------------------------
		     0     This button is neither the beginning
			   nor the end of a pulldown level.
		     1     This button is the root of a
                          sub-pulldown menu. The sub-buttons
			   start with the next button.
		     2     This button is the last button at the
			   current pulldown level. The next button
			   belongs to the same level as the current
			   parent button.
			   If none or empty string is specified as a
			   the name, the button is not created, but
			   the next button belongs to the upward level.
		     3     This button is the root of a sub-pulldown
			   menu, but it is also the last entry of
			   the current level.
		     4     Same as 0, above, except that this button will
			   be preceeded by a separator as with the SEPARATOR
			   keyword to WIDGET_BUTTON.
		     5     Same as 1, above, except that this button will
			   be preceeded by a separator.
		     6     Same as 2, above, except that this button will
			   be preceeded by a separator.
		     7     Same as 3, above, except that this button will
			   be preceeded by a separator.

	If Desc is a string, each element contains the flag field
	followed by a backslash character, followed by the menu item's
	contents.  See the example below.

	EVENT PROCEDURES:  An event procedure may be specified for an
	element and all its children, by including a third field
	in Desc, if Desc is a string array.  Events for buttons without
	an event procedure, are dispatched normally.
	See the example below.

 KEYWORD PARAMETERS:
	DELIMITER:        The character used to separate the parts of a
			  fully qualified name in returned events. The
			  default is to use the '.' character.
	FONT:		  The name of the font to be used for the button
			  titles. If this keyword is not specified, the
			  default font is used.
	HELP:		  If MBAR is specified and one of the buttons on the
			  menubar has the label "help" (case insensitive) then
			  that button is created with the /HELP keyword to
			  give it any special appearance it is supposed to
			  have on a menubar. For example, Motif expects
			  help buttons to be on the right.
	IDS:		  A named variable into which the button IDs will
			  be stored as a longword vector.
	MBAR:		  if constructing a menu-bar pulldown, set this
			  keyword.  In this case, the parent must be the 
			  widget id of the menu bar of a top-level base,
			  returned by WIDGET_BASE(..., MBAR=mbar).
	RETURN_ID:	  If present and non-zero, the VALUE field of returned
			  events will be the widget ID of the button.
	RETURN_INDEX:	  If present and non-zero, the VALUE field of returned
			  events will be the zero-based index of the button
			  within the base. THIS IS THE DEFAULT.
	RETURN_NAME:	  If present and non-zero, the VALUE field of returned
			  events will be the name of the selected button.
	RETURN_FULL_NAME: If present and non-zero, the VALUE field of returned
               	  events will be the fully qualified name of the
			  selected button. This means that the names of all
			  the buttons from the topmost button of the pulldown
			  menu to the selected one are concatenated with the
			  delimiter specified by the DELIMITER keyword. For
			  example, if the top button was named COLORS, the
			  second level button was named BLUE, and the selected
			  button was named LIGHT, the returned value would be

			  COLORS.BLUE.LIGHT

			  This allows different submenus to have buttons with
			  the same name (e.g. COLORS.RED.LIGHT).
	UVALUE:		  The user value to be associated with the widget.
       UNAME:            The user name to be associated with the widget.
	XOFFSET:	  The X offset of the widget relative to its parent.
	YOFFSET:	  The Y offset of the widget relative to its parent.

 OUTPUTS:
       The ID of the top level button is returned.

 SIDE EFFECTS:
	This widget generates event structures with the following definition:

		event = { ID:0L, TOP:0L, HANDLER:0L, VALUE:0 }

	VALUE is either the INDEX, ID, NAME, or FULL_NAME of the button,
	depending on how the widget was created.

 RESTRICTIONS:
	Only buttons with textual names are handled by this widget.
	Bitmaps are not understood.

 EXAMPLE:
	The following is the description of a menu bar with two buttons,
	"Colors" and "Quit". Colors is a pulldown containing the colors
	"Red", "Green", Blue", "Cyan", and "Magenta". Blue is a sub-pulldown
	containing "Light", "Medium", "Dark", "Navy", and "Royal":

		; Make sure CW__PDMENU_S is defined
		junk = { CW__PDMENU_S, flags:0, name:'' }

		; The description
		desc = [ { CW__PDMENU_S, 1, 'Colors' }, $
			     { CW__PDMENU_S, 0, 'Red' }, $
			     { CW__PDMENU_S, 0, 'Green' }, $
			     { CW__PDMENU_S, 5, 'Blue\BLUE_EVENT_PROC' }, $
			         { CW__PDMENU_S, 0, 'Light' }, $
			         { CW__PDMENU_S, 0, 'Medium' }, $
			         { CW__PDMENU_S, 0, 'Dark' }, $
			         { CW__PDMENU_S, 0, 'Navy' }, $
			         { CW__PDMENU_S, 2, 'Royal' }, $
			       { CW__PDMENU_S, 4, 'Cyan' }, $
			       { CW__PDMENU_S, 2, 'Magenta\MAGENTA_EVENT_PROC' }, $
			 { CW__PDMENU_S, 2, 'Quit' } ]

	The same menu may be defined as a string by equating the Desc parameter
	to the following string array:
	
	desc =[ '1\Colors' , $
		'0\Red' , $
		'0\Green' , $
		'5\Blue\BLUE_EVENT_PROC' , $
		'0\Light' , $
		'0\Medium' , $
		'0\Dark' , $
		'0\Navy' , $
		'2\Royal' , $
		'4\Cyan' , $
		'2\Magenta\MAGENTA_EVENT_PROC' , $
		'2\Quit'  ]


	The following small program can be used with the above description
	to create the specified menu:


		base = widget_base()
		menu = cw__pdmenu(base, desc, /RETURN_FULL_NAME)
		WIDGET_CONTROL, /REALIZE, base
		repeat begin
		  ev = WIDGET_EVENT(base)
		  print, ev.value
		end until ev.value eq 'Quit'
		WIDGET_CONTROL, /DESTROY, base
		end

	Note that independent event procedures were specified for
	the multiple Blue buttons (blue_event_proc), and the Magenta button 
	(magenta_event_proc).

 MODIFICATION HISTORY:
	18 June 1992, AB
	16 Jan 1995, DMS, Added MBAR keyword, event procedures,
			and menu descriptor strings.
	2 July 1995, AB, Added HELP keyword.
	3 September 1996, LP, Added button-less end of current level
	May 2004, JNS, Renamed cw__pdmenu and added X resource names.































































C_CORRELATE_2D
--------------


 PURPOSE:
       Calculates the correlation coefficient between an image and
       a model.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = c_correlate_2d(image, model)


 ARGUMENTS:
  INPUT:
       image:  Two dimensional image.

       model:  The model to correlelate with the image (sm[1] x sm[2])

  OUTPUT:
	NONE

 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
       sigma:  The sigma of the image in a box of size sm[1] x sm[2]
               around each point

        mean:  The mean of the image in a box of size sm[1] x sm[2]
               around each point


 RETURN:
       The array of correlation coefficients.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


















DECRAPIFY
---------

 PURPOSE:
       Circumvents a quirk of idl, returns first value of input if number
       of elements in array is 1.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = decrapify(val)


 ARGUMENTS:
  INPUT:
       val:  An array.

  OUTPUT:
       NONE

 RETURN:
       val unchanged, unless n_elements(val) equals 1, if so, returns
       val[0]

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

































DEGEN
-----

 PURPOSE:
       Removes degenerate trailing dimensions.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = degen(array)


 ARGUMENTS:
  INPUT:
       array:  An array.

  OUTPUT:
       NONE


 RETURN:
       Array, with any trailing dimensions of length 1 removed.


 SIDE EFFECTS:
	The input array is modified.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 6/2002





























DELETE_FILE
-----------


 PURPOSE:
	Deletes the specified file.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	delete_file, fname 


 ARGUMENTS:
  INPUT:
	fname:	Name of file to delete


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2002
	






































D_UNDEFINED
-----------


 PURPOSE:
       Output the largest usable double floating value.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = d_undefined()


 ARGUMENTS:
       NONE

 RETURN:
       The largest usable double floating value.

 PROCEDURE:
       Calls the idl function machar which determines machine-specific
       parameters effecting floating-point arithmatic.  Uses the
       field XMAX.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

































EXTERNAL_POINTS
---------------


 PURPOSE:
       Output subscripts of points outside the given bounds.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = external_points(points, x0, x1, y0, y1)


 ARGUMENTS:
  INPUT:
       points:         An array of image point.

           x0:         Lower x bound.

           x1:         Upper x bound.

           y0:         Lower y bound.

           y1:         Upper y bound.

  OUTPUT:
       NONE

 RETURN:
       Subscripts of points in array that fall outside the rectangle
       whose corners are (x0,y0) and (x1,y1).


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale
























FDELETE
-------


 PURPOSE:
	Delete files.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	fdelete, filespec


 ARGUMENTS:
  INPUT:
	filespec:	File specification of files to delete.

 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 10/19/2001
	







































FILL_ARRAY
----------


 PURPOSE:
       Like the idl function make_array, but more flexible.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = fill_array(n_elem, values=values, default=default)


 ARGUMENTS:
  INPUT:
       n_elem:     Number of elements in resultant array.

  OUTPUT:
       NONE

  KEYWORDS:
  INPUT:
           values:     Values to fill array.

          default:     Default value for array.

           string:     If set, array is a string array.

  OUTPUT:
       NONE

 RETURN:
       Array (n_elem) filled with values and/or default value.


 PROCEDURE:
       An array of n_elem is created.  If values is not given, array is
       filled with default value.  If values is given and the number of
       values is less than n_elem, then the rest of array is filled
       with the default value.  If the default value is not given, the
       default is taken as the last element in the values array.


 SEE ALSO:
	make_array

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale











FINDFILE0
---------


 PURPOSE:
       Same as findfile, but expands the '~' symbol..


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = findfile0(filespec)


 ARGUMENTS:
  INPUT:
       filespec:       A filename that may contain the ~ symbol.

  OUTPUT:
       NONE

 RETURN:
       Array of found filenames.

 PROCEDURE:
       Every occurrence of '~' is replaced by '$HOME' before calling findfile.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale  8/2012































FINDFILE1
---------


 PURPOSE:
       A more flexible version of the IDL routine findfile.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = findfile1(filespec)


 ARGUMENTS:
  INPUT:
       filespec:       A filename that may contain the ~ symbol.

  OUTPUT:
       NONE

 RETURN:
       Array of found filenames.

 PROCEDURE:
       Under unix, the IDL findfile routine does not expand the ~ symbol,
       but openr does.  In order to salvage some functionality, findfile1
       allows filespecs to pass even if they don't expand to anything using
       findfile.  In this way, a filespec containing ~ can be properly
       expanded usng openr, but only if it expands to one filename.  If it
       expands to multiple filenames, then openr will choke on it.

	UPDATE 8/22/2012: Under idl 7.0, the '~' symbol is expanded by 
	findfile.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale























FIXED_ARRAY
-----------


 PURPOSE:
	Creates and array of fixed length by either truncating the given array
	or padding it with zeroes or null characters.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = fixed_array(array, len)


 ARGUMENTS:
  INPUT:
	array:	Array to fix.

	len:	Length of output array.

  OUTPUT:
	NONE


 KEYWORDS: NONE


 RETURN:
	Array with len elements.  If input array contains more than len 
	elements, it is truncated, if it contains fewer, then int is padded
	with zeroes or null characters.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/2002
	























GAUSS2D_FIT
-----------

 PURPOSE:
 	Fit a 2 dimensional elliptical gaussian equation to rectilinearly
	gridded data.
		Z = F(x,y) where:
 		F(x,y) = A0 + A1*EXP(-U/2)
	   And the elliptical function is:
		U= (x'/a)^2 + (y'/b)^2
	The parameters of the ellipse U are:
	   Axis lengths are 2*a and 2*b, in the unrotated X and Y axes,
		respectively.
	   Center is at (h,k).
	   Rotation of T radians from the X axis, in the CLOCKWISE direction.
	   The rotated coordinate system is defined as:
		x' = (x-h) * cos(T) - (y-k) * sin(T)  <rotate by T about (h,k)>
		y' = (x-h) * sin(T) + (y-k) * cos(T)

	The rotation is optional, and may be forced to 0, making the major/
	minor axes of the ellipse parallel to the X and Y axes.

	The coefficients of the function, are returned in a seven
	element vector:
	a(0) = A0 = constant term.
	a(1) = A1 = scale factor.
	a(2) = a = width of gaussian in X direction.
	a(3) = b = width of gaussian in Y direction.
	a(4) = h = center X location.
	a(5) = k = center Y location.
	a(6) = T = Theta the rotation of the ellipse from the X axis
		in radians, counterclockwise.


 CATEGORY:
	curve / data fitting

 CALLING SEQUENCE:
	Result = GAUSS2DFIT(z, a [,x,y])

 INPUTS:
	Z = dependent variable in a 2D array dimensioned (Nx, Ny).  Gridding
		must be rectilinear.
	X = optional Nx element vector containing X values of Z.  X(i) = X value
		for Z(i,j).  If omitted, a regular grid in X is assumed,
		and the X location of Z(i,j) = i.
	Y = optional Ny element vector containing Y values of Z.  Y(j) = Y value
		for Z(i,j).  If omitted, a regular grid in Y is assumed,
		and the Y location of Z(i,j) = j.

 Optional Keyword Parameters:
	NEGATIVE = if set, implies that the gaussian to be fitted
		is a valley (such as an absorption line).
		By default, a peak is fit.
	TILT = if set to  1, allow the orientation of the major/minor axes of 
		the ellipse to be unrestricted.  The default is that
		the axes of the ellipse must be parallel to the X-Y axes.
		In this case, A(6) is always returned as 0.

 OUTPUTS:
	The fitted function is returned.
 OUTPUT PARAMETERS:
	A:	The coefficients of the fit.  A is a seven element vector as
		described under PURPOSE.
	chisq:	chisq value for the fit.

 COMMON BLOCKS:
	None.
 SIDE EFFECTS:
	None.
 RESTRICTIONS:
	Timing:  Approximately 4 seconds for a 128 x 128 array, on a 
		Sun SPARC LX.  Time required is roughly proportional to the 
		number of elements in Z.

 PROCEDURE:
	The peak/valley is found by first smoothing Z and then finding the
	maximum or minimum respectively.  Then GAUSSFIT is applied to the row
	and column running through the peak/valley to estimate the parameters
	of the Gaussian in X and Y.  Finally, CURVEFIT is used to fit the 2D
	Gaussian to the data.

	Be sure that the 2D array to be fit contains the entire Peak/Valley
	out to at least 5 to 8 half-widths, or the curve-fitter may not
	converge.

 EXAMPLE:  This example creates a 2D gaussian, adds random noise
	and then applies GAUSS2DFIT:
	nx = 128		;Size of array
	ny = 100
	;**  Offs Scale X width Y width X cen Y cen  **
	;**   A0  A1    a       b       h       k    **
	a = [ 5., 10., nx/6.,  ny/10., nx/2., .6*ny]  ;Input function parameters
	x = findgen(nx) # replicate(1.0, ny)	;Create X and Y arrays
	y = replicate(1.0, nx) # findgen(ny)
	u = ((x-a(4))/a(2))^2 + ((y-a(5))/a(3))^2  ;Create ellipse
	z = a(0) + a(1) * exp(-u/2)		;to gaussian
	z = z + randomn(seed, nx, ny)		;Add random noise, SD = 1
	yfit = gauss2dfit(z,b)			;Fit the function, no rotation
	print,'Should be:',string(a,format='(6f10.4)')  ;Report results..
	print,'Is:      :',string(b(0:5),format='(6f10.4)')

 MODIFICATION HISTORY:
	DMS, RSI, June, 1995.
	Spitale, 3/2004; added chisq output.



























GAUSS2_FUNCT
------------
 PURPOSE:
	Evaluate function for gauss2fit.
 CALLING SEQUENCE:
	FUNCT,X,A,F,PDER
 INPUTS:
	X = values of independent variables, encoded as: [nx, ny, x, y]
	A = parameters of equation described below.
 OUTPUTS:
	F = value of function at each X(i,j), Y(i,j).
	Function is:
		F(x,y) = A0 + A1*EXP(-U/2)
		where: U= (yp/A2)^2 + (xp/A3)^2

	  If A has 7 elements a rotation of the ellipse is present and:
		xp = (x-A4) * cos(A6) - (y-A5) * sin(A6)
		yp = (x-A4) * sin(A6) + (y-A5) * cos(A6)
	  If A has 6 elements, A6 (theta) is 0, the major and minor axes
	  of the ellipse are parallel to the XY axes, and:
		xp = (x-A4)   and   yp = (x-A5)

 Optional output parameters:
	PDER = (n_elements(z),6 or 7) array containing the
		partial derivatives.  pder(i,j) = derivative
		at ith point w/respect to jth parameter.
 PROCEDURE:
	Evaluate the function and then if requested, eval partials.

 MODIFICATION HISTORY:
	WRITTEN, DMS, RSI, June, 1995.



































GAUSS_2D
--------


 PURPOSE:
       Generates an array containing a 2-dimensional gaussian


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = gauss_2d(x0, y0, w, xsize, ysize)


 ARGUMENTS:
  INPUT:
          x0:  x position of center of gaussian

          y0:  y position of center of gaussian

           w:  half-width of gaussian; i.e., the distance at which the value
		is 1/e times that at the peak.

       xsize:  size of output array in x

       ysize:  size of output array in y

  OUTPUT:
       NONE


 RETURN:
       An array (xsize,ysize) containing a gaussian of width w centered
       centered at position (x0,y0)


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale






















GETHOST
-------


 PURPOSE:
	Determines the host machine type.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result=gethost()


 ARGUMENTS:
  INPUT: NONE

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT:
	status:	If no errors occur, status will be zero, otherwise
		it will be a string giving an error message.


 RETURN:
	String indicating the host machine type.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/1996
	

























GET_DOC_PURPOSE
---------------


 PURPOSE:
       To extract the purpose from header documentation


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = get_doc_purpose(filespec)


 ARGUMENTS:
  INPUT:
       filespec:       Filespec to extract documentation from.

  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
         nospec:       Only works under UNIX unless /nospec

  OUTPUT:
       NONE

 RETURN:
       String containing documentation text.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


























GET_JULIANDATE
--------------


 PURPOSE:
       To obtain the Julian Date


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = get_juliandate(stime=stime, string=string, format=format)


 ARGUMENTS:
  INPUT:
       NONE

  OUTPUT:
	NONE

 KEYWORDS:
  INPUT:
         string:       If set, time is output as a string.

         format:       Format to use if output is string.  Default is
                       (d14.6)

  OUTPUT:
          stime:       System time

 RETURN:
       Julian date in floating point or a string if /string used.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale























GET_PATH
--------


 PURPOSE:
	Obtains a path list from a specified path variable using the 
	same syntax used for IDL paths.


 CATEGORY:
	UTIL/EXD


 CALLING SEQUENCE:
	paths = get_path(path)


 ARGUMENTS:
  INPUT:
	path:	 String giving the path specification.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:  
	extesion:	File extension to match.  If given, only directories
		 	containing files of this type are returned.

	file:	File name to match.  If given, only directories
		 containing files with this name are returned.


  OUTPUT: NONE


 RETURN:
	An array of directories produced by expanding the value of the
	given path using the IDL path syntax.  See the IDL routine
	EXPAND_PATH.  The result is narrowed based on the EXTENSION and
	FILE keywords, if present.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/2011
	
















GET_USERNAME
------------


 PURPOSE:
       To obtain the username of the person running the function


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = get_username()


 ARGUMENTS:
       NONE

 RETURN:
       String variable containing the username.  This routine is operating
       system dependent and only works for unix and VMS currently.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale




































GRAPHIC_TO_CENTRIC
------------------


 PURPOSE:
	Converts planetographic surface coordinates to planetocentric.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = graphic_to_centric(radii, latlon)


 ARGUMENTS:
  INPUT:
	radii:	Ellipsoid (3,nt) radii.

	latlon:	Array (2,nv,nt) giving the planetographic latitudes and
		longitudes.

  OUTPUT: NONE


 KEYWORDS: NONE


 RETURN:
	Planetographic coordinates.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/2014
	


























GRAPHIC_TO_CENTRIC_LAT
----------------------


 PURPOSE:
	Converts planetographic latitudes to planetocentric latitudes.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = graphic_to_centric_lat(a, b, lat0)


 ARGUMENTS:
  INPUT:
	a:	Polar radius.

	b:	Equatorial radius.

	lat0:	Planetocentric latitudes.

  OUTPUT: NONE


 KEYWORDS: NONE


 RETURN:
	Planetographic latitudes.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2002
	

























HIST_2D
-------

 PURPOSE:
	Return the density function (histogram) of two variables.

 CATEGORY:
	Image processing, statistics, probability.

 CALLING SEQUENCE:
	Result = hist_2d(V1, V2)
 INPUTS:
	V1 and V2 = arrays containing the variables.  May be any non-complex
		numeric type.

 Keyword Inputs:
       MIN1:   MIN1 is the minimum V1 value to consider. If this
               keyword is not specified, then V1 si searched for 
		its smallest value.

       MIN2:   MIN2 is the minimum V2 value to consider. If this
               keyword is not specified, then V2 si searched for 
		its smallest value.

       MAX1:   MAX1 is the maximum V1 value to consider. If this
               keyword is not specified, then V1 is searched for
               its largest value.

       MAX2    MAX2 is the maximum V2 value to consider. If this
               keyword is not specified, then V2 is searched for
               its largest value.

       BIN1    The size of each bin in the V1 direction (column
               width).  If this keyword is not specified, the
               size is set to 1.

       BIN2    The size of each bin in the V2 direction (row
               height).  If this keyword is not specified, the
               size is set to 1.

 OUTPUTS:
	The two dimensional density function of the two variables,
	a longword array of dimensions (m1, m2), where:
		m1 = Floor((max1-min1)/bin1) + 1
	   and  m2 = Floor((max2-min2)/bin2) + 1
	and Result(i,j) is equal to the number of sumultaneous occurences
	of an element of V1 falling in the ith bin, with the same element
	of V2 falling in the jth bin, where:
		i = (v1 < max1 - min1 > 0) / b1
	   and  j = (v2 < max2 - min2 > 0) / b2

	Note: elements larger than the max or smaller than the min are
	truncated to the max and min, respectively.

 COMMON BLOCKS:
	None.
 SIDE EFFECTS:
	None.
 RESTRICTIONS:
	Not usable with complex or string data.
 PROCEDURE:
	Creates a combines array from the two variables, equal to the
	linear subscript in the resulting 2D histogram, then applies
	the standard histogram function.

 EXAMPLE:
	Return the 2D histogram of two byte images:
		R = HIST_2D(image1, image2)

	Return the 2D histogram made from two floating point images
	with range of -1 to +1, and with 101 (= 2/.02 + 1) bins:
		R = HIST_2D(f1, f2, MIN1=-1, MIN2=-1, MAX1=1, MAX2=1, $
			BIN1=.02, BIN2=.02)

 MODIFICATION HISTORY:
 	Written by:
	DMS, Sept, 1992		Written
	DMS, Oct, 1995		Added MIN, MAX, BIN keywords following
				suggestion of Kevin Trupie, GSC, NASA/GSFC.
	Spitale, Jun 2002	Added reverse_indices keyword




















































IMAGE_GRADIENT
--------------


 PURPOSE:
       To calculate the image gradiant.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_gradient(im)


 ARGUMENTS:
  INPUT:
       im:     An image.

  OUTPUT:
       NONE

 RETURN:
       The image gradiant.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

































IMAGE_INTERP
------------


 PURPOSE:
       Extracts a region from an image using the desired interpolation.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_interp(image, grid_x, grid_y)


 ARGUMENTS:
  INPUT:
        image:         An array of image point arrays.

       grid_x:         The grid of x positions for interpolation

       grid_y:         The grid of y positions for interpolation

  OUTPUT:
       NONE

 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale





























IMAGE_INTERP_CUBIC
------------------


 PURPOSE:
       Extracts a region from an image using cubic interpolation.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_interp_cubic(image, grid_x, grid_y)


 ARGUMENTS:
  INPUT:
        image:         An array of image point arrays.

       grid_x:         The grid of x positions for interpolation

       grid_y:         The grid of y positions for interpolation

	     k:		"Half-width" of the convolution window.  The
			window actually covers the central pixel, plus
			k pixels in each direction.  Default is 3, which
			gives a 7x7 window.

	fwhm:		If set, a gaussian with this half width is used for 
			the psf instead of caling the user-supplied function.

  OUTPUT:
       NONE


 KEYORDS:
  INPUT:
	psf_fn:		Name of a function to compute the psf:

				psf_fn(psf_data, x,y)

			where x and y are the location relative to the 
			center, and must accept arrays of any dimension.

	psf_data:	Data for psf function as shown above.

	mask:		Byte image indcating which pixels (value GT 0) should
			be excluded from the interpolation.

  OUTPUT:
       NONE


 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


IMAGE_INTERP_MEAN
-----------------


 PURPOSE:
       Extracts a region from an image using averaging interpolation.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_interp(image, grid_x, grid_y)


 ARGUMENTS:
  INPUT:
        image:         An array of image point arrays.

       grid_x:         The grid of x positions for interpolation

       grid_y:         The grid of y positions for interpolation

  OUTPUT:
       NONE

 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale





























IMAGE_INTERP_POLY
-----------------


 PURPOSE:
       Extracts a region from an image using Lagrange polynomial
	interpolation.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_interp(image, grid_x, grid_y)


 ARGUMENTS:
  INPUT:
        image:         An array of image point arrays.

       grid_x:         The grid of x positions for interpolation

       grid_y:         The grid of y positions for interpolation

  OUTPUT:
       NONE

 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale




























IMAGE_INTERP_SINC
-----------------


 PURPOSE:
       Extracts a region from an image using sinc interpolation.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_interp_sinc(image, grid_x, grid_y)


 ARGUMENTS:
  INPUT:
        image:         An array of image point arrays.

       grid_x:         The grid of x positions for interpolation

       grid_y:         The grid of y positions for interpolation

	     k:		"Half-width" of the convolution window.  The
			window actually covers the central pixel, plus
			k pixels in each direction.  Default is 3, which
			gives a 7x7 window.

	fwhm:		If set, a gaussian with this half width is used for 
			the psf instead of caling the user-supplied function.

  OUTPUT:
       NONE


 KEYORDS:
  INPUT:
	psf_fn:		Name of a function to compute the psf:

				psf_fn(psf_data, x,y)

			where x and y are the location relative to the 
			center, and must accept arrays of any dimension.

	psf_data:	Data for psf function as shown above.

	mask:		Byte image indcating which pixels (value GT 0) should
			be excluded from the interpolation.

  OUTPUT:
       NONE


 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


IMAGE_INTERP_SINC
-----------------


 PURPOSE:
       Extracts a region from an image using sinc interpolation.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = image_interp_sinc(image, grid_x, grid_y)


 ARGUMENTS:
  INPUT:
        image:         An array of image point arrays.

       grid_x:         The grid of x positions for interpolation

       grid_y:         The grid of y positions for interpolation

	     k:		"Half-width" of the convolution window.  The
			window actually covers the central pixel, plus
			k pixel in each direction.  Default is 3, which
			gives a 7x7 window.

	fwhm:		If set, a gaussian with this half width is used for 
			the psf instead of caling the user-supplied function.

  OUTPUT:
       NONE


 KEYORDS:
  INPUT:
	psf_fn:		Name of a function to compute the psf:

				psf_fn(psf_data, x,y)

			where x and y are the location relative to the 
			center, and must accept arrays of any dimension.

	psf_data:	Data for psf function as shown above.

	mask:		Byte image indcating which pixels (value GT 0) should
			be excluded from the interpolation.

  OUTPUT:
       NONE


 RETURN:
       Array of interpolated points at the (grid_x, grid_y) points.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


IMAGE_MEDIAN
------------


 PURPOSE:
	Produces an image in which each pixel is the median of the corresponding
	pixels in the input images.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = image_median(images)


 ARGUMENTS:
  INPUT:
	images:	Array (xsize, ysize, n) containing the n input images.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	Array (xsize, ysize) with the output image.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	






















IMAGE_MEDIAN
------------


 PURPOSE:
	Produces an image in which each pixel is the median of the corresponding
	pixels in the input images.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = image_median(images)


 ARGUMENTS:
  INPUT:
	images:	Array (xsize, ysize, n) containing the n input images.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	Array (xsize, ysize) with the output image.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 1/2002
	






















INTERNAL_POINTS
---------------


 PURPOSE:
       Output subscripts of points inside the given bounds.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = internal_points(points, x0, x1, y0, y1)


 ARGUMENTS:
  INPUT:
       points:         An array of image point.

           x0:         Lower x bound.

           x1:         Upper x bound.

           y0:         Lower y bound.

           y1:         Upper y bound.

  OUTPUT:
       NONE

 RETURN:
       Subscripts of points in array that fall inside the rectangle
       whose corners are (x0,y0) and (x1,y1).

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

























JUP_CONVERT_LONGITUDE
---------------------


 PURPOSE:
	Convert among Jupiter's I, II, and III longitude systems.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = jup_convert_longitude(lon, jd, from=from, to=to)


 ARGUMENTS:
  INPUT:
	lon:	Longitude to be converted; radians.

	jd:	Julian date.


 KEYWORDS:
  INPUT:
	from:	String specifying the input longitude system 
		-- 'I', 'II', or 'III'.

	to:	String specifying the output longitude system 
		-- 'I', 'II', or 'III'.

 RETURN:
	Converted longitude; radians.


 PROCEDURE:
	Conversions are based on the physical ephemeris parameters
	given in table 7.44.1 of the explanatory supplement to the
	astronomical almanac.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/17/2001
	






















LOCMOD
------


 PURPOSE:
       Finds points in the image at which the correlation with the
       given model is high.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = modloc(image, model, edge=edge, ccmin=ccmin, gdmax=gdmax)


 ARGUMENTS:
  INPUT:
       image:  Input image.

       model:  2-D array giving a model of the reseau image.


  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
        edge:  Distance from edge within which points are ignored.

       ccmin:  Minimum correlation coefficient to accept.  Default is 0.8 . 

       gdmax:  Maximum gradiant of correlation coefficient to accept. 
		Default is 0.25

	dmax:	Maximum number of resultant points allowed within any region
		of the image of size dbin * (size of the model).  Default is 2.

	dbin:	Binning factor size for computing point density, default is 2.

      double:  If set, image is converted to double in the function,
               otherwise it is converted to float.


  OUTPUT:
       coeff:	Correlation coefficients of returned points. 


 RETURN:
       The points (x,y) in the image that best fits the model.  Returns 0
       if no points are found.

 PROCEDURE:
	Modloc first computes computes maps of the correlation coefficient
	between the model and the image with the model centered at each point
	as well as the gradient of the correlation coefficient at each point. 
	Points with high correlation and low gradient are selected as
	candidates.  To select the final points, the point density is computed
	using a bin size of twice the size of the model and points within
	regions containing more than dmax candidates are deselected.
	


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale






























































MAKE_ARRAY1
-----------


 PURPOSE:
       Same as IDL function, make_array, but if n=1 it returns a scalar.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = make_array1(n, value=value)


 ARGUMENTS:
  INPUT:
           n:  Number of elements in resultant array.

  OUTPUT:
       NONE


 KEYWORDS:
  INPUT:
       value:  Values to fill array.

  OUTPUT:
       NONE


 RETURN:
       Array (n) filled with value.  If n=1 then a scalar is returned
       instead of an array.


 SEE ALSO:
	make_array

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale




















MBFIT
-----


 PURPOSE:
	Performs a simultaneous least square fit using the given coefficients.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = mbfit(M, b)


 ARGUMENTS:
  INPUT:
	M:	Array (3,3,n) of coefficient matrices as computed by 
		icv_coeff or ipt_coeff.  Coefficients from the two sources
		may be mixed.

	b:	Array (n,3) of coefficient vectors as computed by 
		icv_coeff or ipt_coeff.  Coefficients from the two sources
		may be mixed.

  OUTPUT: NONE


 KEYWORDS:
  INPUT: NONE

  OUTPUT: NONE


 RETURN:
	3-element vector giving the offset as [dx,dy,dtheta].


 PROCEDURE:
	The simultaneous fit is performed by solving the system of equations

				SM x = Sb,

	where SM and Sb represent the sums of the M and b arguments over the 
	'n' dimension respectively, and x is the return vector, [dx,dy,dtheta].


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/1998
	











MFACT
-----


 PURPOSE:
       Computes the factorial of each element of x


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = mfact(x)


 ARGUMENTS:
  INPUT:
           x:  Float or double matrix

  OUTPUT:
       NONE


 RETURN:
       Array of factorials for each element of x


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale
































MODLOC
------


 PURPOSE:
       Finds points in the image at which the correlation with the
       given model is high.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = modloc(image, model, edge=edge, ccmin=ccmin, gdmax=gdmax)


 ARGUMENTS:
  INPUT:
       image:  Input image.

       model:  2-D array giving a model of the reseau image.


  OUTPUT:
       NONE

 KEYWORDS:
  INPUT:
        edge:  Distance from edge within which points are ignored.

       ccmin:  Minimum correlation coefficient to accept.  Default is 0.8. 

       gdmax:  If given, the maximum gradiant of correlation coefficient 
		to accept. 

	dmax:	Maximum number of resultant points allowed within any region
		of the image of size dbin * (size of the model).  Default is 2.

	dbin:	Binning factor size for computing point density, default is 2.

      double:  If set, image is converted to double in the function,
               otherwise it is converted to float.


  OUTPUT:
       NONE 


 RETURN:
       The points (x,y) in the image that best fits the model.  Returns 0
       if no points are found.

 PROCEDURE:
	Modloc first computes computes maps of the correlation coefficient
	between the model and the image with the model centered at each point
	as well as the gradient of the correlation coefficient at each point. 
	Points with high correlation and low gradient are selected as
	candidates.  To select the final points, the point density is computed
	using a bin size of twice the size of the model and points within
	regions containing more than dmax candidates are deselected.
	


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale






























































NMAX
----


 PURPOSE:
       Finds maximum values within many arrays.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = nmax(array, direction, subscripts=subscripts)


 ARGUMENTS:
  INPUT:
         array:  Array to search for maximum values.

     direction:  Dimension to search.


  OUTPUT:
       NONE

 KEYWORDS:
    subscripts: Coordinate of each maximum value relative to the 
                scanning dimension.


 RETURN:
       An array of maximum values.  

 EXAMPLE:
	If x is an array with dimensions (d0,d1,d2), then the command 

		xm = nmax(x, 1, sub=sub)

	returns an array with dimensions (d0,1,d2), where each value is 
	the maximum value along the scanned direction (direction 1).   


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 1/2002

















NMIN
----


 PURPOSE:
       Finds minimum values within many arrays.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = nmin(array, direction, subscripts=subscripts)


 ARGUMENTS:
  INPUT:
         array:  Array to search for minimum values.

     direction:  Dimension to search.


  OUTPUT:
       NONE

 KEYWORDS:
    subscripts: Coordinate of each minimum value relative to the 
                scanning dimension.


 RETURN:
       An array of minimum values.  

 EXAMPLE:
	If x is an array with dimensions (d0,d1,d2), then the command 

		xm = nmin(x, 1, sub=sub)

	returns an array with dimensions (d0,1,d2), where each value is 
	the minimum value along the scanned direction (direction 1).   


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 1/2002

















NNWHERE
-------


 PURPOSE:
       Finds subscripts where an element in the first array matches
       elements in the second input array.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = nnwhere(ref, list)


 ARGUMENTS:
  INPUT:
        ref:  Reference array

       list:  Comparison array.


  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       An array of subscripts in list that match something in ref.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

























NTRACE
------


 PURPOSE:
       Computes the traces of square matrices


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = ntrace(matrix)


 ARGUMENTS:
  INPUT:
       matrix:         Array (n,n,m) of nxn matrices.

  OUTPUT:
       NONE


 RETURN:
       Array (m) giving the traces of the matrices.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale
































NV_PTR_FREE_RECURSE
-------------------


 PURPOSE:
	Frees the given pointer and all pointers pointed to by it.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	nv_ptr_free_recurse, p


 ARGUMENTS:
  INPUT:
	p:	Pointer to be freed.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 STATUS:
	Not complete, currently just frees the given pointer.


 MODIFICATION HISTORY:
 	Written by:	Spitale,  5/2002
	



























NWHERE
------


 PURPOSE:
       Finds subscripts where an element in the first array matches
       elements in the second input array.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = nwhere(ref, list)


 ARGUMENTS:
  INPUT:
        ref:  Reference array

       list:  Comparison array.


  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       An array of subscripts in ref that match something in list.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale

























N_WHERE
-------


 PURPOSE:
       Finds subscripts where an element in the first array matches
       elements in the second input array.  This routine differs
	from nwhere in that 1) it works as advertised, and 2) it uses
	array operations for a faster search.  Also, this routine
	works only for numeric types.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = n_where(ref, list)


 ARGUMENTS:
  INPUT:
        ref:  Reference array

       list:  Comparison array.


  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       An array of subscripts in list that match something in ref.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale






















PERIM_INTERP
------------


 PURPOSE:
	Interpolates within given ellipses in an image.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = perim_interp(image, center_pts, a, b, h)


 ARGUMENTS:
  INPUT:
	image:		Input image.

	center_pts:	Array (2,n) giving ellipse centers.

	a:		Scalar giving the semimajor axis of the ellipses.

	b:		Scalar giving the semiminor axis of the ellipses.

	h:		Scalar giving the rotation of the ellipse semimajor axes
			from horizontal.  (radians)

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	show:		If set, the outlines of the ellipses are plotted on 
			the current graphics window.

  OUTPUT:
	NONE


 RETURN:
	Image array in which the pixels contained in the specified ellipses
	havwe been interpolated from the pixels along the perimeters of the 
	ellipses.


 PROCEDURE:
	Each point in each ellipse is replaced by an average of the points on
	the perimeter, weighted by the inverse square of the point's distance
	from each perimeter point. 


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2002
	





POLY_TRANSFORM
--------------


 PURPOSE:
       Transforms an array of points given a polynomial transformation


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = poly_transform(Dx, Dy, v)


 ARGUMENTS:
  INPUT:
       Dx:     Polynominal distortion coefficients in x.

       Dy:     Polynominal distortion coefficients in y.

        v:     Array of points to transform.

  OUTPUT:
       NONE


 RETURN:
       Array of transformed points.


 SEE ALSO:
       power_matrix, vecgen, mxgen, trace


 MODIFICATION HISTORY:
       Written by:     Spitale, 6/1998




























POWER_MATRIX
------------


 PURPOSE:
       Constructs an array of n x n matrices such that the (i,j)th element
       of the kth matrix is:
                                  i    j
                   M(i,j,k) = p(k) q(k)

 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = power_matrix(p, q, n)


 ARGUMENTS:
  INPUT:
       p:      An input array of k elements

       q:      An input array of k elements

       n:      Dimension of 2d matrix


  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       The power_matrix as described above.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale






















PROD
----


 PURPOSE:
       Computes the product of the elements of the given array.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = prod(array, dim)


 ARGUMENTS:
  INPUT:
       array:  An input array

         dim:  The dimension over which to multiply.

  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       The product of all the elements in the array.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale



























PRODUCT
-------


 PURPOSE:
       Computes the slow product of the elements of the given array.
	This routine gives better results te prod for input arrays of integer
	types with smal numbers of elements.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = product(array)


 ARGUMENTS:
  INPUT:
       array:  An input array

  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       The product of all the elements in the array.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale



























PTLOC
-----


 PURPOSE:
       To locate a point in an image that best fits a psf model.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = ptloc(image, model, width)


 ARGUMENTS:
  INPUT:
       image:  Image, or subimage in which to find the point.
               Size of image should be at least width + size of model.

       model:  Model of the point spread function.

       width:  Width of box around calculated point in which to
               find the point.

  OUTPUT:
	sigma:	Position uncertainty.

         ccp:  The correlation coefficient at the point found.


 RETURN:
       The point (x,y) in the image that best fits the model.


 PROCEDURE:
       The correlation between the image and the model is calculated.  
	If possible, a gaussian is fit to the correlation peak and the
	sub-pixel location of the center of the gaussian is the result.  
	If that fit does not converge, then the location of the pixel with
	the maximum correlation is returned and a warning is printed.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Haemmerle, 6/1998
	Modified:	Spitale, 9/2002 -- Fit to gaussian to determine
				  subpixel location of correlation peak.














PTR_COPY_RECURSE
----------------


 PURPOSE:
	Copies data from the given pointer and from all pointers pointed to 
	by it.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = ptr_copy_recurse(p)


 ARGUMENTS:
  INPUT:
	p:	Pointer to be copied.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 STATUS:
	xx


 MODIFICATION HISTORY:
 	Written by:	Spitale,  6/2002
	


























RA_TO_XYZ
---------


 PURPOSE:
	Convert array of RA and DEC to an array of 1x3 position vectors 


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       ra_to_xyz, ra, dec, pos


 ARGUMENTS:
  INPUT:
        ra:	Array of Right Ascensions (in degrees)

       dec:	Array of Declinations (in degrees)

  OUTPUT:
       pos:	An array of 1x3 column vectors dimensioned (1,3,n)

 KEYWORDS:

       NONE

 RETURN:
        An array of n 1x3 column vectors.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Haemmerle 6/2000 
                       


























READ_CSV
--------


 PURPOSE:
	Reads a CSV file.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = read_csv(filename)


 ARGUMENTS:
  INPUT:
	filename:	Name of file to read

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	delim:	String giving character to use to delimit columns.
		Defaults to ','.

  OUTPUT:
	NONE


 RETURN:
	Array (ncol, nrow) of strings.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/2012
	






















READ_TXT_FILE
-------------


 PURPOSE:
	Reads a text file, parsing some basic directives and removing
	comments.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	text = read_txt_file(fname, notes)


 ARGUMENTS:
  INPUT:
	fname:	Name of the file to read.

  OUTPUT: 
	notes:  Array of strings giving note text for each line.  This text is taken
		from the 'note' input.


 KEYWORDS:
  INPUT: 
	start:	If given, the returned text begins at the first line
		in which this string appears.  Default is '--begin--'.

	stop:	If given, the returned text ends at the first line
		in which this string appears.  Default is '--end--'.

       note:	If this string appears in the file, this line is used as the note 
		for each returned line until this string appears again, and so on.
		Default is '--note--'.

	raw:	If set, the 'start' and 'stop' keywords are ignored.
		Comments are also not removed.

	all:	If set, the 'start' and 'stop' keywords are ignored.

	sample:	If set, only every nth line is returned, where n is the value
		of this keyword; the first line is always returned.  If there 
		are notes, then this operation applies separately to each block 
		of lines with the same note.

	select: If set, only lines with the given note string will be returned.
		

  OUTPUT:
	status:	0 if successful, -1 if file not found


 RETURN:
	String array containing the text read from the file.  Unless /raw
	is specified, the returned text will not contain any characters
	appearing after the comment character '#', and the start and stop
	directoves are used to select the return block of text.


 STATUS:
	Complete


 SEE ALSO:
	write_txt_file


 MODIFICATION HISTORY:
 	Written by:	Spitale, 8/1994
	



























































READ_TXT_TABLE
--------------


 PURPOSE:
	Reads a text file composed of rows and columns into an array.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = read_txt_table(filename)


 ARGUMENTS:
  INPUT:
	filename:	Name of file to read

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	comment_char:	String giving character to use as line comment.
			Defaults to '#'.

	continue_char:	String giving character to use for line continuation.
			Defaults to '\'.

	delim_char:	String giving character to use to delimit columns.
			Defaults to ' '.

  OUTPUT:
	NONE


 RETURN:
	Array (ncolumns,nrows) of strings.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 2/2002
	
















REDUCE_DIM
----------


 PURPOSE:
       Converts an array to a 1d array.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = reduce_dim(x)


 ARGUMENTS:
  INPUT:
       x:      An input array

  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 RETURN:
       The input array reformed as a 1d array.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale





























REMCHAR
-------


 PURPOSE:
       Removes a character from a string


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       remchar, s, c


 ARGUMENTS:
  INPUT:
       s:      An input string

       c:      Character to remove

  OUTPUT:
       NONE

 KEYWORDS:
       NONE


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale































RM_LIST_ITEM
------------


 PURPOSE:
	Remove the item with index i from the given list and return the
	new list.  If the index is not in the list, then return the original
	list unchanged.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	newlist = rm_list_item(list, i)


 ARGUMENTS:
  INPUT:
	list:	The list from which to remove item with index i.

	i:	Index of item in list to be removed.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	only:	If set, then return is [only] if removing the only element of
		the list. Otherwise return [0] on this condition.

  OUTPUT: NONE


 RETURN:
	New list with item i removed.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 8/1994
	




















SAT_CONVERT_LONGITUDE
---------------------


 PURPOSE:
	Convert among Saturn's I, II, and III longitude systems.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = sat_convert_longitude(lon, jd, from=from, to=to)


 ARGUMENTS:
  INPUT:
	lon:	Longitude to be converted; radians.

	jd:	Julian date.


 KEYWORDS:
  INPUT:
	from:	String specifying the input longitude system 
		-- 'I', 'II', or 'III'.

	to:	String specifying the output longitude system 
		-- 'I', 'II', or 'III'.

 RETURN:
	Converted longitude; radians.


 PROCEDURE:
	Conversions are based on the physical ephemeris parameters
	given in table 7.44.1 of the explanatory supplement to the
	astronomical almanac.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 9/18/2001
	






















SIGN
----

 PURPOSE:
       Return the sign of the operand


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       return = sign(x)


 ARGUMENTS:
  INPUT:
       x:      An input value or array

  OUTPUT:
       NONE

 KEYWORDS:
       NONE

 RETURN:
       An array whose elements are the sign (+1 or -1) of the input array.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale
































SPLIT_FILENAME
--------------


 PURPOSE:
	Divides a path in to directory and filename.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	split_filename, filename, dir, name


 ARGUMENTS:
  INPUT:
	filename:	filenames to split

  OUTPUT:
	dir:	directories

	name:	base filenames

	ext:	If this argument is given, the file extension is returned
		and the 'name' output contains only the base name without
		the extension.


 RETURN:
	NONE



 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/2001
	




























STRNPOS
-------

 PURPOSE:
       Finds every occurrence of the given character token within the given 
	string.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       return = strnpos(string, token)


 ARGUMENTS:
  INPUT:
        string:        An input string

         token:        Character to match

  OUTPUT:
       NONE


 KEYWORDS:
       NONE


 RETURN:
       Array giving the position of every occurrence of the token within
	the string.  -1 if not found.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 2/2002


























STRNPOS
-------

 PURPOSE:
       Finds first occurrence of a character other than the given character 
	token within the given string.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       return = strxpos(string, token)


 ARGUMENTS:
  INPUT:
        string:        An input string

         token:        Character to match

  OUTPUT:
       NONE


 KEYWORDS:
       NONE


 RETURN:
       Position of first occurence.  -1 if not found.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 9/2008



























STRNUMBER
---------
 PURPOSE:
      Function to determine if a string is a valid numeric value.

 CALLING SEQUENCE:
      result = strnumber( st, [val, /HEX] )

 INPUTS:
      st - any IDL scalar string

 OUTPUTS:
      1 is returned as the function value if the string st has a
      valid numeric value, otherwise, 0 is returned.

 OPTIONAL OUTPUT:
      val - (optional) value of the string.  real*8

 OPTIONAL INPUT KEYWORD:
       /HEX - If present and nonzero, the string is treated as a hexadecimal
             longword integer.

 EXAMPLES:
      IDL> res = strnumber(' ',val)
           returns res=0 (not a number) and val is undefined

      IDL> res = strnumber('0.2d', val)
           returns res=1 (a valid number), and val = 0.2000d
              
 NOTES:
      (1) STRNUMBER was modified in February 1993 to include a special test for 
      empty or null strings, which now returns a 0 (not a number).    Without
      this special test, it was found that a empty string (' ') could corrupt
      the stack.

       (2) STRNUMBER will return a string such as '23.45uyrg' as a valid 
      number (=23.45) since this is how IDL performs the type conversion.  If
      you want a stricter definition of valid number then use the VALID_NUM
      function.
 HISTORY:
      version 1  By D. Lindler Aug. 1987
      test for empty string, W. Landsman          February, 1993
      Converted to IDL V5.0   W. Landsman   September 1997
      Hex keyword added.  MRG, RITSS, 15 March 2000.






















STRUCT_SUB
----------


 PURPOSE:
	Creates a new structure whise fields are the same as those in the 
	given structure except for the specified substitutions.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = struct_sub(struct, sub_tags, sub_val_ps)


 ARGUMENTS:
  INPUT:
	struct:		Input structure.

	sub_tags:	Tags to substitute

	sub_val_s:	Pointers to values for the substituted tags.

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
	NONE


 RETURN:
	A new structure is created that is the same as the input structure
	except for the specified field substitutions.


 RESTRICTIONS:
	Currently only works for output structures with 10 or fewer fields.


 STATUS:
	Complete


 MODIFICATION HISTORY:
 	Written by:	Spitale, 3/2002














STR_EXT
-------

 PURPOSE:
       Extracts the substring which is delimited by the given tokens.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       return = str_ext(string, token1, token2, rstring, position=position)


 ARGUMENTS:
  INPUT:
        string:        An input string

        token1:        First token

        token2:        Second token

  OUTPUT:
       rstring:        Original string minus the part which was extracted


 KEYWORDS:
  INPUT:
       NONE

  OUTPUT:
      position:        Position at which the string was found


 RETURN:
       The extracted string is returned.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale





















STR_NSPLIT
----------

 PURPOSE:
       Splits the string into substrings delimited by the given token.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       return = str_nsplit(string, token)


 ARGUMENTS:
  INPUT:
        string:        An input string

         token:        String delimiter

  OUTPUT:
       NONE


 KEYWORDS:
       NONE


 RETURN:
       Array of substrings.  If the token is not found in the string,
       the original string is returned.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale; 2/2002



























STR_SPLIT
---------

 PURPOSE:
       Splits the string into two substrings delimited by the given token.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       return = str_split(string, token)


 ARGUMENTS:
  INPUT:
        string:        An input string

         token:        String delimiter

  OUTPUT:
       NONE


 KEYWORDS:
       NONE


 RETURN:
       Two substrings are returned split at the given token but not
       including the token.  If the token is not found in the string,
       the original string is returned.

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


























TAG_EXISTS
----------


 PURPOSE:
	Determines whether a structure contains a given field.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = tag_exists(struct, tag)


 ARGUMENTS:
  INPUT:
	struct:	Structure to test.

	tag:	String giving tag name to test for.

 RETURN:
	True if the tag exists, false otherwise.


 MODIFICATION HISTORY:
 	Written by:	Spitale, 8/28/2001
	





































TRANS_SOLVE
-----------


 PURPOSE:
	Solves the transcendental equation x = f(x) using iteration.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	result = xx(xx, xx)
	xx, xx, xx


 ARGUMENTS:
  INPUT:
	xx:	xx

	xx:	xx

  OUTPUT:
	xx:	xx

	xx:	xx


 KEYWORDS:
  INPUT:
	xx:	xx

	xx:	xx

  OUTPUT:
	xx:	xx

	xx:	xx


 ENVIRONMENT VARIABLES:
	xx:	xx

	xx:	xx


 RETURN:
	xx


 COMMON BLOCKS:
	xx:	xx

	xx:	xx


 SIDE EFFECTS:
	xx


 RESTRICTIONS:
	xx


 PROCEDURE:
	xx


 EXAMPLE:
	xx


 STATUS:
	xx


 SEE ALSO:
	xx, xx, xx


 MODIFICATION HISTORY:
 	Written by:	Spitale, 5/2002
	
















































TRIM_EXTERNAL_POINTS
--------------------


 PURPOSE:
       Trim external points from an array of image points.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = trim_external_points(points, x0, x1, y0, y1)


 ARGUMENTS:
  INPUT:
       points:         An array of image points.

           x0:         Lower x bound.

           x1:         Upper x bound.

           y0:         Lower y bound.

           y1:         Upper y bound.

  OUTPUT:
          sub:         Subscripts of the points that are not external

 RETURN:
       An array of points that fall inside the rectangle whose corners
       are (x0,y0) and (x1,y1).  The external points are trimmed.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale
























TRIM_REGION
-----------


 PURPOSE:
       Trim points outside a defined region.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = trim_region(points, region, xsize, ysize)


 ARGUMENTS:
  INPUT:
       points:         An array of image points.

       region:         Subscripts representing the region.

        xsize:         Size of image in x

        ysize:         Size of image in y


  OUTPUT:
       NONE

 RETURN:
       Subscripts of points which are contained in the given region.


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale


























TVDRAG
------


 PURPOSE:
	Allows user to drag a given image across a background image.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	p = tvdrag(bg_image, drag_image, p0)


 ARGUMENTS:
  INPUT:
	bg_image:	Background image.

	drag_image:	Image to be dragged across bg_image.

	p0:		Initial point in bg_image for origin of drag_image.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	win_num:	Window number of IDL graphics window in which to select
			box.  Default is current window.

	restore:	If set, the original image is restored at the end.

	grid_function:	Function which will quantize a point onto
			a grid.  It should take an orderered
			pair as its only argument and return an
			ordered pair.  Default is the identity function.

	cursor_init:	2-element vector giving Initial position for cursor.
			If not set, the routine will wait for a button 
			to be pressed before continuing.

	no_scale:	If set, tvdrag will not scale the levels of the
			drag image to the bg image.

  OUTPUT: NONE


 RETURN:
	2 element vector giving the point where the mouse button was released.


 STATUS:
	Complete


 SEE ALSO:
	tvline, tvpath, tvrec, tvcursor


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/1995
	Modified:	Spitale, 8/2008
	 Added window number inputs, xor_graphics option
	


































































TVLINE
------


 PURPOSE:
	Returns device coordinates of the beginning and end points of a user
	selected line.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	line = tvline()


 ARGUMENTS:
  INPUT:
	win_num:	Window number of IDL graphics window in which to select
			the line.  Default is current window.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	thick:		Thickness of line.

	restore:	If set, the line is removed from the image at the end.

	p0:		First point of line.  If set, then the routine
			immediately begins to drag from that point until a
			button is released.

	grid_function:	Function which will quantize a point onto
 			a grid.  It should take an orderered
			pair as its only argument and return an
			ordered pair.  Default is the identity function.

	linestyle:	Linestyle to use for line, default is 0.

	cancel_button:	Index of mouse button to be used as a cancel
			button.  Default is no cancel button.

	action_button:	Index of button to use as the action button
			instead of the left button, 1.

  OUTPUT:
	cancelled:	1 if the cancel button was pressed, 0 otherwise.


 RETURN:
	2D array containing the two selected endpoints of the line as
	[p,q] where p and q are 2D arrays in device coordinates.


 PROCEDURE:
	The line is selected by clicking the 'action button' at the location
	of the first point and dragging to endpoint and releasing.


 STATUS:
	Complete


 SEE ALSO:
	tvdrag, tvpath, tvrec, tvcursor


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/1995
	



























































TVPATH
------


 PURPOSE:
	Returns device coordinates of vertices on a curve selected by the user.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	vertices = tvpath()


 ARGUMENTS:
  INPUT:
	win_num:	Window number of IDL graphics window in which to select
			the path.  Default is current window.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	thick:		Thickness of the curve.

	restore:	If set, the line is removed from the image at the end.

	p0:		First point of line.  If set, then the routine
			immediately begins to drag from that point until a
			button is released.

	grid_function:	Function which will quantize a point onto
 			a grid.  It should take an orderered
			pair as its only argument and return an
			ordered pair.  Default is the identity function.

	linestyle:	Linestyle to use for curve, default is 0.

	select_button:	Index of button to use as the select button instead
			of the left button (1).

	erase_button:	Index of button to use as the erase button instead
			of the middle button (2).

	end_button:	Index of button to use as the end button instead
			of the right button (4).

	cancel_button:	Index of mouse button to be used as a cancel
			button instead of left+middle, (3).

	close:		If set, the curve will be closed when the end button
			is pressed.

	points:		If set, do not connect points.

	psym:		Plotting symbol to use for each point.

	copy		If set, copy mode is used instead of xor mode
			for drawing.  An offscreen pixmap is used for erasing.

	one:		If set, tvpath returns after any button is pressed.
			If it is not the select button, then cancelled is set.

	number:		If set, points are numbered as they are selected.


  OUTPUT:
	cancelled:	1 if the cancel button was pressed, 0 otherwise.
			If /one, then 1 if any button other than select was
			pressed.


 RETURN:
	2xn array containing the selected vertices in device coordinates.


 PROCEDURE:
	Points on the curve are selected by clicking the 'select button',
	which is the left button by default.  Points are removed with
	the 'erase button', the middle button by default.  The 'end button',
	by default the right button, completes the curve.


 STATUS:
	Complete


 SEE ALSO:
	tvdrag, tvline, tvrec, tvcursor


 MODIFICATION HISTORY:
 	Written by:	Spitale, 7/1995
	



































TVREC
-----


 PURPOSE:
	Returns device coordinates of the upper left and lower right corner 
	of a user-selected box.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	box = tvrec()


 ARGUMENTS:
  INPUT: 
	win_num:	Window number of IDL graphics window in which to select
			box, default is current window.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	thick:		Thickness of box outline.

	restore:	If set, the box is not left in the image.

	p0:		First corner of box.  If set, then the routine
			immediately begins to drag from that point until a
			button is released.

	grid_function:	Function which will quantize a point onto
			a grid.  It should take an orderered
			pair as its only argument and return an
			ordered pair.  Default is the identity function.

	linestyle:	Linestyle to use for rectangle, default is 0.

	color:		Color to use for rectangle, default is !color.

	aspect:		Aspect ratio (y/x) to maintain when drawing the 
			dragged zoom box.

	all_corners:	If set, coordinates of all four corners are returned.

	vline:		If set, only one line of the box is drawn: the vertical
			line touching the start point.

	hline:		If set, only one line of the box is drawn: the horizotal
			line touching the start point.


  OUTPUT: NONE


 RETURN: 
	2x2 array containing the two selected corners of the box as:
	[p,q] where p and q are 2D arrays in device coordinates.


 PROCEDURE:
	The box is selected by clicking at the location of the first corner
	and dragging to opposite corner and releasing.


 STATUS:
	Complete


 SEE ALSO:
	tvdrag, tvline, tvpath, tvcursor


 MODIFICATION HISTORY:
 	Written by:	Spitale, 8/1994





















































VALID_INDEX
-----------


 PURPOSE:
       Determines if an index into an array is valid


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = valid_index(array, index)


 ARGUMENTS:
  INPUT:
       array:  An array

       index:  An index into that array

  OUTPUT:
       NONE

 RETURN:
       A boolean value whether the index is valid


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale































VFACT
-----


 PURPOSE:
       Computes the factorial of each element of x


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = vfact(x)


 ARGUMENTS:
  INPUT:
           x:  Float or double vector

  OUTPUT:
       NONE


 RETURN:
       Array of factorials for each element of x


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale
































VTAYLOR
-------


 PURPOSE:
       Evaluates a taylor series using the given t=0 derivatives, dv, at
       each time t=dt.


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = vtaylor(dv, dt)


 ARGUMENTS:
  INPUT:
       dv:    dblarr(ndv,nelm)

       dt:    dblarr(ndt)

  OUTPUT:
       NONE

 RETURN:
       dblarr(ndt,nelm)

 RESTRICTIONS:
       Works for column vectors - not scalars

 STATUS:
       Works, but coeff not implemented


 MODIFICATION HISTORY:
       Written by:     Spitale




























WRITE_BIN_FILE
--------------


 PURPOSE:
	Writes data to a binary file.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	write_bin_file, fname, data


 ARGUMENTS:
  INPUT:
	fname:	Name of file to read.

	data:	Data to write to the file.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	append:	If set, the data will be appended if the file already exists.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/1994
	





















WRITE_TXT_FILE
--------------


 PURPOSE:
	Writes text to a file.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	write_txt_file, fname, text


 ARGUMENTS:
  INPUT:
	fname:	Name of file to read.

	text:	Text to write to the file.

  OUTPUT: NONE


 KEYWORDS:
  INPUT:
	append:	If set, the text will be appended if the file already exists.

  OUTPUT: NONE


 RETURN: NONE


 STATUS:
	Complete


 SEE ALSO:
	read_txt_file


 MODIFICATION HISTORY:
 	Written by:	Spitale, 11/1994
	




















XBOUND
------


 PURPOSE:
       Return y values of points bounding with x values


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       result = xbound(x, y, xbounds, bx=bx)


 ARGUMENTS:
  INPUT:
             x:        Array of x positions

             y:        Array of y positions

       xbounds:        Array containing the lower and upper x bound

  OUTPUT:
	NONE


 KEYWORDS:
  INPUT:
	NONE

  OUTPUT:
            bx:        x value of array of points within x bound

 RETURN:
       Y values of array of points within x bound


 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Spitale





















XINTERANIMATE1
--------------

 PURPOSE:
	Display an animated sequence of images using X-windows Pixmaps.
	The speed and direction of the display can be adjusted using
	the widget interface.

 CATEGORY:
	Image display, widgets.

 CALLING SEQUENCE:
	To initialize:
		XINTERANIMATE1, SET = [Sizex, Sizey, Nframes]

	To load a single image:
		XINTERANIMATE1, IMAGE = Image, FRAME = Frame_Index

	To load a single image that is already displayed in an existing window:
		XINTERANIMATE1, FRAME = Frame_index, $
			WINDOW = [Window_Number [, X0, Y0, Sx, Sy]]
	(This technique is much faster than reading back from the window.)

	To display the animation after all the images have been loaded:
		XINTERANIMATE1 [, Rate]

	To close and deallocate the pixmap/buffer (which also takes place
	automatically when the user presses the "Done With Animation"
	button or closes the window with the window manager):
		XINTERANIMATE1, /CLOSE

 OPTIONAL INPUTS:
	Rate:	A value between 0 and 100 that represents the speed of the
		animation as a percentage of the maximum display rate.
		The fastest animation is with a value of 100 and the slowest
		is with a value of 0.  The default animation rate is 100.
		The animation must be initialized using the SET
		keyword before calling XINTERANIMATE1 with a rate value.

 KEYWORD PARAMETERS:
	CLOSE:	Set this keyword to delete the offscreen pixwins and Widget,
		freeing storage.

	CYCLE: If set, cycle.  Normally, frames are displayed going either
		forward or backwards.  If CYCLE is set, reverse direction
		after the last frame in either direction is displayed.
		Provide this keyword with the SET keyword.

	FRAME:	The frame number when loading frames.  This keyword only has
		an effect when used in conjunction with the SET keyword.
		FRAME must be set to a number in the range 0 to Nframes-1.

	GROUP:	The widget ID of the widget that calls XINTERANIMATE1.  When
		this ID is specified, the death of the caller results in the
		death of XINTERANIMATE1.

	IMAGE:	A single image to be loaded at the animation position given
		by FRAME.  The keyword parameter FRAME must also be specified.

	KEEP_PIXMAPS: If TRUE, XINTERANIMATE1 doesn't destroy the animation
		pixmaps when it is killed. Calling it again without
		going through the SET and LOAD steps will cause the same
		animation to play without the overhead of creating
		the pixmaps.
	BLOCK:  Set this keyword to have XMANAGER block when this
		application is registered.  By default the Xmanager
               keyword NO_BLOCK is set to 1 to provide access to the
               command line if active command 	line processing is available.
               Note that setting BLOCK for this application will cause
		all widget applications to block, not only this
		application.  For more information see the NO_BLOCK keyword
		to XMANAGER.
	ORDER:	Set this keyword to display images from the top down instead
		of the default bottom up.  This keyword is only used when
		loading images.
       MODAL:  If set, then XINTERANIMATE1 runs in "modal" mode, meaning that
               all other widgets are blocked until the user quits
               XINTERANIMATE1.
	png_name: base name for png input file list.
     SHOWLOAD:	Set this keyword (in conjunction with the SET keyword) to
		display each frame and update the frame slider as frames are
		loaded.

	SET:	This keyword initializes XINTERANIMATE1.  SET should be equated
		to a 3-element integer vector containing the following
		parameters:
		  Sizex, Sizey:	The width and height of the images to be
				displayed, in pixels.

		  Nframes:	The number of frames in the animated sequence
				(since XINTERANIMATE1 is an animation routine,
				Nframes must be at least 2 frames).

	TITLE:	A string to be used as the title of the widget.  If this
		keyword is not specified, the title is set to "XInterAnimate1"
		This keyword has an effect only when used in conjunction with
		the SET keyword).

	TRACK: If set, the frame slider tracks the current frame.  Default
		is not to track.  Provide this keyword with the SET keyword.

	WINDOW:	When this keyword is specified, an image is copied from an
		existing window to the animation pixmap.  When using X
		windows, this technique is much faster than reading
		from the display and then calling XINTERANIMATE1 with a 2D
		array.

		The value of this parameter is either an IDL window
		number (in which case the entire window is copied),
		or a vector containing the window index and the rectangular
		bounds of the area to be copied, for example:
		WINDOW = [Window_Number, X0, Y0, Sx, Sy]

      XOFFSET:	The horizontal offset, in pixels from the left of the frame,
		of the image in the destination window.

      YOFFSET:	The vertical offset, in pixels from the bottom of the frame,
		of the image in the destination window.

 OUTPUTS:
	No explicit outputs.

 COMMON BLOCKS:
	XINTERANIMATE1_COM: a private common block.

 SIDE EFFECTS:
	A pixmap and widget are created.

 RESTRICTIONS:
	Only a single copy of XINTERANIMATE1 can run at a time.

 PROCEDURE:
	When initialized, this procedure creates an approximately square
	pixmap or memory buffer, large enough to contain Nframes of
	the requested size.  Once the images are loaded, using the
	IMAGE and FRAME keywords, they are displayed by copying the images
	from the pixmap or buffer to the visible draw widget.

 EXAMPLE:
	Enter the following commands to open the file ABNORM.DAT (a series
	of images of a human heart) and animate the images it contains using
	XINTERANIMATE1.  For a more detailed example of using XINTERANIMATE1,
	see the example in the "Using IDL Widgets" chapter of "IDL Basics".
	Read the images into the variable H by entering:

		OPENR, 1, FILEPATH('abnorm.dat', SUBDIR = 'examples/data')
		H = BYTARR(64, 64, 16)
		READU, 1, H
		CLOSE, 1
		H = REBIN(H, 128, 128, 16)

	Initialize XINTERANIMATE1 with the command:

		XINTERANIMATE1, SET=[128, 128, 16], /SHOWLOAD

	Load the images into XINTERANIMATE1 and play the animation by entering:

		FOR I=0,15 DO XINTERANIMATE1, FRAME = I, IMAGE = H[*,*,I]
		XINTERANIMATE1

 MODIFICATION HISTORY:
	DMS, April, 1990.
	SMR, December, 1990.  	Modified the XANIMATE code to work
				interactively with widgets.

	DMS, March, 1991.	Modified the routine to use individual pixmaps
				for each frame of the animation.  Also added
				the ability to read in from current IDL
				windows directly into offscreen bitmap.

	SMR, March, 1991.	Modified to use new XMANAGER keyword CLEANUP
				to clean up the offscreen pixmaps when dying.

	SMR, Jan, 1992.		Modified the /CLOSE portion to check for a
				valid widget before using WIDGET_CONTROL
				and /DESTROY.

	AB, June 1992		Rewrite using the new CW_ANIMATE compound
				widget. Added the KEEP_PIXMAPS keyword.

	DJE, April, 1996	Replaced XANNOUNCE with DIALOG_MESSAGE

       SJL, December, 1997     Added MPEG capability.

	LP, 6/16/98             Added MODAL keyword.

       Spitale 5.2012		Removed MPEG BS, added PNG support











XYZ_TO_RA
---------


 PURPOSE:
	Convert an array of position vectors [x, y, z] to RA and DEC


 CATEGORY:
       UTIL


 CALLING SEQUENCE:
       xyz_to_ra, pos, ra, dec


 ARGUMENTS:
  INPUT:
       pos:	An array of 1x3 column vectors (1,3,n)

  OUTPUT:
        ra:	Output array of Right Ascension (in degrees)

       dec:	Output array of Declination (in degrees)

 KEYWORDS:

       NONE

 STATUS:
       Completed.


 MODIFICATION HISTORY:
       Written by:     Haemmerle 6/2000 
                       






























ZFILL
-----


 PURPOSE:
	Replace tagged (default=0) values in array with mean of box
	around pixel.


 CATEGORY:
	UTIL


 CALLING SEQUENCE:
	zfill, image, fill, nsw, nlw


 ARGUMENTS:
  INPUT:
	image:	image to be operated on

	fill:	DN value to fill and not be included in mean calculation

	nsw:	size of sample window in mean calculation (default = 1)

	nlw:	size of line window in mean calculation (default = 3)

  OUTPUT:
	mask:	Mask of changed pixels (changed = 1)



 KEYWORDS:
  INPUT:
	xx:	xx

	xx:	xx

  OUTPUT:
	xx:	xx

	xx:	xx


 RETURN:
	xx


 COMMON BLOCKS:
	xx:	xx

	xx:	xx


 SIDE EFFECTS:
	xx


 RESTRICTIONS:
	


 PROCEDURE:
	xx


 EXAMPLE:
	xx


 STATUS:
	xx


 SEE ALSO:
	xx, xx, xx


 MODIFICATION HISTORY:
 	Written by:	V. Haemmerle 8/26/99
	



















































