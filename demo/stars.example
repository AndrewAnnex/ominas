;==============================================================================
;                            STARS.EXAMPLE
;
;  Thie example requires the voyager SEDR files and a star catalog, 
;  neither of which are supplied in the default installation.
;
;  This example demonstrates OMINAS' star fitting capabilities.
;
;  This example file can be executed from the UNIX command line using
;
;  	idl stars.example
;
;  or from within IDL using
;
;  	@stars.example
;
;  After the example stops, later code samples in this file may be executed by
;  pasting them onto the IDL command line.
;
;==============================================================================
!quiet = 1
;-------------------------------------------------------------------------
;                        Image read and display
;
;  This first section uses dat_read to read in the image.  The image file
;  c1138223.gem is a Voyager VICAR format file where the image has had
;  the camera distortions removed with the VICAR program GEOMA.  dat_read
;  reads the image portion (im) and the image label (label) and its output
;  is a data descriptor (dd). tvim is called to display the image
;  (im) at 1/2 size in a new window with the y coordinate as top-down.
;
;  Note:  If you're running a 24-bit display, you may want to do the
;  device, pseudo=8
;  command so that xloadct can be used to contrast enhance the image.
;
;-------------------------------------------------------------------------
;dd = dat_read('data/c1138223.gem', im, label)
dd = dat_read('~/casIss/1456/N1456251768_1.IMG', im, label)

tvim, im, zoom=0.75, /order

;-------------------------------------------------------------------------
;
;                      Filling the descriptors
;
;  This section fills the camera descriptor (cd), the planet descriptor
;  (pd) and the ring descriptor (rd) for use by the software.  In this
;  example, the default translators are skipped to use a SEDR update
;  from a VICAR program called NAV instead of using the normal SEDR
;  the regular translator would return.
;
;-------------------------------------------------------------------------
cd = pg_get_cameras(dd, 'sedr_source=NAV')
pd = pg_get_planets(dd, od=cd, 'sedr_source=NAV')
rd = pg_get_rings(dd, pd=pd, od=cd, 'sedr_source=NAV')


;-------------------------------------------------------------------------
;
;                     Filling the generic descriptor
;
;  This line fills a "generic" descriptor.  This is more of a convenience
;  feature where in several descriptors are grouped into a structure that
;  can be passed to functions in one piece.
;
;   cd - camera descriptor part
;  gbx - globe descriptor part
;  dkx - disk descriptor part
;
;-------------------------------------------------------------------------
gd = {cd:cd, gbx:pd, dkx:rd}

;-------------------------------------------------------------------------
;
;                     Filling the star descriptor
;
;  This line fills a star descriptor by reading the star catalog using
;  pg_get_stars. 
;
;  NOTES:
;    If the keyword 'tr_override' is specified, only the specified 
;    translator is called instead of whatever star catalog
;    translators are listed in the translators table.
;
;    The translator keyword 'faint' selects only stars with magnitudes
;    brighter than 8.  The keyword, 'bright' may be used place an upper
;    bound on the brightness.
;
;    /no_sort suppresses the default behavior of returning only
;    the first object found with any given name.  That operation can be
;    very time consuming when a large number of objects are returned
;    by the translators.  In the first case, we have specified that only one
;    translator will be called, and we know that it will not return 
;    duplicate objects.
;
;-------------------------------------------------------------------------
;sd = pg_get_stars(dd, od=cd, /no_sort, tr_ov='strcat_gsc_input', 'faint=8')
sd = pg_get_stars(dd, od=cd, /no_sort, 'faint=14')

;-------------------------------------------------------------------------
;
;                Calculating the limb, ring and planet and star centers
;                    Determining the plot characteristics
;
;  This section uses pg_limb to calculate the limb point structure (limb_ptd)
;  containing the limb points, the ring point structure (ring_ptd) and also
;  the planet center (center_ptd) and star centers (star_ptd) using the
;  routine pg_center.  It uses the generic descriptor (gd) to pass the camera,
;  planet and ring descriptors to these routines.  It also uses pg_hide to
;  remove (/rm) points from the ring (/disk) from the limb points and then
;  again to remove the ring points and star points covered by the planet
;  (/globe).  It then groups each of these into object_ptd for plotting.  The
;  colors, psyms, psizes and plables variables are defined for the plot.
;  The center is drawn in the default color (!p.color), the limb, the inner 
;  and outer ring and the stars are are all white (255).  In order to see
;  the stars, the symbol used for the stars is a square (6).  Here you can
;  see that each ring is treated as two objects (inner and outer) when 
;  defining plot characteristics.  Also, each star in the star descriptor is
;  treated as a separate object.  nlimb is the number of points in the 
;  limb_ptd structure, nring, the number of points in the ring point structure.
;  In plabels, the limb and ring's name is not plotted since it would be
;  plotted at the center of the object.
;
;-------------------------------------------------------------------------
star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe
n_stars=n_elements(sd)

color = ctred()
psym = 6
plabels = cor_name(sd)

;-------------------------------------------------------------------------
;
;              Drawing the limb, ring and planet and star centers
;
; This section draws the objects in the object structure (center, limb,
; ring and stars) with the colors and plot symbols and labels defined earlier.
; In this particular example, the planet does not appear in the image.
;
;-------------------------------------------------------------------------
pg_draw, star_ptd, color=color, psym=psym, plabel=plabels
stop, '=== Auto-test complete.  Use multi-window cut & paste to continue.'








;-------------------------------------------------------------------------
;
;              Drawing the stellar spectral types
;
; This pasteable section uses the stellar library function str_sp to return
; spectral types of the stars and uses them instead of the star names.
;
;-------------------------------------------------------------------------
tvim, im
spt=str_sp(sd)
psyms_str=make_array(n_stars,val=6)
pg_draw, star_ptd, color=color, psym=psym, plabel=spt

;-------------------------------------------------------------------------
;
;              Drawing stellar magnitudes
;
; This pasteable section uses the stellar library function str_get_mag to get
; visual magnitudes of the stars and uses them instead of the star names.
;
;-------------------------------------------------------------------------
tvim, im
sm = str_get_mag(sd)
smag = string(sm, format='(f4.1)')
psyms_str=make_array(n_stars,val=6)
pg_draw, star_ptd, color=color, psym=psym, plabel=smag

;-------------------------------------------------------------------------
;
;                    Manually repointing the geometry
;
;  This pasteable section first clears the screen of the plotted points
;  by redisplaying the image with tvim.  It then calls pg_drag to allow
;  the user to use the cursor to drag the pointing, and with it the stars.
;  To move the pointing with pg_drag, use the left mouse button and
;  translate the pointing in x,y.  Use the middle mouse button to rotate
;  the pointing about an axis (in this case, the axis of rotation is set
;  as the optic axis of the image (object_ptd) which is defined using the
;  routine pnt_create_descrptors with the points being the camera optic axis as
;  returned by the camera library routine cam_oaxis.  When the
;  desired pointing is set, the right mouse button accepts it.  pg_drag
;  returns the delta x,y amount dragged (dxy) as well as the rotation
;  angle (dtheta).  pg_repoint uses the dxy and dtheta to update the
;  camera descriptor (cd, passed by gd).  The limb, ring and star points
;  are then recalculated, the image redisplayed to clear the objects drawn,
;  and then pg_draw is called to replot.
;
;-------------------------------------------------------------------------
optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))
tvim, im
dxy = pg_drag(star_ptd, dtheta=dtheta, axis=optic_ptd, symbol=6)  ; square
pg_repoint, dxy, dtheta, axis=optic_ptd, gd=gd

star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe

tvim, im
pg_draw, star_ptd, color=color, psym=psym, plabel=plabels

;=========================================================================
;
;                         Scanning to find the stars
;                   and using it to calculate the pointing
;
;  This section calls pg_ptscan to scan the image around the predicted
;  star positions (within width of 40 pixels) and find the pixels with 
;  the highest correlation with a given edge model (example uses the
;  default gaussian) for each star.  These points are then plotted.
;
;-------------------------------------------------------------------------
ptscan_ptd = pg_ptscan(dd, star_ptd, edge=30, width=40)
pg_draw, ptscan_ptd, psym=1, col=ctyellow()

;-------------------------------------------------------------------------
;
;                 Thresholding using correlation coefficient
;
;  This section (optional) calls pg_threshold to remove points with lower
;  correlation coefficients.  This example only keeps stars with a 
;  correlation coefficient above 0.6.  Notice that each object can have
;  its own min and max value.
;
;-------------------------------------------------------------------------
pg_threshold, ptscan_ptd, min=make_array(n_stars,val=0.6), $
                         max=make_array(n_stars,val=1.0)

tvim, im
pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels
pg_draw, ptscan_ptd, psym=1, col=ctyellow()

;-------------------------------------------------------------------------
;
;                    Removing regions of bad points
;
;  This section (optional) calls pg_select to remove points within a
;  polygonal region as defined by the cursor.  Click the left mouse
;  button to mark a point and move the mouse to the next point and
;  click.  Use the middle mouse button to erase a point and the right
;  mouse button to end the region.  pg_trim removes the points in the
;  just defined region.  The scan points are then replotted.
;  Repeat these statements for each region a user wants to remove.
;
;-------------------------------------------------------------------------
region=pg_select(dd)
pg_trim, dd, ptscan_ptd, region

tvim, im
pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels
pg_draw, ptscan_ptd, psym=1, col=ctyellow()

;-------------------------------------------------------------------------
;
;                 Fitting the pointing to the found stars
;
;  This section calls pg_ptscan_coeff to determine the linear least-squares
;  coefficients for a fit to the image coordinate translation and rotation
;  which matches the computed positions to the scanned positions. It then
;  calls pg_fit to do the fit with the calculated coefficients to calculate
;  the correction in translation (dxy) and rotation (dtheta).  It calls
;  pg_ptchisq to get the chi square of the fit.  It then calls
;  pg_repoint to update the pointing.  Recalculates the limb, rings and stars
;  and replots.
;
;-------------------------------------------------------------------------
optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))
ptscan_cf = pg_ptscan_coeff(ptscan_ptd, axis=optic_ptd)
dxy = pg_fit([ptscan_cf], dtheta=dtheta)
chisq = pg_chisq(dxy, dtheta, ptscan_ptd, axis=optic_ptd[0])
covar = pg_covariance([ptscan_cf])
print, dxy, dtheta*180./!pi, chisq, covar
pg_repoint, dxy, dtheta, axis=optic_ptd, gd=gd

star_ptd = pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe

tvim, im
pg_draw, star_ptd, color=color, psym=psym, plabel=plabels



;=========================================================================
;
;                        Output the new state
;
;  This section (optional) shows how you can save your output: any changes
;  to the image data into a new file and the new pointing into a detached
;  header.
;
;-------------------------------------------------------------------------
pg_put_cameras, dd, gd=gd
dat_write, 'data/c1138223_nv.gem', dd
